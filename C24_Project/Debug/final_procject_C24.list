
final_procject_C24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f88  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b0  08009098  08009098  00019098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a48  08009a48  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08009a48  08009a48  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a48  08009a48  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a48  08009a48  00019a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a4c  08009a4c  00019a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  200001d4  08009c24  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  08009c24  00020584  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ca45  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000244f  00000000  00000000  0002cc85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  0002f0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a86  00000000  00000000  0002fe40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c73  00000000  00000000  000308c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff90  00000000  00000000  00049539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088e8a  00000000  00000000  000594c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004aec  00000000  00000000  000e2354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000e6e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009080 	.word	0x08009080

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08009080 	.word	0x08009080

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__gesf2>:
 8000ca4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ca8:	e006      	b.n	8000cb8 <__cmpsf2+0x4>
 8000caa:	bf00      	nop

08000cac <__lesf2>:
 8000cac:	f04f 0c01 	mov.w	ip, #1
 8000cb0:	e002      	b.n	8000cb8 <__cmpsf2+0x4>
 8000cb2:	bf00      	nop

08000cb4 <__cmpsf2>:
 8000cb4:	f04f 0c01 	mov.w	ip, #1
 8000cb8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cbc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc8:	bf18      	it	ne
 8000cca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cce:	d011      	beq.n	8000cf4 <__cmpsf2+0x40>
 8000cd0:	b001      	add	sp, #4
 8000cd2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000cd6:	bf18      	it	ne
 8000cd8:	ea90 0f01 	teqne	r0, r1
 8000cdc:	bf58      	it	pl
 8000cde:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ce2:	bf88      	it	hi
 8000ce4:	17c8      	asrhi	r0, r1, #31
 8000ce6:	bf38      	it	cc
 8000ce8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cec:	bf18      	it	ne
 8000cee:	f040 0001 	orrne.w	r0, r0, #1
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	d102      	bne.n	8000d00 <__cmpsf2+0x4c>
 8000cfa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cfe:	d105      	bne.n	8000d0c <__cmpsf2+0x58>
 8000d00:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d04:	d1e4      	bne.n	8000cd0 <__cmpsf2+0x1c>
 8000d06:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d0a:	d0e1      	beq.n	8000cd0 <__cmpsf2+0x1c>
 8000d0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <__aeabi_cfrcmple>:
 8000d14:	4684      	mov	ip, r0
 8000d16:	4608      	mov	r0, r1
 8000d18:	4661      	mov	r1, ip
 8000d1a:	e7ff      	b.n	8000d1c <__aeabi_cfcmpeq>

08000d1c <__aeabi_cfcmpeq>:
 8000d1c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d1e:	f7ff ffc9 	bl	8000cb4 <__cmpsf2>
 8000d22:	2800      	cmp	r0, #0
 8000d24:	bf48      	it	mi
 8000d26:	f110 0f00 	cmnmi.w	r0, #0
 8000d2a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d2c <__aeabi_fcmpeq>:
 8000d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d30:	f7ff fff4 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d34:	bf0c      	ite	eq
 8000d36:	2001      	moveq	r0, #1
 8000d38:	2000      	movne	r0, #0
 8000d3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3e:	bf00      	nop

08000d40 <__aeabi_fcmplt>:
 8000d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d44:	f7ff ffea 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d48:	bf34      	ite	cc
 8000d4a:	2001      	movcc	r0, #1
 8000d4c:	2000      	movcs	r0, #0
 8000d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d52:	bf00      	nop

08000d54 <__aeabi_fcmple>:
 8000d54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d58:	f7ff ffe0 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d5c:	bf94      	ite	ls
 8000d5e:	2001      	movls	r0, #1
 8000d60:	2000      	movhi	r0, #0
 8000d62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d66:	bf00      	nop

08000d68 <__aeabi_fcmpge>:
 8000d68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d6c:	f7ff ffd2 	bl	8000d14 <__aeabi_cfrcmple>
 8000d70:	bf94      	ite	ls
 8000d72:	2001      	movls	r0, #1
 8000d74:	2000      	movhi	r0, #0
 8000d76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7a:	bf00      	nop

08000d7c <__aeabi_fcmpgt>:
 8000d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d80:	f7ff ffc8 	bl	8000d14 <__aeabi_cfrcmple>
 8000d84:	bf34      	ite	cc
 8000d86:	2001      	movcc	r0, #1
 8000d88:	2000      	movcs	r0, #0
 8000d8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8e:	bf00      	nop

08000d90 <__aeabi_f2uiz>:
 8000d90:	0042      	lsls	r2, r0, #1
 8000d92:	d20e      	bcs.n	8000db2 <__aeabi_f2uiz+0x22>
 8000d94:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d98:	d30b      	bcc.n	8000db2 <__aeabi_f2uiz+0x22>
 8000d9a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d9e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000da2:	d409      	bmi.n	8000db8 <__aeabi_f2uiz+0x28>
 8000da4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000da8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dac:	fa23 f002 	lsr.w	r0, r3, r2
 8000db0:	4770      	bx	lr
 8000db2:	f04f 0000 	mov.w	r0, #0
 8000db6:	4770      	bx	lr
 8000db8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000dbc:	d101      	bne.n	8000dc2 <__aeabi_f2uiz+0x32>
 8000dbe:	0242      	lsls	r2, r0, #9
 8000dc0:	d102      	bne.n	8000dc8 <__aeabi_f2uiz+0x38>
 8000dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc6:	4770      	bx	lr
 8000dc8:	f04f 0000 	mov.w	r0, #0
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <Read_DataDHT>:
volatile uint32_t button2_detect_time = 0;

/* FUNCTIONS */
/* Read data from DHT sensor */
void Read_DataDHT(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	DHT_GetData(&DHT11_Data);
 8000dd4:	480e      	ldr	r0, [pc, #56]	; (8000e10 <Read_DataDHT+0x40>)
 8000dd6:	f004 fc65 	bl	80056a4 <DHT_GetData>
	Temperature = DHT11_Data.Temperature;
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <Read_DataDHT+0x40>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <Read_DataDHT+0x44>)
 8000de0:	6013      	str	r3, [r2, #0]
	Humidity = DHT11_Data.Humidity;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <Read_DataDHT+0x40>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	4a0c      	ldr	r2, [pc, #48]	; (8000e18 <Read_DataDHT+0x48>)
 8000de8:	6013      	str	r3, [r2, #0]
	Temp1 = DHT11_Data.Temp1;
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <Read_DataDHT+0x40>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <Read_DataDHT+0x4c>)
 8000df0:	6013      	str	r3, [r2, #0]
	Temp2 = DHT11_Data.Temp2;
 8000df2:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <Read_DataDHT+0x40>)
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <Read_DataDHT+0x50>)
 8000df8:	6013      	str	r3, [r2, #0]
	Hum1 = DHT11_Data.Hum1;
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <Read_DataDHT+0x40>)
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <Read_DataDHT+0x54>)
 8000e00:	6013      	str	r3, [r2, #0]
	Hum2 = DHT11_Data.Hum2;
 8000e02:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <Read_DataDHT+0x40>)
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <Read_DataDHT+0x58>)
 8000e08:	6013      	str	r3, [r2, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200002e0 	.word	0x200002e0
 8000e14:	200002f8 	.word	0x200002f8
 8000e18:	200002fc 	.word	0x200002fc
 8000e1c:	20000300 	.word	0x20000300
 8000e20:	20000304 	.word	0x20000304
 8000e24:	20000308 	.word	0x20000308
 8000e28:	2000030c 	.word	0x2000030c

08000e2c <HAL_GPIO_EXTI_Callback>:
/* External interupt callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_4)
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	2b10      	cmp	r3, #16
 8000e3a:	d110      	bne.n	8000e5e <HAL_GPIO_EXTI_Callback+0x32>
	{
		if (button0_detect == 0)
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d128      	bne.n	8000e98 <HAL_GPIO_EXTI_Callback+0x6c>
				{
					button00_detect = 1;
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
					button0_detect = 1;
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	701a      	strb	r2, [r3, #0]
					button0_detect_time = HAL_GetTick();
 8000e52:	f001 fb95 	bl	8002580 <HAL_GetTick>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4a13      	ldr	r2, [pc, #76]	; (8000ea8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e5a:	6013      	str	r3, [r2, #0]
	{
		button22_detect = 1;
		button2_detect = 1;
		button2_detect_time = HAL_GetTick();
	}
}
 8000e5c:	e01c      	b.n	8000e98 <HAL_GPIO_EXTI_Callback+0x6c>
	else if (GPIO_Pin == GPIO_PIN_5)
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	2b20      	cmp	r3, #32
 8000e62:	d10b      	bne.n	8000e7c <HAL_GPIO_EXTI_Callback+0x50>
		button11_detect = 1;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_GPIO_EXTI_Callback+0x80>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
		button1_detect = 1;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x84>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]
		button1_detect_time = HAL_GetTick();
 8000e70:	f001 fb86 	bl	8002580 <HAL_GetTick>
 8000e74:	4603      	mov	r3, r0
 8000e76:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x88>)
 8000e78:	6013      	str	r3, [r2, #0]
}
 8000e7a:	e00d      	b.n	8000e98 <HAL_GPIO_EXTI_Callback+0x6c>
	else if (GPIO_Pin == GPIO_PIN_6)
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	2b40      	cmp	r3, #64	; 0x40
 8000e80:	d10a      	bne.n	8000e98 <HAL_GPIO_EXTI_Callback+0x6c>
		button22_detect = 1;
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	701a      	strb	r2, [r3, #0]
		button2_detect = 1;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x90>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
		button2_detect_time = HAL_GetTick();
 8000e8e:	f001 fb77 	bl	8002580 <HAL_GetTick>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x94>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	2000040f 	.word	0x2000040f
 8000ea4:	20000410 	.word	0x20000410
 8000ea8:	20000414 	.word	0x20000414
 8000eac:	20000419 	.word	0x20000419
 8000eb0:	20000418 	.word	0x20000418
 8000eb4:	2000041c 	.word	0x2000041c
 8000eb8:	20000420 	.word	0x20000420
 8000ebc:	20000421 	.word	0x20000421
 8000ec0:	20000424 	.word	0x20000424

08000ec4 <btn_adjust_mode>:
/* Handle modes */
void btn_adjust_mode(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af02      	add	r7, sp, #8
	if (mode == BINHTHUONG)
 8000eca:	4b6e      	ldr	r3, [pc, #440]	; (8001084 <btn_adjust_mode+0x1c0>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d12d      	bne.n	8000f2e <btn_adjust_mode+0x6a>
	{
		mode = CHINHPHUT;  			/* gán mode = 1 */
 8000ed2:	4b6c      	ldr	r3, [pc, #432]	; (8001084 <btn_adjust_mode+0x1c0>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
		if ((button00_detect == 1) || (button11_detect == 1) || (button22_detect == 1))
 8000ed8:	4b6b      	ldr	r3, [pc, #428]	; (8001088 <btn_adjust_mode+0x1c4>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d00a      	beq.n	8000ef8 <btn_adjust_mode+0x34>
 8000ee2:	4b6a      	ldr	r3, [pc, #424]	; (800108c <btn_adjust_mode+0x1c8>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d005      	beq.n	8000ef8 <btn_adjust_mode+0x34>
 8000eec:	4b68      	ldr	r3, [pc, #416]	; (8001090 <btn_adjust_mode+0x1cc>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	f040 80c2 	bne.w	800107c <btn_adjust_mode+0x1b8>
		{
			button00_detect = 0;
 8000ef8:	4b63      	ldr	r3, [pc, #396]	; (8001088 <btn_adjust_mode+0x1c4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
			button22_detect = 0;
 8000efe:	4b64      	ldr	r3, [pc, #400]	; (8001090 <btn_adjust_mode+0x1cc>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
			button11_detect = 0;
 8000f04:	4b61      	ldr	r3, [pc, #388]	; (800108c <btn_adjust_mode+0x1c8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
			sprintf(strtempmin1, "%02d", min_temp1);
 8000f0a:	4b62      	ldr	r3, [pc, #392]	; (8001094 <btn_adjust_mode+0x1d0>)
 8000f0c:	f993 3000 	ldrsb.w	r3, [r3]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4961      	ldr	r1, [pc, #388]	; (8001098 <btn_adjust_mode+0x1d4>)
 8000f14:	4861      	ldr	r0, [pc, #388]	; (800109c <btn_adjust_mode+0x1d8>)
 8000f16:	f005 fee5 	bl	8006ce4 <siprintf>
			draw_string(120, 85, COLOR_GREEN, 1, strtempmin1);
 8000f1a:	4b60      	ldr	r3, [pc, #384]	; (800109c <btn_adjust_mode+0x1d8>)
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2301      	movs	r3, #1
 8000f20:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000f24:	2155      	movs	r1, #85	; 0x55
 8000f26:	2078      	movs	r0, #120	; 0x78
 8000f28:	f004 ff6e 	bl	8005e08 <draw_string>
			datetime.date = date_temp;
			RTC_WriteTime(&datetime);
		}
		mode = BINHTHUONG;			/* gán mode = 0 */
	}
}
 8000f2c:	e0a6      	b.n	800107c <btn_adjust_mode+0x1b8>
	else if (mode == CHINHPHUT)
 8000f2e:	4b55      	ldr	r3, [pc, #340]	; (8001084 <btn_adjust_mode+0x1c0>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d13e      	bne.n	8000fb4 <btn_adjust_mode+0xf0>
		datetime.min = min_temp1;
 8000f36:	4b57      	ldr	r3, [pc, #348]	; (8001094 <btn_adjust_mode+0x1d0>)
 8000f38:	f993 3000 	ldrsb.w	r3, [r3]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4b58      	ldr	r3, [pc, #352]	; (80010a0 <btn_adjust_mode+0x1dc>)
 8000f40:	705a      	strb	r2, [r3, #1]
		RTC_WriteTime(&datetime);
 8000f42:	4857      	ldr	r0, [pc, #348]	; (80010a0 <btn_adjust_mode+0x1dc>)
 8000f44:	f005 f8de 	bl	8006104 <RTC_WriteTime>
		mode = CHINHGIO;			/* gán mode = 2 */
 8000f48:	4b4e      	ldr	r3, [pc, #312]	; (8001084 <btn_adjust_mode+0x1c0>)
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	701a      	strb	r2, [r3, #0]
		fill_rectangle(120, 85, 140, 95, COLOR_WHITE);
 8000f4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	235f      	movs	r3, #95	; 0x5f
 8000f56:	228c      	movs	r2, #140	; 0x8c
 8000f58:	2155      	movs	r1, #85	; 0x55
 8000f5a:	2078      	movs	r0, #120	; 0x78
 8000f5c:	f004 fe12 	bl	8005b84 <fill_rectangle>
		if ((button00_detect == 1) || (button11_detect == 1) || (button22_detect == 1))
 8000f60:	4b49      	ldr	r3, [pc, #292]	; (8001088 <btn_adjust_mode+0x1c4>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d009      	beq.n	8000f7e <btn_adjust_mode+0xba>
 8000f6a:	4b48      	ldr	r3, [pc, #288]	; (800108c <btn_adjust_mode+0x1c8>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d004      	beq.n	8000f7e <btn_adjust_mode+0xba>
 8000f74:	4b46      	ldr	r3, [pc, #280]	; (8001090 <btn_adjust_mode+0x1cc>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d17e      	bne.n	800107c <btn_adjust_mode+0x1b8>
			button00_detect = 0;
 8000f7e:	4b42      	ldr	r3, [pc, #264]	; (8001088 <btn_adjust_mode+0x1c4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
			button22_detect = 0;
 8000f84:	4b42      	ldr	r3, [pc, #264]	; (8001090 <btn_adjust_mode+0x1cc>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
			button11_detect = 0;
 8000f8a:	4b40      	ldr	r3, [pc, #256]	; (800108c <btn_adjust_mode+0x1c8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
			sprintf(strtemphour1, "%02d", hour_temp1);
 8000f90:	4b44      	ldr	r3, [pc, #272]	; (80010a4 <btn_adjust_mode+0x1e0>)
 8000f92:	f993 3000 	ldrsb.w	r3, [r3]
 8000f96:	461a      	mov	r2, r3
 8000f98:	493f      	ldr	r1, [pc, #252]	; (8001098 <btn_adjust_mode+0x1d4>)
 8000f9a:	4843      	ldr	r0, [pc, #268]	; (80010a8 <btn_adjust_mode+0x1e4>)
 8000f9c:	f005 fea2 	bl	8006ce4 <siprintf>
			draw_string(95, 85, COLOR_GREEN, 1, strtemphour1);
 8000fa0:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <btn_adjust_mode+0x1e4>)
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000faa:	2155      	movs	r1, #85	; 0x55
 8000fac:	205f      	movs	r0, #95	; 0x5f
 8000fae:	f004 ff2b 	bl	8005e08 <draw_string>
}
 8000fb2:	e063      	b.n	800107c <btn_adjust_mode+0x1b8>
	else if (mode == CHINHGIO)		/* mode = 2 */
 8000fb4:	4b33      	ldr	r3, [pc, #204]	; (8001084 <btn_adjust_mode+0x1c0>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d13e      	bne.n	800103a <btn_adjust_mode+0x176>
		datetime.hour = hour_temp1;
 8000fbc:	4b39      	ldr	r3, [pc, #228]	; (80010a4 <btn_adjust_mode+0x1e0>)
 8000fbe:	f993 3000 	ldrsb.w	r3, [r3]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <btn_adjust_mode+0x1dc>)
 8000fc6:	709a      	strb	r2, [r3, #2]
		RTC_WriteTime(&datetime);
 8000fc8:	4835      	ldr	r0, [pc, #212]	; (80010a0 <btn_adjust_mode+0x1dc>)
 8000fca:	f005 f89b 	bl	8006104 <RTC_WriteTime>
		mode = CHINHNGAY; 			/* gán mode = 3 */
 8000fce:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <btn_adjust_mode+0x1c0>)
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	701a      	strb	r2, [r3, #0]
		fill_rectangle(95, 85, 115, 95, COLOR_WHITE);
 8000fd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	235f      	movs	r3, #95	; 0x5f
 8000fdc:	2273      	movs	r2, #115	; 0x73
 8000fde:	2155      	movs	r1, #85	; 0x55
 8000fe0:	205f      	movs	r0, #95	; 0x5f
 8000fe2:	f004 fdcf 	bl	8005b84 <fill_rectangle>
		if ((button00_detect == 1) || (button11_detect == 1) || (button22_detect == 1))
 8000fe6:	4b28      	ldr	r3, [pc, #160]	; (8001088 <btn_adjust_mode+0x1c4>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d009      	beq.n	8001004 <btn_adjust_mode+0x140>
 8000ff0:	4b26      	ldr	r3, [pc, #152]	; (800108c <btn_adjust_mode+0x1c8>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d004      	beq.n	8001004 <btn_adjust_mode+0x140>
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <btn_adjust_mode+0x1cc>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b01      	cmp	r3, #1
 8001002:	d13b      	bne.n	800107c <btn_adjust_mode+0x1b8>
			button00_detect = 0;
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <btn_adjust_mode+0x1c4>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
			button22_detect = 0;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <btn_adjust_mode+0x1cc>)
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
			button11_detect = 0;
 8001010:	4b1e      	ldr	r3, [pc, #120]	; (800108c <btn_adjust_mode+0x1c8>)
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
			sprintf(strtempdate1, "%02d", date_temp1);
 8001016:	4b25      	ldr	r3, [pc, #148]	; (80010ac <btn_adjust_mode+0x1e8>)
 8001018:	f993 3000 	ldrsb.w	r3, [r3]
 800101c:	461a      	mov	r2, r3
 800101e:	491e      	ldr	r1, [pc, #120]	; (8001098 <btn_adjust_mode+0x1d4>)
 8001020:	4823      	ldr	r0, [pc, #140]	; (80010b0 <btn_adjust_mode+0x1ec>)
 8001022:	f005 fe5f 	bl	8006ce4 <siprintf>
			draw_string(95, 145, COLOR_GREEN, 1, strtempdate1);
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <btn_adjust_mode+0x1ec>)
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001030:	2191      	movs	r1, #145	; 0x91
 8001032:	205f      	movs	r0, #95	; 0x5f
 8001034:	f004 fee8 	bl	8005e08 <draw_string>
}
 8001038:	e020      	b.n	800107c <btn_adjust_mode+0x1b8>
	else if (mode == CHINHNGAY)		/* mode = 3 */
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <btn_adjust_mode+0x1c0>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b03      	cmp	r3, #3
 8001040:	d11c      	bne.n	800107c <btn_adjust_mode+0x1b8>
		fill_rectangle(95, 145, 115, 155, COLOR_WHITE);
 8001042:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	239b      	movs	r3, #155	; 0x9b
 800104a:	2273      	movs	r2, #115	; 0x73
 800104c:	2191      	movs	r1, #145	; 0x91
 800104e:	205f      	movs	r0, #95	; 0x5f
 8001050:	f004 fd98 	bl	8005b84 <fill_rectangle>
		if (datetime.date != date_temp1)
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <btn_adjust_mode+0x1dc>)
 8001056:	791b      	ldrb	r3, [r3, #4]
 8001058:	461a      	mov	r2, r3
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <btn_adjust_mode+0x1e8>)
 800105c:	f993 3000 	ldrsb.w	r3, [r3]
 8001060:	429a      	cmp	r2, r3
 8001062:	d008      	beq.n	8001076 <btn_adjust_mode+0x1b2>
			datetime.date = date_temp;
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <btn_adjust_mode+0x1f0>)
 8001066:	f993 3000 	ldrsb.w	r3, [r3]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <btn_adjust_mode+0x1dc>)
 800106e:	711a      	strb	r2, [r3, #4]
			RTC_WriteTime(&datetime);
 8001070:	480b      	ldr	r0, [pc, #44]	; (80010a0 <btn_adjust_mode+0x1dc>)
 8001072:	f005 f847 	bl	8006104 <RTC_WriteTime>
		mode = BINHTHUONG;			/* gán mode = 0 */
 8001076:	4b03      	ldr	r3, [pc, #12]	; (8001084 <btn_adjust_mode+0x1c0>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000040e 	.word	0x2000040e
 8001088:	20000410 	.word	0x20000410
 800108c:	20000419 	.word	0x20000419
 8001090:	20000420 	.word	0x20000420
 8001094:	20000344 	.word	0x20000344
 8001098:	08009098 	.word	0x08009098
 800109c:	2000038c 	.word	0x2000038c
 80010a0:	20000334 	.word	0x20000334
 80010a4:	20000345 	.word	0x20000345
 80010a8:	200003a0 	.word	0x200003a0
 80010ac:	20000346 	.word	0x20000346
 80010b0:	200003b4 	.word	0x200003b4
 80010b4:	20000343 	.word	0x20000343

080010b8 <btn_adjust_up>:
/* Handle Button-up event */
void btn_adjust_up (void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af02      	add	r7, sp, #8
	if (mode == CHINHPHUT)
 80010be:	4b7e      	ldr	r3, [pc, #504]	; (80012b8 <btn_adjust_up+0x200>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d138      	bne.n	8001138 <btn_adjust_up+0x80>
	{
		++min_temp;
 80010c6:	4b7d      	ldr	r3, [pc, #500]	; (80012bc <btn_adjust_up+0x204>)
 80010c8:	f993 3000 	ldrsb.w	r3, [r3]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	3301      	adds	r3, #1
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	b25a      	sxtb	r2, r3
 80010d4:	4b79      	ldr	r3, [pc, #484]	; (80012bc <btn_adjust_up+0x204>)
 80010d6:	701a      	strb	r2, [r3, #0]
		if (min_temp == 60)
 80010d8:	4b78      	ldr	r3, [pc, #480]	; (80012bc <btn_adjust_up+0x204>)
 80010da:	f993 3000 	ldrsb.w	r3, [r3]
 80010de:	2b3c      	cmp	r3, #60	; 0x3c
 80010e0:	d102      	bne.n	80010e8 <btn_adjust_up+0x30>
		{
			min_temp = 0;
 80010e2:	4b76      	ldr	r3, [pc, #472]	; (80012bc <btn_adjust_up+0x204>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
		}
		if (min_temp1 != min_temp)
 80010e8:	4b75      	ldr	r3, [pc, #468]	; (80012c0 <btn_adjust_up+0x208>)
 80010ea:	f993 2000 	ldrsb.w	r2, [r3]
 80010ee:	4b73      	ldr	r3, [pc, #460]	; (80012bc <btn_adjust_up+0x204>)
 80010f0:	f993 3000 	ldrsb.w	r3, [r3]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d00d      	beq.n	8001114 <btn_adjust_up+0x5c>
		{
			min_temp1 = min_temp;
 80010f8:	4b70      	ldr	r3, [pc, #448]	; (80012bc <btn_adjust_up+0x204>)
 80010fa:	f993 2000 	ldrsb.w	r2, [r3]
 80010fe:	4b70      	ldr	r3, [pc, #448]	; (80012c0 <btn_adjust_up+0x208>)
 8001100:	701a      	strb	r2, [r3, #0]
			fill_rectangle(120, 85, 140, 95, COLOR_WHITE);
 8001102:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	235f      	movs	r3, #95	; 0x5f
 800110a:	228c      	movs	r2, #140	; 0x8c
 800110c:	2155      	movs	r1, #85	; 0x55
 800110e:	2078      	movs	r0, #120	; 0x78
 8001110:	f004 fd38 	bl	8005b84 <fill_rectangle>
		}
		sprintf(strtempmin1, "%02d", min_temp1);
 8001114:	4b6a      	ldr	r3, [pc, #424]	; (80012c0 <btn_adjust_up+0x208>)
 8001116:	f993 3000 	ldrsb.w	r3, [r3]
 800111a:	461a      	mov	r2, r3
 800111c:	4969      	ldr	r1, [pc, #420]	; (80012c4 <btn_adjust_up+0x20c>)
 800111e:	486a      	ldr	r0, [pc, #424]	; (80012c8 <btn_adjust_up+0x210>)
 8001120:	f005 fde0 	bl	8006ce4 <siprintf>
		draw_string(120, 85, COLOR_GREEN, 1, strtempmin1);
 8001124:	4b68      	ldr	r3, [pc, #416]	; (80012c8 <btn_adjust_up+0x210>)
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2301      	movs	r3, #1
 800112a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800112e:	2155      	movs	r1, #85	; 0x55
 8001130:	2078      	movs	r0, #120	; 0x78
 8001132:	f004 fe69 	bl	8005e08 <draw_string>
			fill_rectangle(95, 145, 115, 155, COLOR_WHITE);
		}
		sprintf(strtempdate1, "%02d", date_temp1);
		draw_string(95, 145, COLOR_GREEN, 1, strtempdate1);
	}
}
 8001136:	e0bc      	b.n	80012b2 <btn_adjust_up+0x1fa>
	else if (mode == CHINHGIO)
 8001138:	4b5f      	ldr	r3, [pc, #380]	; (80012b8 <btn_adjust_up+0x200>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d138      	bne.n	80011b2 <btn_adjust_up+0xfa>
		++hour_temp;
 8001140:	4b62      	ldr	r3, [pc, #392]	; (80012cc <btn_adjust_up+0x214>)
 8001142:	f993 3000 	ldrsb.w	r3, [r3]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	3301      	adds	r3, #1
 800114a:	b2db      	uxtb	r3, r3
 800114c:	b25a      	sxtb	r2, r3
 800114e:	4b5f      	ldr	r3, [pc, #380]	; (80012cc <btn_adjust_up+0x214>)
 8001150:	701a      	strb	r2, [r3, #0]
		if (hour_temp >= 24)
 8001152:	4b5e      	ldr	r3, [pc, #376]	; (80012cc <btn_adjust_up+0x214>)
 8001154:	f993 3000 	ldrsb.w	r3, [r3]
 8001158:	2b17      	cmp	r3, #23
 800115a:	dd02      	ble.n	8001162 <btn_adjust_up+0xaa>
			hour_temp = 0;
 800115c:	4b5b      	ldr	r3, [pc, #364]	; (80012cc <btn_adjust_up+0x214>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
		if (hour_temp1 != hour_temp)
 8001162:	4b5b      	ldr	r3, [pc, #364]	; (80012d0 <btn_adjust_up+0x218>)
 8001164:	f993 2000 	ldrsb.w	r2, [r3]
 8001168:	4b58      	ldr	r3, [pc, #352]	; (80012cc <btn_adjust_up+0x214>)
 800116a:	f993 3000 	ldrsb.w	r3, [r3]
 800116e:	429a      	cmp	r2, r3
 8001170:	d00d      	beq.n	800118e <btn_adjust_up+0xd6>
			hour_temp1 = hour_temp;
 8001172:	4b56      	ldr	r3, [pc, #344]	; (80012cc <btn_adjust_up+0x214>)
 8001174:	f993 2000 	ldrsb.w	r2, [r3]
 8001178:	4b55      	ldr	r3, [pc, #340]	; (80012d0 <btn_adjust_up+0x218>)
 800117a:	701a      	strb	r2, [r3, #0]
			fill_rectangle(95, 85, 115, 95, COLOR_WHITE);
 800117c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	235f      	movs	r3, #95	; 0x5f
 8001184:	2273      	movs	r2, #115	; 0x73
 8001186:	2155      	movs	r1, #85	; 0x55
 8001188:	205f      	movs	r0, #95	; 0x5f
 800118a:	f004 fcfb 	bl	8005b84 <fill_rectangle>
		sprintf(strtemphour1, "%02d", hour_temp1);
 800118e:	4b50      	ldr	r3, [pc, #320]	; (80012d0 <btn_adjust_up+0x218>)
 8001190:	f993 3000 	ldrsb.w	r3, [r3]
 8001194:	461a      	mov	r2, r3
 8001196:	494b      	ldr	r1, [pc, #300]	; (80012c4 <btn_adjust_up+0x20c>)
 8001198:	484e      	ldr	r0, [pc, #312]	; (80012d4 <btn_adjust_up+0x21c>)
 800119a:	f005 fda3 	bl	8006ce4 <siprintf>
		draw_string(95, 85, COLOR_GREEN, 1, strtemphour1);
 800119e:	4b4d      	ldr	r3, [pc, #308]	; (80012d4 <btn_adjust_up+0x21c>)
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2301      	movs	r3, #1
 80011a4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80011a8:	2155      	movs	r1, #85	; 0x55
 80011aa:	205f      	movs	r0, #95	; 0x5f
 80011ac:	f004 fe2c 	bl	8005e08 <draw_string>
}
 80011b0:	e07f      	b.n	80012b2 <btn_adjust_up+0x1fa>
	else if (mode == CHINHNGAY)
 80011b2:	4b41      	ldr	r3, [pc, #260]	; (80012b8 <btn_adjust_up+0x200>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d17b      	bne.n	80012b2 <btn_adjust_up+0x1fa>
		++date_temp;
 80011ba:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <btn_adjust_up+0x220>)
 80011bc:	f993 3000 	ldrsb.w	r3, [r3]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	3301      	adds	r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	b25a      	sxtb	r2, r3
 80011c8:	4b43      	ldr	r3, [pc, #268]	; (80012d8 <btn_adjust_up+0x220>)
 80011ca:	701a      	strb	r2, [r3, #0]
		switch (datetime.month)   			/* xét xem tháng hiện tại có tổng bao nhiêu ngày */
 80011cc:	4b43      	ldr	r3, [pc, #268]	; (80012dc <btn_adjust_up+0x224>)
 80011ce:	795b      	ldrb	r3, [r3, #5]
 80011d0:	2b0c      	cmp	r3, #12
 80011d2:	bf8c      	ite	hi
 80011d4:	2201      	movhi	r2, #1
 80011d6:	2200      	movls	r2, #0
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	2a00      	cmp	r2, #0
 80011dc:	d136      	bne.n	800124c <btn_adjust_up+0x194>
 80011de:	2201      	movs	r2, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	f241 52aa 	movw	r2, #5546	; 0x15aa
 80011e8:	401a      	ands	r2, r3
 80011ea:	2a00      	cmp	r2, #0
 80011ec:	bf14      	ite	ne
 80011ee:	2201      	movne	r2, #1
 80011f0:	2200      	moveq	r2, #0
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	2a00      	cmp	r2, #0
 80011f6:	d112      	bne.n	800121e <btn_adjust_up+0x166>
 80011f8:	f403 6225 	and.w	r2, r3, #2640	; 0xa50
 80011fc:	2a00      	cmp	r2, #0
 80011fe:	bf14      	ite	ne
 8001200:	2201      	movne	r2, #1
 8001202:	2200      	moveq	r2, #0
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	2a00      	cmp	r2, #0
 8001208:	d10d      	bne.n	8001226 <btn_adjust_up+0x16e>
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	2b00      	cmp	r3, #0
 8001210:	bf14      	ite	ne
 8001212:	2301      	movne	r3, #1
 8001214:	2300      	moveq	r3, #0
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	d107      	bne.n	800122c <btn_adjust_up+0x174>
				break;
 800121c:	e016      	b.n	800124c <btn_adjust_up+0x194>
				date_max = 31 + 1;
 800121e:	4b30      	ldr	r3, [pc, #192]	; (80012e0 <btn_adjust_up+0x228>)
 8001220:	2220      	movs	r2, #32
 8001222:	701a      	strb	r2, [r3, #0]
				break;
 8001224:	e013      	b.n	800124e <btn_adjust_up+0x196>
				date_max = 30 + 1;
 8001226:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <btn_adjust_up+0x228>)
 8001228:	221f      	movs	r2, #31
 800122a:	701a      	strb	r2, [r3, #0]
				if ((datetime.year - 2014) % 4 == 0)
 800122c:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <btn_adjust_up+0x224>)
 800122e:	799b      	ldrb	r3, [r3, #6]
 8001230:	f2a3 73de 	subw	r3, r3, #2014	; 0x7de
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d103      	bne.n	8001244 <btn_adjust_up+0x18c>
					date_max = 29 + 1;
 800123c:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <btn_adjust_up+0x228>)
 800123e:	221e      	movs	r2, #30
 8001240:	701a      	strb	r2, [r3, #0]
				break;
 8001242:	e004      	b.n	800124e <btn_adjust_up+0x196>
					date_max = 28 + 1;
 8001244:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <btn_adjust_up+0x228>)
 8001246:	221d      	movs	r2, #29
 8001248:	701a      	strb	r2, [r3, #0]
				break;
 800124a:	e000      	b.n	800124e <btn_adjust_up+0x196>
				break;
 800124c:	bf00      	nop
		if (date_temp >= date_max)
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <btn_adjust_up+0x220>)
 8001250:	f993 3000 	ldrsb.w	r3, [r3]
 8001254:	461a      	mov	r2, r3
 8001256:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <btn_adjust_up+0x228>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	db02      	blt.n	8001264 <btn_adjust_up+0x1ac>
			date_temp = 1;
 800125e:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <btn_adjust_up+0x220>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
		if (date_temp1 != date_temp)
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <btn_adjust_up+0x22c>)
 8001266:	f993 2000 	ldrsb.w	r2, [r3]
 800126a:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <btn_adjust_up+0x220>)
 800126c:	f993 3000 	ldrsb.w	r3, [r3]
 8001270:	429a      	cmp	r2, r3
 8001272:	d00d      	beq.n	8001290 <btn_adjust_up+0x1d8>
			date_temp1 = date_temp;
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <btn_adjust_up+0x220>)
 8001276:	f993 2000 	ldrsb.w	r2, [r3]
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <btn_adjust_up+0x22c>)
 800127c:	701a      	strb	r2, [r3, #0]
			fill_rectangle(95, 145, 115, 155, COLOR_WHITE);
 800127e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	239b      	movs	r3, #155	; 0x9b
 8001286:	2273      	movs	r2, #115	; 0x73
 8001288:	2191      	movs	r1, #145	; 0x91
 800128a:	205f      	movs	r0, #95	; 0x5f
 800128c:	f004 fc7a 	bl	8005b84 <fill_rectangle>
		sprintf(strtempdate1, "%02d", date_temp1);
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <btn_adjust_up+0x22c>)
 8001292:	f993 3000 	ldrsb.w	r3, [r3]
 8001296:	461a      	mov	r2, r3
 8001298:	490a      	ldr	r1, [pc, #40]	; (80012c4 <btn_adjust_up+0x20c>)
 800129a:	4813      	ldr	r0, [pc, #76]	; (80012e8 <btn_adjust_up+0x230>)
 800129c:	f005 fd22 	bl	8006ce4 <siprintf>
		draw_string(95, 145, COLOR_GREEN, 1, strtempdate1);
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <btn_adjust_up+0x230>)
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2301      	movs	r3, #1
 80012a6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80012aa:	2191      	movs	r1, #145	; 0x91
 80012ac:	205f      	movs	r0, #95	; 0x5f
 80012ae:	f004 fdab 	bl	8005e08 <draw_string>
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2000040e 	.word	0x2000040e
 80012bc:	20000341 	.word	0x20000341
 80012c0:	20000344 	.word	0x20000344
 80012c4:	08009098 	.word	0x08009098
 80012c8:	2000038c 	.word	0x2000038c
 80012cc:	20000342 	.word	0x20000342
 80012d0:	20000345 	.word	0x20000345
 80012d4:	200003a0 	.word	0x200003a0
 80012d8:	20000343 	.word	0x20000343
 80012dc:	20000334 	.word	0x20000334
 80012e0:	2000034d 	.word	0x2000034d
 80012e4:	20000346 	.word	0x20000346
 80012e8:	200003b4 	.word	0x200003b4

080012ec <btn_adjust_down>:
/* Handle Button-down event */
void btn_adjust_down(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af02      	add	r7, sp, #8
	if (mode == CHINHPHUT)
 80012f2:	4b7f      	ldr	r3, [pc, #508]	; (80014f0 <btn_adjust_down+0x204>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d138      	bne.n	800136c <btn_adjust_down+0x80>
	{
		--min_temp;
 80012fa:	4b7e      	ldr	r3, [pc, #504]	; (80014f4 <btn_adjust_down+0x208>)
 80012fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	3b01      	subs	r3, #1
 8001304:	b2db      	uxtb	r3, r3
 8001306:	b25a      	sxtb	r2, r3
 8001308:	4b7a      	ldr	r3, [pc, #488]	; (80014f4 <btn_adjust_down+0x208>)
 800130a:	701a      	strb	r2, [r3, #0]
		if (min_temp <= -1)
 800130c:	4b79      	ldr	r3, [pc, #484]	; (80014f4 <btn_adjust_down+0x208>)
 800130e:	f993 3000 	ldrsb.w	r3, [r3]
 8001312:	2b00      	cmp	r3, #0
 8001314:	da02      	bge.n	800131c <btn_adjust_down+0x30>
		{
			min_temp = 59;
 8001316:	4b77      	ldr	r3, [pc, #476]	; (80014f4 <btn_adjust_down+0x208>)
 8001318:	223b      	movs	r2, #59	; 0x3b
 800131a:	701a      	strb	r2, [r3, #0]
		}
		if (min_temp1 != min_temp)
 800131c:	4b76      	ldr	r3, [pc, #472]	; (80014f8 <btn_adjust_down+0x20c>)
 800131e:	f993 2000 	ldrsb.w	r2, [r3]
 8001322:	4b74      	ldr	r3, [pc, #464]	; (80014f4 <btn_adjust_down+0x208>)
 8001324:	f993 3000 	ldrsb.w	r3, [r3]
 8001328:	429a      	cmp	r2, r3
 800132a:	d00d      	beq.n	8001348 <btn_adjust_down+0x5c>
		{
			min_temp1 = min_temp;
 800132c:	4b71      	ldr	r3, [pc, #452]	; (80014f4 <btn_adjust_down+0x208>)
 800132e:	f993 2000 	ldrsb.w	r2, [r3]
 8001332:	4b71      	ldr	r3, [pc, #452]	; (80014f8 <btn_adjust_down+0x20c>)
 8001334:	701a      	strb	r2, [r3, #0]
			fill_rectangle(120, 85, 140, 95, COLOR_WHITE);
 8001336:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	235f      	movs	r3, #95	; 0x5f
 800133e:	228c      	movs	r2, #140	; 0x8c
 8001340:	2155      	movs	r1, #85	; 0x55
 8001342:	2078      	movs	r0, #120	; 0x78
 8001344:	f004 fc1e 	bl	8005b84 <fill_rectangle>
		}
		sprintf(strtempmin1, "%02d", min_temp1);
 8001348:	4b6b      	ldr	r3, [pc, #428]	; (80014f8 <btn_adjust_down+0x20c>)
 800134a:	f993 3000 	ldrsb.w	r3, [r3]
 800134e:	461a      	mov	r2, r3
 8001350:	496a      	ldr	r1, [pc, #424]	; (80014fc <btn_adjust_down+0x210>)
 8001352:	486b      	ldr	r0, [pc, #428]	; (8001500 <btn_adjust_down+0x214>)
 8001354:	f005 fcc6 	bl	8006ce4 <siprintf>
		draw_string(120, 85, COLOR_GREEN, 1, strtempmin1);
 8001358:	4b69      	ldr	r3, [pc, #420]	; (8001500 <btn_adjust_down+0x214>)
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001362:	2155      	movs	r1, #85	; 0x55
 8001364:	2078      	movs	r0, #120	; 0x78
 8001366:	f004 fd4f 	bl	8005e08 <draw_string>
			fill_rectangle(95, 145, 115, 155, COLOR_WHITE);
		}
		sprintf(strtempdate1, "%02d", date_temp1);
		draw_string(95, 145, COLOR_GREEN, 1, strtempdate1);
	}
}
 800136a:	e0bd      	b.n	80014e8 <btn_adjust_down+0x1fc>
	else if (mode == CHINHGIO)
 800136c:	4b60      	ldr	r3, [pc, #384]	; (80014f0 <btn_adjust_down+0x204>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d138      	bne.n	80013e6 <btn_adjust_down+0xfa>
		--hour_temp;
 8001374:	4b63      	ldr	r3, [pc, #396]	; (8001504 <btn_adjust_down+0x218>)
 8001376:	f993 3000 	ldrsb.w	r3, [r3]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	3b01      	subs	r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	b25a      	sxtb	r2, r3
 8001382:	4b60      	ldr	r3, [pc, #384]	; (8001504 <btn_adjust_down+0x218>)
 8001384:	701a      	strb	r2, [r3, #0]
		if (hour_temp <= -1)
 8001386:	4b5f      	ldr	r3, [pc, #380]	; (8001504 <btn_adjust_down+0x218>)
 8001388:	f993 3000 	ldrsb.w	r3, [r3]
 800138c:	2b00      	cmp	r3, #0
 800138e:	da02      	bge.n	8001396 <btn_adjust_down+0xaa>
			hour_temp = 23;
 8001390:	4b5c      	ldr	r3, [pc, #368]	; (8001504 <btn_adjust_down+0x218>)
 8001392:	2217      	movs	r2, #23
 8001394:	701a      	strb	r2, [r3, #0]
		if (hour_temp1 != hour_temp)
 8001396:	4b5c      	ldr	r3, [pc, #368]	; (8001508 <btn_adjust_down+0x21c>)
 8001398:	f993 2000 	ldrsb.w	r2, [r3]
 800139c:	4b59      	ldr	r3, [pc, #356]	; (8001504 <btn_adjust_down+0x218>)
 800139e:	f993 3000 	ldrsb.w	r3, [r3]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d00d      	beq.n	80013c2 <btn_adjust_down+0xd6>
			hour_temp1 = hour_temp;
 80013a6:	4b57      	ldr	r3, [pc, #348]	; (8001504 <btn_adjust_down+0x218>)
 80013a8:	f993 2000 	ldrsb.w	r2, [r3]
 80013ac:	4b56      	ldr	r3, [pc, #344]	; (8001508 <btn_adjust_down+0x21c>)
 80013ae:	701a      	strb	r2, [r3, #0]
			fill_rectangle(95, 85, 115, 95, COLOR_WHITE);
 80013b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	235f      	movs	r3, #95	; 0x5f
 80013b8:	2273      	movs	r2, #115	; 0x73
 80013ba:	2155      	movs	r1, #85	; 0x55
 80013bc:	205f      	movs	r0, #95	; 0x5f
 80013be:	f004 fbe1 	bl	8005b84 <fill_rectangle>
		sprintf(strtemphour1, "%02d", hour_temp1);
 80013c2:	4b51      	ldr	r3, [pc, #324]	; (8001508 <btn_adjust_down+0x21c>)
 80013c4:	f993 3000 	ldrsb.w	r3, [r3]
 80013c8:	461a      	mov	r2, r3
 80013ca:	494c      	ldr	r1, [pc, #304]	; (80014fc <btn_adjust_down+0x210>)
 80013cc:	484f      	ldr	r0, [pc, #316]	; (800150c <btn_adjust_down+0x220>)
 80013ce:	f005 fc89 	bl	8006ce4 <siprintf>
		draw_string(95, 85, COLOR_GREEN, 1, strtemphour1);
 80013d2:	4b4e      	ldr	r3, [pc, #312]	; (800150c <btn_adjust_down+0x220>)
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2301      	movs	r3, #1
 80013d8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80013dc:	2155      	movs	r1, #85	; 0x55
 80013de:	205f      	movs	r0, #95	; 0x5f
 80013e0:	f004 fd12 	bl	8005e08 <draw_string>
}
 80013e4:	e080      	b.n	80014e8 <btn_adjust_down+0x1fc>
	else if (mode == CHINHNGAY)
 80013e6:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <btn_adjust_down+0x204>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d17c      	bne.n	80014e8 <btn_adjust_down+0x1fc>
		--date_temp;
 80013ee:	4b48      	ldr	r3, [pc, #288]	; (8001510 <btn_adjust_down+0x224>)
 80013f0:	f993 3000 	ldrsb.w	r3, [r3]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	3b01      	subs	r3, #1
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	b25a      	sxtb	r2, r3
 80013fc:	4b44      	ldr	r3, [pc, #272]	; (8001510 <btn_adjust_down+0x224>)
 80013fe:	701a      	strb	r2, [r3, #0]
		switch (datetime.month)						/* xét xem tháng hiện tại có tổng bao nhiêu ngày */
 8001400:	4b44      	ldr	r3, [pc, #272]	; (8001514 <btn_adjust_down+0x228>)
 8001402:	795b      	ldrb	r3, [r3, #5]
 8001404:	2b0c      	cmp	r3, #12
 8001406:	bf8c      	ite	hi
 8001408:	2201      	movhi	r2, #1
 800140a:	2200      	movls	r2, #0
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	2a00      	cmp	r2, #0
 8001410:	d136      	bne.n	8001480 <btn_adjust_down+0x194>
 8001412:	2201      	movs	r2, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	f241 52aa 	movw	r2, #5546	; 0x15aa
 800141c:	401a      	ands	r2, r3
 800141e:	2a00      	cmp	r2, #0
 8001420:	bf14      	ite	ne
 8001422:	2201      	movne	r2, #1
 8001424:	2200      	moveq	r2, #0
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	2a00      	cmp	r2, #0
 800142a:	d112      	bne.n	8001452 <btn_adjust_down+0x166>
 800142c:	f403 6225 	and.w	r2, r3, #2640	; 0xa50
 8001430:	2a00      	cmp	r2, #0
 8001432:	bf14      	ite	ne
 8001434:	2201      	movne	r2, #1
 8001436:	2200      	moveq	r2, #0
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	2a00      	cmp	r2, #0
 800143c:	d10d      	bne.n	800145a <btn_adjust_down+0x16e>
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	2b00      	cmp	r3, #0
 8001444:	bf14      	ite	ne
 8001446:	2301      	movne	r3, #1
 8001448:	2300      	moveq	r3, #0
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d107      	bne.n	8001460 <btn_adjust_down+0x174>
				break;
 8001450:	e016      	b.n	8001480 <btn_adjust_down+0x194>
				date_max = 31 + 1;
 8001452:	4b31      	ldr	r3, [pc, #196]	; (8001518 <btn_adjust_down+0x22c>)
 8001454:	2220      	movs	r2, #32
 8001456:	701a      	strb	r2, [r3, #0]
				break;
 8001458:	e013      	b.n	8001482 <btn_adjust_down+0x196>
				date_max = 30 + 1;
 800145a:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <btn_adjust_down+0x22c>)
 800145c:	221f      	movs	r2, #31
 800145e:	701a      	strb	r2, [r3, #0]
				if ((datetime.year - 2014) % 4 == 0)	/* Nếu năm hiện tại là năm nhuận thì số tổng số ngày của tháng 2 ở năm hiện tại là 29, còn không thì là 28*/
 8001460:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <btn_adjust_down+0x228>)
 8001462:	799b      	ldrb	r3, [r3, #6]
 8001464:	f2a3 73de 	subw	r3, r3, #2014	; 0x7de
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d103      	bne.n	8001478 <btn_adjust_down+0x18c>
					date_max = 29 + 1;
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <btn_adjust_down+0x22c>)
 8001472:	221e      	movs	r2, #30
 8001474:	701a      	strb	r2, [r3, #0]
				break;
 8001476:	e004      	b.n	8001482 <btn_adjust_down+0x196>
					date_max = 28 + 1;
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <btn_adjust_down+0x22c>)
 800147a:	221d      	movs	r2, #29
 800147c:	701a      	strb	r2, [r3, #0]
				break;
 800147e:	e000      	b.n	8001482 <btn_adjust_down+0x196>
				break;
 8001480:	bf00      	nop
		if (date_temp == 0)
 8001482:	4b23      	ldr	r3, [pc, #140]	; (8001510 <btn_adjust_down+0x224>)
 8001484:	f993 3000 	ldrsb.w	r3, [r3]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d106      	bne.n	800149a <btn_adjust_down+0x1ae>
			date_temp = date_max - 1;
 800148c:	4b22      	ldr	r3, [pc, #136]	; (8001518 <btn_adjust_down+0x22c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	3b01      	subs	r3, #1
 8001492:	b2db      	uxtb	r3, r3
 8001494:	b25a      	sxtb	r2, r3
 8001496:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <btn_adjust_down+0x224>)
 8001498:	701a      	strb	r2, [r3, #0]
		if (date_temp1 != date_temp)
 800149a:	4b20      	ldr	r3, [pc, #128]	; (800151c <btn_adjust_down+0x230>)
 800149c:	f993 2000 	ldrsb.w	r2, [r3]
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <btn_adjust_down+0x224>)
 80014a2:	f993 3000 	ldrsb.w	r3, [r3]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d00d      	beq.n	80014c6 <btn_adjust_down+0x1da>
			date_temp1 = date_temp;
 80014aa:	4b19      	ldr	r3, [pc, #100]	; (8001510 <btn_adjust_down+0x224>)
 80014ac:	f993 2000 	ldrsb.w	r2, [r3]
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <btn_adjust_down+0x230>)
 80014b2:	701a      	strb	r2, [r3, #0]
			fill_rectangle(95, 145, 115, 155, COLOR_WHITE);
 80014b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	239b      	movs	r3, #155	; 0x9b
 80014bc:	2273      	movs	r2, #115	; 0x73
 80014be:	2191      	movs	r1, #145	; 0x91
 80014c0:	205f      	movs	r0, #95	; 0x5f
 80014c2:	f004 fb5f 	bl	8005b84 <fill_rectangle>
		sprintf(strtempdate1, "%02d", date_temp1);
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <btn_adjust_down+0x230>)
 80014c8:	f993 3000 	ldrsb.w	r3, [r3]
 80014cc:	461a      	mov	r2, r3
 80014ce:	490b      	ldr	r1, [pc, #44]	; (80014fc <btn_adjust_down+0x210>)
 80014d0:	4813      	ldr	r0, [pc, #76]	; (8001520 <btn_adjust_down+0x234>)
 80014d2:	f005 fc07 	bl	8006ce4 <siprintf>
		draw_string(95, 145, COLOR_GREEN, 1, strtempdate1);
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <btn_adjust_down+0x234>)
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2301      	movs	r3, #1
 80014dc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80014e0:	2191      	movs	r1, #145	; 0x91
 80014e2:	205f      	movs	r0, #95	; 0x5f
 80014e4:	f004 fc90 	bl	8005e08 <draw_string>
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2000040e 	.word	0x2000040e
 80014f4:	20000341 	.word	0x20000341
 80014f8:	20000344 	.word	0x20000344
 80014fc:	08009098 	.word	0x08009098
 8001500:	2000038c 	.word	0x2000038c
 8001504:	20000342 	.word	0x20000342
 8001508:	20000345 	.word	0x20000345
 800150c:	200003a0 	.word	0x200003a0
 8001510:	20000343 	.word	0x20000343
 8001514:	20000334 	.word	0x20000334
 8001518:	2000034d 	.word	0x2000034d
 800151c:	20000346 	.word	0x20000346
 8001520:	200003b4 	.word	0x200003b4

08001524 <HAL_UART_RxCpltCallback>:
/* Handle received data via UART protocol */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <HAL_UART_RxCpltCallback+0x5c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d11f      	bne.n	8001578 <HAL_UART_RxCpltCallback+0x54>
	{
		if (Rx_Buf != '\n')
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_UART_RxCpltCallback+0x60>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b0a      	cmp	r3, #10
 800153e:	d00d      	beq.n	800155c <HAL_UART_RxCpltCallback+0x38>
		{
			uart_buffer[uart_pointer] = Rx_Buf;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <HAL_UART_RxCpltCallback+0x64>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_UART_RxCpltCallback+0x60>)
 8001548:	7819      	ldrb	r1, [r3, #0]
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <HAL_UART_RxCpltCallback+0x68>)
 800154c:	5499      	strb	r1, [r3, r2]
			uart_pointer++;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_UART_RxCpltCallback+0x64>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	3301      	adds	r3, #1
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_UART_RxCpltCallback+0x64>)
 8001558:	701a      	strb	r2, [r3, #0]
 800155a:	e008      	b.n	800156e <HAL_UART_RxCpltCallback+0x4a>
		}
		else
		{
			uart_buffer[uart_pointer] = '\0';
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_UART_RxCpltCallback+0x64>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_UART_RxCpltCallback+0x68>)
 8001564:	2100      	movs	r1, #0
 8001566:	5499      	strb	r1, [r3, r2]
			uart_flag = 1; 						/* biểu thị rằng 1 dòng data hoàn chỉnh đã được nhận từ ngoại vi qua giao tiếp UART */
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_UART_RxCpltCallback+0x6c>)
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
		}
	HAL_UART_Receive_IT(&huart1, &Rx_Buf, 1);
 800156e:	2201      	movs	r2, #1
 8001570:	4904      	ldr	r1, [pc, #16]	; (8001584 <HAL_UART_RxCpltCallback+0x60>)
 8001572:	4803      	ldr	r0, [pc, #12]	; (8001580 <HAL_UART_RxCpltCallback+0x5c>)
 8001574:	f003 fae9 	bl	8004b4a <HAL_UART_Receive_IT>
	}
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	2000029c 	.word	0x2000029c
 8001584:	200003f3 	.word	0x200003f3
 8001588:	200003fb 	.word	0x200003fb
 800158c:	200003f4 	.word	0x200003f4
 8001590:	200003fc 	.word	0x200003fc

08001594 <UART_Handle>:

void UART_Handle()
{
 8001594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001598:	b098      	sub	sp, #96	; 0x60
 800159a:	af08      	add	r7, sp, #32
/* Send temperature and humidity to another bluetooth-connected device */
	if (live_flag == 1 && living == 1)
 800159c:	4b63      	ldr	r3, [pc, #396]	; (800172c <UART_Handle+0x198>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d132      	bne.n	800160a <UART_Handle+0x76>
 80015a4:	4b62      	ldr	r3, [pc, #392]	; (8001730 <UART_Handle+0x19c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d12e      	bne.n	800160a <UART_Handle+0x76>
	{
		snprintf(data_string3, 11, "*%02g%02g%02g%02g#", Temp1, Temp2, Hum1, Hum2);
 80015ac:	4b61      	ldr	r3, [pc, #388]	; (8001734 <UART_Handle+0x1a0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ff39 	bl	8000428 <__aeabi_f2d>
 80015b6:	4604      	mov	r4, r0
 80015b8:	460d      	mov	r5, r1
 80015ba:	4b5f      	ldr	r3, [pc, #380]	; (8001738 <UART_Handle+0x1a4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe ff32 	bl	8000428 <__aeabi_f2d>
 80015c4:	4680      	mov	r8, r0
 80015c6:	4689      	mov	r9, r1
 80015c8:	4b5c      	ldr	r3, [pc, #368]	; (800173c <UART_Handle+0x1a8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ff2b 	bl	8000428 <__aeabi_f2d>
 80015d2:	4682      	mov	sl, r0
 80015d4:	468b      	mov	fp, r1
 80015d6:	4b5a      	ldr	r3, [pc, #360]	; (8001740 <UART_Handle+0x1ac>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ff24 	bl	8000428 <__aeabi_f2d>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80015e8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80015ec:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80015f0:	e9cd 4500 	strd	r4, r5, [sp]
 80015f4:	4a53      	ldr	r2, [pc, #332]	; (8001744 <UART_Handle+0x1b0>)
 80015f6:	210b      	movs	r1, #11
 80015f8:	4853      	ldr	r0, [pc, #332]	; (8001748 <UART_Handle+0x1b4>)
 80015fa:	f005 fb3f 	bl	8006c7c <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)data_string3, 11, 200);
 80015fe:	23c8      	movs	r3, #200	; 0xc8
 8001600:	220b      	movs	r2, #11
 8001602:	4951      	ldr	r1, [pc, #324]	; (8001748 <UART_Handle+0x1b4>)
 8001604:	4851      	ldr	r0, [pc, #324]	; (800174c <UART_Handle+0x1b8>)
 8001606:	f003 fa0e 	bl	8004a26 <HAL_UART_Transmit>
	}
/* Cut string */
	if (uart_flag == 1)
 800160a:	4b51      	ldr	r3, [pc, #324]	; (8001750 <UART_Handle+0x1bc>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b01      	cmp	r3, #1
 8001610:	f040 8087 	bne.w	8001722 <UART_Handle+0x18e>
	{
		char *arg_list[10];
		uint8_t arg_num = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		char *temp_token = strtok((char *)uart_buffer, " ");	/* Chỉ gán char trừ khoảng trắng cho con tro temp_token */
 800161a:	494e      	ldr	r1, [pc, #312]	; (8001754 <UART_Handle+0x1c0>)
 800161c:	484e      	ldr	r0, [pc, #312]	; (8001758 <UART_Handle+0x1c4>)
 800161e:	f005 fbd9 	bl	8006dd4 <strtok>
 8001622:	63b8      	str	r0, [r7, #56]	; 0x38
		while (temp_token != NULL) 				/* vòng lặp chạy mãi cho tới khi temp_token = null */
 8001624:	e011      	b.n	800164a <UART_Handle+0xb6>
		{
			arg_list[arg_num] = temp_token; 	/* byte của temp_token sẽ được lưu vào mảng arg_list tại arg_num */
 8001626:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	3340      	adds	r3, #64	; 0x40
 800162e:	443b      	add	r3, r7
 8001630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001632:	f843 2c40 	str.w	r2, [r3, #-64]
			arg_num++; 							/* để bảo đảm là mỗi token đã được qua thực thi rồi */
 8001636:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800163a:	3301      	adds	r3, #1
 800163c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			temp_token = strtok(NULL, " ");
 8001640:	4944      	ldr	r1, [pc, #272]	; (8001754 <UART_Handle+0x1c0>)
 8001642:	2000      	movs	r0, #0
 8001644:	f005 fbc6 	bl	8006dd4 <strtok>
 8001648:	63b8      	str	r0, [r7, #56]	; 0x38
		while (temp_token != NULL) 				/* vòng lặp chạy mãi cho tới khi temp_token = null */
 800164a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ea      	bne.n	8001626 <UART_Handle+0x92>
		}
/* Handle */
		if (strstr(arg_list[0], "*") != NULL)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	212a      	movs	r1, #42	; 0x2a
 8001654:	4618      	mov	r0, r3
 8001656:	f005 fbb0 	bl	8006dba <strchr>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d049      	beq.n	80016f4 <UART_Handle+0x160>
		{
			for (int j = 1; j <=6; j++){
 8001660:	2301      	movs	r3, #1
 8001662:	637b      	str	r3, [r7, #52]	; 0x34
 8001664:	e019      	b.n	800169a <UART_Handle+0x106>
				if (uart_buffer[j] == '*')
 8001666:	4a3c      	ldr	r2, [pc, #240]	; (8001758 <UART_Handle+0x1c4>)
 8001668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166a:	4413      	add	r3, r2
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b2a      	cmp	r3, #42	; 0x2a
 8001670:	d110      	bne.n	8001694 <UART_Handle+0x100>
				{
					for (int i = 0; i<=6; i++)
 8001672:	2300      	movs	r3, #0
 8001674:	633b      	str	r3, [r7, #48]	; 0x30
 8001676:	e00a      	b.n	800168e <UART_Handle+0xfa>
					{
						uart_buffer[i] = '\0';
 8001678:	4a37      	ldr	r2, [pc, #220]	; (8001758 <UART_Handle+0x1c4>)
 800167a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800167c:	4413      	add	r3, r2
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
						uart_pointer = 0;
 8001682:	4b36      	ldr	r3, [pc, #216]	; (800175c <UART_Handle+0x1c8>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i<=6; i++)
 8001688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168a:	3301      	adds	r3, #1
 800168c:	633b      	str	r3, [r7, #48]	; 0x30
 800168e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001690:	2b06      	cmp	r3, #6
 8001692:	ddf1      	ble.n	8001678 <UART_Handle+0xe4>
			for (int j = 1; j <=6; j++){
 8001694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001696:	3301      	adds	r3, #1
 8001698:	637b      	str	r3, [r7, #52]	; 0x34
 800169a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800169c:	2b06      	cmp	r3, #6
 800169e:	dde2      	ble.n	8001666 <UART_Handle+0xd2>
					}
				}
			}
			if (strstr(arg_list[1], "live") != NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	492f      	ldr	r1, [pc, #188]	; (8001760 <UART_Handle+0x1cc>)
 80016a4:	4618      	mov	r0, r3
 80016a6:	f005 fbf1 	bl	8006e8c <strstr>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d038      	beq.n	8001722 <UART_Handle+0x18e>
			{
				live_flag = 1;
 80016b0:	4b1e      	ldr	r3, [pc, #120]	; (800172c <UART_Handle+0x198>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
				living++;
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <UART_Handle+0x19c>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <UART_Handle+0x19c>)
 80016c0:	701a      	strb	r2, [r3, #0]
				if (living == 2)
 80016c2:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <UART_Handle+0x19c>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d102      	bne.n	80016d0 <UART_Handle+0x13c>
					living = 0;
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <UART_Handle+0x19c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i<=6; i++)
 80016d0:	2300      	movs	r3, #0
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d4:	e00a      	b.n	80016ec <UART_Handle+0x158>
				{
					uart_buffer[i] = '\0';
 80016d6:	4a20      	ldr	r2, [pc, #128]	; (8001758 <UART_Handle+0x1c4>)
 80016d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016da:	4413      	add	r3, r2
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
					uart_pointer = 0;
 80016e0:	4b1e      	ldr	r3, [pc, #120]	; (800175c <UART_Handle+0x1c8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i<=6; i++)
 80016e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e8:	3301      	adds	r3, #1
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	ddf1      	ble.n	80016d6 <UART_Handle+0x142>
		    }
	    	uart_pointer = 0;
			uart_flag = 0;
	    }
	}
}
 80016f2:	e016      	b.n	8001722 <UART_Handle+0x18e>
	    	for (int i = 0; i<=6; i++)
 80016f4:	2300      	movs	r3, #0
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80016f8:	e00a      	b.n	8001710 <UART_Handle+0x17c>
				uart_buffer[i] = '\0';
 80016fa:	4a17      	ldr	r2, [pc, #92]	; (8001758 <UART_Handle+0x1c4>)
 80016fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fe:	4413      	add	r3, r2
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
				uart_pointer = 0;
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <UART_Handle+0x1c8>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
	    	for (int i = 0; i<=6; i++)
 800170a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170c:	3301      	adds	r3, #1
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001712:	2b06      	cmp	r3, #6
 8001714:	ddf1      	ble.n	80016fa <UART_Handle+0x166>
	    	uart_pointer = 0;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <UART_Handle+0x1c8>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
			uart_flag = 0;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <UART_Handle+0x1bc>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
}
 8001722:	bf00      	nop
 8001724:	3740      	adds	r7, #64	; 0x40
 8001726:	46bd      	mov	sp, r7
 8001728:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800172c:	2000040c 	.word	0x2000040c
 8001730:	2000040d 	.word	0x2000040d
 8001734:	20000300 	.word	0x20000300
 8001738:	20000304 	.word	0x20000304
 800173c:	20000308 	.word	0x20000308
 8001740:	2000030c 	.word	0x2000030c
 8001744:	080090a0 	.word	0x080090a0
 8001748:	20000400 	.word	0x20000400
 800174c:	2000029c 	.word	0x2000029c
 8001750:	200003fc 	.word	0x200003fc
 8001754:	080090b4 	.word	0x080090b4
 8001758:	200003f4 	.word	0x200003f4
 800175c:	200003fb 	.word	0x200003fb
 8001760:	080090b8 	.word	0x080090b8

08001764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176a:	f000 feb1 	bl	80024d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800176e:	f000 fb25 	bl	8001dbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001772:	f000 fbf7 	bl	8001f64 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001776:	f000 fb67 	bl	8001e48 <MX_I2C2_Init>
  MX_SPI1_Init();
 800177a:	f000 fb93 	bl	8001ea4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800177e:	f000 fbc7 	bl	8001f10 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  mode = 0;
 8001782:	4bae      	ldr	r3, [pc, #696]	; (8001a3c <main+0x2d8>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
  DHT_Start();
 8001788:	f003 fec6 	bl	8005518 <DHT_Start>
  HAL_UART_Receive_IT(&huart1, &Rx_Buf, 1); // Nhận Data
 800178c:	2201      	movs	r2, #1
 800178e:	49ac      	ldr	r1, [pc, #688]	; (8001a40 <main+0x2dc>)
 8001790:	48ac      	ldr	r0, [pc, #688]	; (8001a44 <main+0x2e0>)
 8001792:	f003 f9da 	bl	8004b4a <HAL_UART_Receive_IT>
  lcd_init();
 8001796:	f004 f8b9 	bl	800590c <lcd_init>
  fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_WHITE);
 800179a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	23b0      	movs	r3, #176	; 0xb0
 80017a2:	22dc      	movs	r2, #220	; 0xdc
 80017a4:	2100      	movs	r1, #0
 80017a6:	2000      	movs	r0, #0
 80017a8:	f004 f9ec 	bl	8005b84 <fill_rectangle>
  draw_string(10, 10, COLOR_BLUEVIOLET, 2, "HELLO");
 80017ac:	4ba6      	ldr	r3, [pc, #664]	; (8001a48 <main+0x2e4>)
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2302      	movs	r3, #2
 80017b2:	f648 125c 	movw	r2, #35164	; 0x895c
 80017b6:	210a      	movs	r1, #10
 80017b8:	200a      	movs	r0, #10
 80017ba:	f004 fb25 	bl	8005e08 <draw_string>
  fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_WHITE);
 80017be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	23b0      	movs	r3, #176	; 0xb0
 80017c6:	22dc      	movs	r2, #220	; 0xdc
 80017c8:	2100      	movs	r1, #0
 80017ca:	2000      	movs	r0, #0
 80017cc:	f004 f9da 	bl	8005b84 <fill_rectangle>

  /* Setting time */
  datetime.second = 50;
 80017d0:	4b9e      	ldr	r3, [pc, #632]	; (8001a4c <main+0x2e8>)
 80017d2:	2232      	movs	r2, #50	; 0x32
 80017d4:	701a      	strb	r2, [r3, #0]
  datetime.min = 58;
 80017d6:	4b9d      	ldr	r3, [pc, #628]	; (8001a4c <main+0x2e8>)
 80017d8:	223a      	movs	r2, #58	; 0x3a
 80017da:	705a      	strb	r2, [r3, #1]
  datetime.hour = 17;
 80017dc:	4b9b      	ldr	r3, [pc, #620]	; (8001a4c <main+0x2e8>)
 80017de:	2211      	movs	r2, #17
 80017e0:	709a      	strb	r2, [r3, #2]
  datetime.date = 5;
 80017e2:	4b9a      	ldr	r3, [pc, #616]	; (8001a4c <main+0x2e8>)
 80017e4:	2205      	movs	r2, #5
 80017e6:	711a      	strb	r2, [r3, #4]
  datetime.month = 12;
 80017e8:	4b98      	ldr	r3, [pc, #608]	; (8001a4c <main+0x2e8>)
 80017ea:	220c      	movs	r2, #12
 80017ec:	715a      	strb	r2, [r3, #5]
  datetime.year = 23;
 80017ee:	4b97      	ldr	r3, [pc, #604]	; (8001a4c <main+0x2e8>)
 80017f0:	2217      	movs	r2, #23
 80017f2:	719a      	strb	r2, [r3, #6]
  RTC_WriteTime(&datetime);
 80017f4:	4895      	ldr	r0, [pc, #596]	; (8001a4c <main+0x2e8>)
 80017f6:	f004 fc85 	bl	8006104 <RTC_WriteTime>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UART_Handle();
 80017fa:	f7ff fecb 	bl	8001594 <UART_Handle>
	  /* Button detect */
	  /* Button mode */
	  if ((button0_detect == 1) && (HAL_GetTick() - button0_detect_time >= 200))
 80017fe:	4b94      	ldr	r3, [pc, #592]	; (8001a50 <main+0x2ec>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b01      	cmp	r3, #1
 8001806:	d10c      	bne.n	8001822 <main+0xbe>
 8001808:	f000 feba 	bl	8002580 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	4b91      	ldr	r3, [pc, #580]	; (8001a54 <main+0x2f0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2bc7      	cmp	r3, #199	; 0xc7
 8001816:	d904      	bls.n	8001822 <main+0xbe>
	  {
		  button0_detect = 0;
 8001818:	4b8d      	ldr	r3, [pc, #564]	; (8001a50 <main+0x2ec>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
		  btn_adjust_mode();
 800181e:	f7ff fb51 	bl	8000ec4 <btn_adjust_mode>
	  }
	  /* Button up */
	  if ((button1_detect == 1) && (HAL_GetTick() - button1_detect_time >= 200))
 8001822:	4b8d      	ldr	r3, [pc, #564]	; (8001a58 <main+0x2f4>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b01      	cmp	r3, #1
 800182a:	d10c      	bne.n	8001846 <main+0xe2>
 800182c:	f000 fea8 	bl	8002580 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	4b8a      	ldr	r3, [pc, #552]	; (8001a5c <main+0x2f8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2bc7      	cmp	r3, #199	; 0xc7
 800183a:	d904      	bls.n	8001846 <main+0xe2>
	  {
		  button1_detect = 0;
 800183c:	4b86      	ldr	r3, [pc, #536]	; (8001a58 <main+0x2f4>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
		  btn_adjust_up();
 8001842:	f7ff fc39 	bl	80010b8 <btn_adjust_up>
	  }
	  /* Button down */
	  if ((button2_detect == 1) && (HAL_GetTick() - button2_detect_time >= 200))
 8001846:	4b86      	ldr	r3, [pc, #536]	; (8001a60 <main+0x2fc>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b01      	cmp	r3, #1
 800184e:	d10c      	bne.n	800186a <main+0x106>
 8001850:	f000 fe96 	bl	8002580 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	4b83      	ldr	r3, [pc, #524]	; (8001a64 <main+0x300>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2bc7      	cmp	r3, #199	; 0xc7
 800185e:	d904      	bls.n	800186a <main+0x106>
	  {
		  button2_detect = 0;
 8001860:	4b7f      	ldr	r3, [pc, #508]	; (8001a60 <main+0x2fc>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
		  btn_adjust_down();
 8001866:	f7ff fd41 	bl	80012ec <btn_adjust_down>
	  }
	  /* Show frame of screen once */
	  if (is_show_frame == 0)
 800186a:	4b7f      	ldr	r3, [pc, #508]	; (8001a68 <main+0x304>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d140      	bne.n	80018f4 <main+0x190>
	  {
		 	/* draw title */
		 	draw_string(40, 5, COLOR_DARKGREEN, 2, "QMD C24");
 8001872:	4b7e      	ldr	r3, [pc, #504]	; (8001a6c <main+0x308>)
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2302      	movs	r3, #2
 8001878:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800187c:	2105      	movs	r1, #5
 800187e:	2028      	movs	r0, #40	; 0x28
 8001880:	f004 fac2 	bl	8005e08 <draw_string>
		 	/* draw for temp and hum */
			draw_string(20, 45, COLOR_GOLD, 1, "TEMP :");
 8001884:	4b7a      	ldr	r3, [pc, #488]	; (8001a70 <main+0x30c>)
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2301      	movs	r3, #1
 800188a:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 800188e:	212d      	movs	r1, #45	; 0x2d
 8001890:	2014      	movs	r0, #20
 8001892:	f004 fab9 	bl	8005e08 <draw_string>
		    draw_string(20, 65, COLOR_GOLD, 1, "HUM  :");
 8001896:	4b77      	ldr	r3, [pc, #476]	; (8001a74 <main+0x310>)
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2301      	movs	r3, #1
 800189c:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 80018a0:	2141      	movs	r1, #65	; 0x41
 80018a2:	2014      	movs	r0, #20
 80018a4:	f004 fab0 	bl	8005e08 <draw_string>
		    draw_pic_8bit(170, 39, ICON_TEMP, COLOR_RED, 2);
 80018a8:	2302      	movs	r3, #2
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80018b0:	2201      	movs	r2, #1
 80018b2:	2127      	movs	r1, #39	; 0x27
 80018b4:	20aa      	movs	r0, #170	; 0xaa
 80018b6:	f004 fadb 	bl	8005e70 <draw_pic_8bit>
			draw_pic_8bit(170, 59, ICON_HUM, COLOR_BLUE, 2);
 80018ba:	2302      	movs	r3, #2
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	231f      	movs	r3, #31
 80018c0:	2202      	movs	r2, #2
 80018c2:	213b      	movs	r1, #59	; 0x3b
 80018c4:	20aa      	movs	r0, #170	; 0xaa
 80018c6:	f004 fad3 	bl	8005e70 <draw_pic_8bit>
			/* draw icon calendar and clock */
		    draw_pic_8bit(15, 115, ICON_CALENDAR, COLOR_ORANGE, 2);
 80018ca:	2302      	movs	r3, #2
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80018d2:	2203      	movs	r2, #3
 80018d4:	2173      	movs	r1, #115	; 0x73
 80018d6:	200f      	movs	r0, #15
 80018d8:	f004 faca 	bl	8005e70 <draw_pic_8bit>
			draw_pic_8bit(15, 95, ICON_CLOCK, COLOR_BROWN, 2);
 80018dc:	2302      	movs	r3, #2
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	f24a 1345 	movw	r3, #41285	; 0xa145
 80018e4:	2204      	movs	r2, #4
 80018e6:	215f      	movs	r1, #95	; 0x5f
 80018e8:	200f      	movs	r0, #15
 80018ea:	f004 fac1 	bl	8005e70 <draw_pic_8bit>
			is_show_frame = 1;
 80018ee:	4b5e      	ldr	r3, [pc, #376]	; (8001a68 <main+0x304>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
	  }

	 /* Show date and time */
	 RTC_ReadTime(&datetime);
 80018f4:	4855      	ldr	r0, [pc, #340]	; (8001a4c <main+0x2e8>)
 80018f6:	f004 fc4b 	bl	8006190 <RTC_ReadTime>
	 secondtemp = datetime.second;
 80018fa:	4b54      	ldr	r3, [pc, #336]	; (8001a4c <main+0x2e8>)
 80018fc:	781a      	ldrb	r2, [r3, #0]
 80018fe:	4b5e      	ldr	r3, [pc, #376]	; (8001a78 <main+0x314>)
 8001900:	701a      	strb	r2, [r3, #0]
	 mintemp = datetime.min;
 8001902:	4b52      	ldr	r3, [pc, #328]	; (8001a4c <main+0x2e8>)
 8001904:	785a      	ldrb	r2, [r3, #1]
 8001906:	4b5d      	ldr	r3, [pc, #372]	; (8001a7c <main+0x318>)
 8001908:	701a      	strb	r2, [r3, #0]
	 hourtemp = datetime.hour;
 800190a:	4b50      	ldr	r3, [pc, #320]	; (8001a4c <main+0x2e8>)
 800190c:	789a      	ldrb	r2, [r3, #2]
 800190e:	4b5c      	ldr	r3, [pc, #368]	; (8001a80 <main+0x31c>)
 8001910:	701a      	strb	r2, [r3, #0]
	 datetemp = datetime.date;
 8001912:	4b4e      	ldr	r3, [pc, #312]	; (8001a4c <main+0x2e8>)
 8001914:	791a      	ldrb	r2, [r3, #4]
 8001916:	4b5b      	ldr	r3, [pc, #364]	; (8001a84 <main+0x320>)
 8001918:	701a      	strb	r2, [r3, #0]
	 monthtemp = datetime.month;
 800191a:	4b4c      	ldr	r3, [pc, #304]	; (8001a4c <main+0x2e8>)
 800191c:	795a      	ldrb	r2, [r3, #5]
 800191e:	4b5a      	ldr	r3, [pc, #360]	; (8001a88 <main+0x324>)
 8001920:	701a      	strb	r2, [r3, #0]
	 yeartemp = datetime.year;
 8001922:	4b4a      	ldr	r3, [pc, #296]	; (8001a4c <main+0x2e8>)
 8001924:	799a      	ldrb	r2, [r3, #6]
 8001926:	4b59      	ldr	r3, [pc, #356]	; (8001a8c <main+0x328>)
 8001928:	701a      	strb	r2, [r3, #0]
	 sprintf(str1, "Time: %02d:%02d:%02d", datetime.hour, datetime.min, datetime.second);
 800192a:	4b48      	ldr	r3, [pc, #288]	; (8001a4c <main+0x2e8>)
 800192c:	789b      	ldrb	r3, [r3, #2]
 800192e:	461a      	mov	r2, r3
 8001930:	4b46      	ldr	r3, [pc, #280]	; (8001a4c <main+0x2e8>)
 8001932:	785b      	ldrb	r3, [r3, #1]
 8001934:	4619      	mov	r1, r3
 8001936:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <main+0x2e8>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	460b      	mov	r3, r1
 800193e:	4954      	ldr	r1, [pc, #336]	; (8001a90 <main+0x32c>)
 8001940:	4854      	ldr	r0, [pc, #336]	; (8001a94 <main+0x330>)
 8001942:	f005 f9cf 	bl	8006ce4 <siprintf>
	 sprintf(strmin, "%02d", datetime.min);
 8001946:	4b41      	ldr	r3, [pc, #260]	; (8001a4c <main+0x2e8>)
 8001948:	785b      	ldrb	r3, [r3, #1]
 800194a:	461a      	mov	r2, r3
 800194c:	4952      	ldr	r1, [pc, #328]	; (8001a98 <main+0x334>)
 800194e:	4853      	ldr	r0, [pc, #332]	; (8001a9c <main+0x338>)
 8001950:	f005 f9c8 	bl	8006ce4 <siprintf>
	 sprintf(strhour, "%02d", datetime.hour);
 8001954:	4b3d      	ldr	r3, [pc, #244]	; (8001a4c <main+0x2e8>)
 8001956:	789b      	ldrb	r3, [r3, #2]
 8001958:	461a      	mov	r2, r3
 800195a:	494f      	ldr	r1, [pc, #316]	; (8001a98 <main+0x334>)
 800195c:	4850      	ldr	r0, [pc, #320]	; (8001aa0 <main+0x33c>)
 800195e:	f005 f9c1 	bl	8006ce4 <siprintf>
	 sprintf(strdate, "%02d", datetime.date);
 8001962:	4b3a      	ldr	r3, [pc, #232]	; (8001a4c <main+0x2e8>)
 8001964:	791b      	ldrb	r3, [r3, #4]
 8001966:	461a      	mov	r2, r3
 8001968:	494b      	ldr	r1, [pc, #300]	; (8001a98 <main+0x334>)
 800196a:	484e      	ldr	r0, [pc, #312]	; (8001aa4 <main+0x340>)
 800196c:	f005 f9ba 	bl	8006ce4 <siprintf>

	 if (secondtemp != second_present)
 8001970:	4b41      	ldr	r3, [pc, #260]	; (8001a78 <main+0x314>)
 8001972:	781a      	ldrb	r2, [r3, #0]
 8001974:	4b4c      	ldr	r3, [pc, #304]	; (8001aa8 <main+0x344>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d00c      	beq.n	8001996 <main+0x232>
	 {
		 fill_rectangle(145, 100, 170, 110, COLOR_WHITE);
 800197c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	236e      	movs	r3, #110	; 0x6e
 8001984:	22aa      	movs	r2, #170	; 0xaa
 8001986:	2164      	movs	r1, #100	; 0x64
 8001988:	2091      	movs	r0, #145	; 0x91
 800198a:	f004 f8fb 	bl	8005b84 <fill_rectangle>
		 second_present = secondtemp;
 800198e:	4b3a      	ldr	r3, [pc, #232]	; (8001a78 <main+0x314>)
 8001990:	781a      	ldrb	r2, [r3, #0]
 8001992:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <main+0x344>)
 8001994:	701a      	strb	r2, [r3, #0]
	 }
	 draw_string(40, 100, COLOR_BLACK, 1, str1);
 8001996:	4b3f      	ldr	r3, [pc, #252]	; (8001a94 <main+0x330>)
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2301      	movs	r3, #1
 800199c:	2200      	movs	r2, #0
 800199e:	2164      	movs	r1, #100	; 0x64
 80019a0:	2028      	movs	r0, #40	; 0x28
 80019a2:	f004 fa31 	bl	8005e08 <draw_string>

	 if (mintemp != min_present)
 80019a6:	4b35      	ldr	r3, [pc, #212]	; (8001a7c <main+0x318>)
 80019a8:	781a      	ldrb	r2, [r3, #0]
 80019aa:	4b40      	ldr	r3, [pc, #256]	; (8001aac <main+0x348>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d00c      	beq.n	80019cc <main+0x268>
	 {
		 fill_rectangle(120, 100, 140, 110, COLOR_WHITE);
 80019b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	236e      	movs	r3, #110	; 0x6e
 80019ba:	228c      	movs	r2, #140	; 0x8c
 80019bc:	2164      	movs	r1, #100	; 0x64
 80019be:	2078      	movs	r0, #120	; 0x78
 80019c0:	f004 f8e0 	bl	8005b84 <fill_rectangle>
		 min_present = mintemp;
 80019c4:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <main+0x318>)
 80019c6:	781a      	ldrb	r2, [r3, #0]
 80019c8:	4b38      	ldr	r3, [pc, #224]	; (8001aac <main+0x348>)
 80019ca:	701a      	strb	r2, [r3, #0]
	 }
	 draw_string(40, 100, COLOR_BLACK, 1, str1);
 80019cc:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <main+0x330>)
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2301      	movs	r3, #1
 80019d2:	2200      	movs	r2, #0
 80019d4:	2164      	movs	r1, #100	; 0x64
 80019d6:	2028      	movs	r0, #40	; 0x28
 80019d8:	f004 fa16 	bl	8005e08 <draw_string>

	 if (hourtemp != hour_present)
 80019dc:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <main+0x31c>)
 80019de:	781a      	ldrb	r2, [r3, #0]
 80019e0:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <main+0x34c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d00c      	beq.n	8001a02 <main+0x29e>
	 {
		 fill_rectangle(95, 100, 115, 110, COLOR_WHITE);
 80019e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	236e      	movs	r3, #110	; 0x6e
 80019f0:	2273      	movs	r2, #115	; 0x73
 80019f2:	2164      	movs	r1, #100	; 0x64
 80019f4:	205f      	movs	r0, #95	; 0x5f
 80019f6:	f004 f8c5 	bl	8005b84 <fill_rectangle>
		 hour_present = hourtemp;
 80019fa:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <main+0x31c>)
 80019fc:	781a      	ldrb	r2, [r3, #0]
 80019fe:	4b2c      	ldr	r3, [pc, #176]	; (8001ab0 <main+0x34c>)
 8001a00:	701a      	strb	r2, [r3, #0]
	 }
	 draw_string(40, 100, COLOR_BLACK, 1, str1);
 8001a02:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <main+0x330>)
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	2301      	movs	r3, #1
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2164      	movs	r1, #100	; 0x64
 8001a0c:	2028      	movs	r0, #40	; 0x28
 8001a0e:	f004 f9fb 	bl	8005e08 <draw_string>

	 sprintf(str2, "Date: %02d/%02d/20%02d", datetime.date, datetime.month, datetime.year );
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <main+0x2e8>)
 8001a14:	791b      	ldrb	r3, [r3, #4]
 8001a16:	461a      	mov	r2, r3
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <main+0x2e8>)
 8001a1a:	795b      	ldrb	r3, [r3, #5]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <main+0x2e8>)
 8001a20:	799b      	ldrb	r3, [r3, #6]
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	460b      	mov	r3, r1
 8001a26:	4923      	ldr	r1, [pc, #140]	; (8001ab4 <main+0x350>)
 8001a28:	4823      	ldr	r0, [pc, #140]	; (8001ab8 <main+0x354>)
 8001a2a:	f005 f95b 	bl	8006ce4 <siprintf>
	 if (datetemp != date_present)
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <main+0x320>)
 8001a30:	781a      	ldrb	r2, [r3, #0]
 8001a32:	4b22      	ldr	r3, [pc, #136]	; (8001abc <main+0x358>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d04f      	beq.n	8001ada <main+0x376>
 8001a3a:	e041      	b.n	8001ac0 <main+0x35c>
 8001a3c:	2000040e 	.word	0x2000040e
 8001a40:	200003f3 	.word	0x200003f3
 8001a44:	2000029c 	.word	0x2000029c
 8001a48:	080090c0 	.word	0x080090c0
 8001a4c:	20000334 	.word	0x20000334
 8001a50:	2000040f 	.word	0x2000040f
 8001a54:	20000414 	.word	0x20000414
 8001a58:	20000418 	.word	0x20000418
 8001a5c:	2000041c 	.word	0x2000041c
 8001a60:	20000421 	.word	0x20000421
 8001a64:	20000424 	.word	0x20000424
 8001a68:	2000031c 	.word	0x2000031c
 8001a6c:	080090c8 	.word	0x080090c8
 8001a70:	080090d0 	.word	0x080090d0
 8001a74:	080090d8 	.word	0x080090d8
 8001a78:	20000347 	.word	0x20000347
 8001a7c:	20000348 	.word	0x20000348
 8001a80:	20000349 	.word	0x20000349
 8001a84:	2000034a 	.word	0x2000034a
 8001a88:	2000034b 	.word	0x2000034b
 8001a8c:	2000034c 	.word	0x2000034c
 8001a90:	080090e0 	.word	0x080090e0
 8001a94:	200003c8 	.word	0x200003c8
 8001a98:	08009098 	.word	0x08009098
 8001a9c:	20000350 	.word	0x20000350
 8001aa0:	20000364 	.word	0x20000364
 8001aa4:	20000378 	.word	0x20000378
 8001aa8:	2000033b 	.word	0x2000033b
 8001aac:	2000033c 	.word	0x2000033c
 8001ab0:	2000033d 	.word	0x2000033d
 8001ab4:	080090f8 	.word	0x080090f8
 8001ab8:	200003dc 	.word	0x200003dc
 8001abc:	2000033e 	.word	0x2000033e
	 {
		  fill_rectangle(95, 115, 115, 135, COLOR_WHITE);
 8001ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	2387      	movs	r3, #135	; 0x87
 8001ac8:	2273      	movs	r2, #115	; 0x73
 8001aca:	2173      	movs	r1, #115	; 0x73
 8001acc:	205f      	movs	r0, #95	; 0x5f
 8001ace:	f004 f859 	bl	8005b84 <fill_rectangle>
		  date_present = datetemp;
 8001ad2:	4ba1      	ldr	r3, [pc, #644]	; (8001d58 <main+0x5f4>)
 8001ad4:	781a      	ldrb	r2, [r3, #0]
 8001ad6:	4ba1      	ldr	r3, [pc, #644]	; (8001d5c <main+0x5f8>)
 8001ad8:	701a      	strb	r2, [r3, #0]
	 }
	  	  draw_string(40, 120, COLOR_BLACK, 1, str2);
 8001ada:	4ba1      	ldr	r3, [pc, #644]	; (8001d60 <main+0x5fc>)
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	2301      	movs	r3, #1
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2178      	movs	r1, #120	; 0x78
 8001ae4:	2028      	movs	r0, #40	; 0x28
 8001ae6:	f004 f98f 	bl	8005e08 <draw_string>

	 if (monthtemp != month_present)
 8001aea:	4b9e      	ldr	r3, [pc, #632]	; (8001d64 <main+0x600>)
 8001aec:	781a      	ldrb	r2, [r3, #0]
 8001aee:	4b9e      	ldr	r3, [pc, #632]	; (8001d68 <main+0x604>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d00c      	beq.n	8001b10 <main+0x3ac>
	 {
		 fill_rectangle(120, 115, 140, 135, COLOR_WHITE);
 8001af6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	2387      	movs	r3, #135	; 0x87
 8001afe:	228c      	movs	r2, #140	; 0x8c
 8001b00:	2173      	movs	r1, #115	; 0x73
 8001b02:	2078      	movs	r0, #120	; 0x78
 8001b04:	f004 f83e 	bl	8005b84 <fill_rectangle>
		 month_present = monthtemp;
 8001b08:	4b96      	ldr	r3, [pc, #600]	; (8001d64 <main+0x600>)
 8001b0a:	781a      	ldrb	r2, [r3, #0]
 8001b0c:	4b96      	ldr	r3, [pc, #600]	; (8001d68 <main+0x604>)
 8001b0e:	701a      	strb	r2, [r3, #0]
	 }
	 draw_string(40, 120, COLOR_BLACK, 1, str2);
 8001b10:	4b93      	ldr	r3, [pc, #588]	; (8001d60 <main+0x5fc>)
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2301      	movs	r3, #1
 8001b16:	2200      	movs	r2, #0
 8001b18:	2178      	movs	r1, #120	; 0x78
 8001b1a:	2028      	movs	r0, #40	; 0x28
 8001b1c:	f004 f974 	bl	8005e08 <draw_string>

	 if (yeartemp != year_present)
 8001b20:	4b92      	ldr	r3, [pc, #584]	; (8001d6c <main+0x608>)
 8001b22:	781a      	ldrb	r2, [r3, #0]
 8001b24:	4b92      	ldr	r3, [pc, #584]	; (8001d70 <main+0x60c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d00c      	beq.n	8001b46 <main+0x3e2>
	 {
		 fill_rectangle(145, 115, 190, 135, COLOR_WHITE);
 8001b2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	2387      	movs	r3, #135	; 0x87
 8001b34:	22be      	movs	r2, #190	; 0xbe
 8001b36:	2173      	movs	r1, #115	; 0x73
 8001b38:	2091      	movs	r0, #145	; 0x91
 8001b3a:	f004 f823 	bl	8005b84 <fill_rectangle>
		 year_present = yeartemp;
 8001b3e:	4b8b      	ldr	r3, [pc, #556]	; (8001d6c <main+0x608>)
 8001b40:	781a      	ldrb	r2, [r3, #0]
 8001b42:	4b8b      	ldr	r3, [pc, #556]	; (8001d70 <main+0x60c>)
 8001b44:	701a      	strb	r2, [r3, #0]
	 }
	 draw_string(40, 120, COLOR_BLACK, 1, str2);
 8001b46:	4b86      	ldr	r3, [pc, #536]	; (8001d60 <main+0x5fc>)
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2178      	movs	r1, #120	; 0x78
 8001b50:	2028      	movs	r0, #40	; 0x28
 8001b52:	f004 f959 	bl	8005e08 <draw_string>

	 /* Display moon and sun */
	 if (datetime.hour > 6 && datetime.hour < 18)
 8001b56:	4b87      	ldr	r3, [pc, #540]	; (8001d74 <main+0x610>)
 8001b58:	789b      	ldrb	r3, [r3, #2]
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d909      	bls.n	8001b72 <main+0x40e>
 8001b5e:	4b85      	ldr	r3, [pc, #532]	; (8001d74 <main+0x610>)
 8001b60:	789b      	ldrb	r3, [r3, #2]
 8001b62:	2b11      	cmp	r3, #17
 8001b64:	d805      	bhi.n	8001b72 <main+0x40e>
	 {
		 present_session = 1;
 8001b66:	4b84      	ldr	r3, [pc, #528]	; (8001d78 <main+0x614>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]
		 session_flag = 0;
 8001b6c:	4b83      	ldr	r3, [pc, #524]	; (8001d7c <main+0x618>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
	 }

	 if ((datetime.hour <= 6 || datetime.hour >= 18) && session_flag == 0)
 8001b72:	4b80      	ldr	r3, [pc, #512]	; (8001d74 <main+0x610>)
 8001b74:	789b      	ldrb	r3, [r3, #2]
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d903      	bls.n	8001b82 <main+0x41e>
 8001b7a:	4b7e      	ldr	r3, [pc, #504]	; (8001d74 <main+0x610>)
 8001b7c:	789b      	ldrb	r3, [r3, #2]
 8001b7e:	2b11      	cmp	r3, #17
 8001b80:	d909      	bls.n	8001b96 <main+0x432>
 8001b82:	4b7e      	ldr	r3, [pc, #504]	; (8001d7c <main+0x618>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <main+0x432>
	 {
		 present_session = 2;
 8001b8a:	4b7b      	ldr	r3, [pc, #492]	; (8001d78 <main+0x614>)
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	701a      	strb	r2, [r3, #0]
		 session_flag = 1;
 8001b90:	4b7a      	ldr	r3, [pc, #488]	; (8001d7c <main+0x618>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	701a      	strb	r2, [r3, #0]
	 }
	 if (present_session != previous_session && session_flag == 1)
 8001b96:	4b78      	ldr	r3, [pc, #480]	; (8001d78 <main+0x614>)
 8001b98:	781a      	ldrb	r2, [r3, #0]
 8001b9a:	4b79      	ldr	r3, [pc, #484]	; (8001d80 <main+0x61c>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d01a      	beq.n	8001bd8 <main+0x474>
 8001ba2:	4b76      	ldr	r3, [pc, #472]	; (8001d7c <main+0x618>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d116      	bne.n	8001bd8 <main+0x474>
	 {
		 fill_rectangle(182, 5, 220, 45, COLOR_WHITE);
 8001baa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	232d      	movs	r3, #45	; 0x2d
 8001bb2:	22dc      	movs	r2, #220	; 0xdc
 8001bb4:	2105      	movs	r1, #5
 8001bb6:	20b6      	movs	r0, #182	; 0xb6
 8001bb8:	f003 ffe4 	bl	8005b84 <fill_rectangle>
		 draw_pic_16bit(182, 5, MOON, COLOR_GRAY, 2); /* display moon */
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	f248 4310 	movw	r3, #33808	; 0x8410
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	2105      	movs	r1, #5
 8001bc8:	20b6      	movs	r0, #182	; 0xb6
 8001bca:	f004 f9d9 	bl	8005f80 <draw_pic_16bit>
		 previous_session = present_session;
 8001bce:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <main+0x614>)
 8001bd0:	781a      	ldrb	r2, [r3, #0]
 8001bd2:	4b6b      	ldr	r3, [pc, #428]	; (8001d80 <main+0x61c>)
 8001bd4:	701a      	strb	r2, [r3, #0]
 8001bd6:	e01f      	b.n	8001c18 <main+0x4b4>
	 }
	 else if (present_session != previous_session && session_flag == 0)
 8001bd8:	4b67      	ldr	r3, [pc, #412]	; (8001d78 <main+0x614>)
 8001bda:	781a      	ldrb	r2, [r3, #0]
 8001bdc:	4b68      	ldr	r3, [pc, #416]	; (8001d80 <main+0x61c>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d019      	beq.n	8001c18 <main+0x4b4>
 8001be4:	4b65      	ldr	r3, [pc, #404]	; (8001d7c <main+0x618>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d115      	bne.n	8001c18 <main+0x4b4>
	 {
		 fill_rectangle(182, 5, 220, 45, COLOR_WHITE);
 8001bec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	232d      	movs	r3, #45	; 0x2d
 8001bf4:	22dc      	movs	r2, #220	; 0xdc
 8001bf6:	2105      	movs	r1, #5
 8001bf8:	20b6      	movs	r0, #182	; 0xb6
 8001bfa:	f003 ffc3 	bl	8005b84 <fill_rectangle>
		 draw_pic_16bit(182, 5, SUN, COLOR_SUN, 2); /* display sun */
 8001bfe:	2302      	movs	r3, #2
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001c06:	2201      	movs	r2, #1
 8001c08:	2105      	movs	r1, #5
 8001c0a:	20b6      	movs	r0, #182	; 0xb6
 8001c0c:	f004 f9b8 	bl	8005f80 <draw_pic_16bit>
		 previous_session = present_session;
 8001c10:	4b59      	ldr	r3, [pc, #356]	; (8001d78 <main+0x614>)
 8001c12:	781a      	ldrb	r2, [r3, #0]
 8001c14:	4b5a      	ldr	r3, [pc, #360]	; (8001d80 <main+0x61c>)
 8001c16:	701a      	strb	r2, [r3, #0]
	 }

	 /* Read data of temp and hum*/
	 Read_DataDHT();
 8001c18:	f7ff f8da 	bl	8000dd0 <Read_DataDHT>
	 /* Display temp and hum */
	 if (Temp1 != previous_temp1)
 8001c1c:	4b59      	ldr	r3, [pc, #356]	; (8001d84 <main+0x620>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a59      	ldr	r2, [pc, #356]	; (8001d88 <main+0x624>)
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	4611      	mov	r1, r2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f880 	bl	8000d2c <__aeabi_fcmpeq>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d120      	bne.n	8001c74 <main+0x510>
	 {
		 sprintf((char *)temp_nguyen_str, "%02d",(uint16_t)Temp1);
 8001c32:	4b54      	ldr	r3, [pc, #336]	; (8001d84 <main+0x620>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff f8aa 	bl	8000d90 <__aeabi_f2uiz>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	4952      	ldr	r1, [pc, #328]	; (8001d8c <main+0x628>)
 8001c44:	4852      	ldr	r0, [pc, #328]	; (8001d90 <main+0x62c>)
 8001c46:	f005 f84d 	bl	8006ce4 <siprintf>
		 fill_rectangle(100, 45, 120, 55, COLOR_WHITE);
 8001c4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	2337      	movs	r3, #55	; 0x37
 8001c52:	2278      	movs	r2, #120	; 0x78
 8001c54:	212d      	movs	r1, #45	; 0x2d
 8001c56:	2064      	movs	r0, #100	; 0x64
 8001c58:	f003 ff94 	bl	8005b84 <fill_rectangle>
		 draw_string(100, 45, COLOR_BLUE, 1, (char *)temp_nguyen_str);
 8001c5c:	4b4c      	ldr	r3, [pc, #304]	; (8001d90 <main+0x62c>)
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	2301      	movs	r3, #1
 8001c62:	221f      	movs	r2, #31
 8001c64:	212d      	movs	r1, #45	; 0x2d
 8001c66:	2064      	movs	r0, #100	; 0x64
 8001c68:	f004 f8ce 	bl	8005e08 <draw_string>
		 previous_temp1 = Temp1;
 8001c6c:	4b45      	ldr	r3, [pc, #276]	; (8001d84 <main+0x620>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a45      	ldr	r2, [pc, #276]	; (8001d88 <main+0x624>)
 8001c72:	6013      	str	r3, [r2, #0]
	 }
	 if (Temp2 != previous_temp2)
 8001c74:	4b47      	ldr	r3, [pc, #284]	; (8001d94 <main+0x630>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a47      	ldr	r2, [pc, #284]	; (8001d98 <main+0x634>)
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff f854 	bl	8000d2c <__aeabi_fcmpeq>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d120      	bne.n	8001ccc <main+0x568>
	 {
		 sprintf((char *)temp_thap_phan_str,".%02d",(uint16_t)Temp2);
 8001c8a:	4b42      	ldr	r3, [pc, #264]	; (8001d94 <main+0x630>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff f87e 	bl	8000d90 <__aeabi_f2uiz>
 8001c94:	4603      	mov	r3, r0
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4940      	ldr	r1, [pc, #256]	; (8001d9c <main+0x638>)
 8001c9c:	4840      	ldr	r0, [pc, #256]	; (8001da0 <main+0x63c>)
 8001c9e:	f005 f821 	bl	8006ce4 <siprintf>
		 fill_rectangle(118, 45, 148, 55, COLOR_WHITE);
 8001ca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2337      	movs	r3, #55	; 0x37
 8001caa:	2294      	movs	r2, #148	; 0x94
 8001cac:	212d      	movs	r1, #45	; 0x2d
 8001cae:	2076      	movs	r0, #118	; 0x76
 8001cb0:	f003 ff68 	bl	8005b84 <fill_rectangle>
		 draw_string(118, 45, COLOR_BLUE, 1, (char *)temp_thap_phan_str );
 8001cb4:	4b3a      	ldr	r3, [pc, #232]	; (8001da0 <main+0x63c>)
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2301      	movs	r3, #1
 8001cba:	221f      	movs	r2, #31
 8001cbc:	212d      	movs	r1, #45	; 0x2d
 8001cbe:	2076      	movs	r0, #118	; 0x76
 8001cc0:	f004 f8a2 	bl	8005e08 <draw_string>
		 previous_temp2 = Temp2;
 8001cc4:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <main+0x630>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a33      	ldr	r2, [pc, #204]	; (8001d98 <main+0x634>)
 8001cca:	6013      	str	r3, [r2, #0]
	 }
	 if (Hum1 != previous_hum1)
 8001ccc:	4b35      	ldr	r3, [pc, #212]	; (8001da4 <main+0x640>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a35      	ldr	r2, [pc, #212]	; (8001da8 <main+0x644>)
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f828 	bl	8000d2c <__aeabi_fcmpeq>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d120      	bne.n	8001d24 <main+0x5c0>
	 {
		 sprintf((char *)hum_phan_nguyen_str, "%02d",(uint16_t)Hum1);
 8001ce2:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <main+0x640>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff f852 	bl	8000d90 <__aeabi_f2uiz>
 8001cec:	4603      	mov	r3, r0
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4926      	ldr	r1, [pc, #152]	; (8001d8c <main+0x628>)
 8001cf4:	482d      	ldr	r0, [pc, #180]	; (8001dac <main+0x648>)
 8001cf6:	f004 fff5 	bl	8006ce4 <siprintf>
		 fill_rectangle(100, 65, 120, 75, COLOR_WHITE);
 8001cfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	234b      	movs	r3, #75	; 0x4b
 8001d02:	2278      	movs	r2, #120	; 0x78
 8001d04:	2141      	movs	r1, #65	; 0x41
 8001d06:	2064      	movs	r0, #100	; 0x64
 8001d08:	f003 ff3c 	bl	8005b84 <fill_rectangle>
		 draw_string(100, 65, COLOR_BLUE, 1, (char *)hum_phan_nguyen_str);
 8001d0c:	4b27      	ldr	r3, [pc, #156]	; (8001dac <main+0x648>)
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2301      	movs	r3, #1
 8001d12:	221f      	movs	r2, #31
 8001d14:	2141      	movs	r1, #65	; 0x41
 8001d16:	2064      	movs	r0, #100	; 0x64
 8001d18:	f004 f876 	bl	8005e08 <draw_string>
		 previous_hum1 = Hum1;
 8001d1c:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <main+0x640>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a21      	ldr	r2, [pc, #132]	; (8001da8 <main+0x644>)
 8001d22:	6013      	str	r3, [r2, #0]
	 }
	 sprintf((char *)hum_phan_thap_phan_str, ".%02d %%",(uint16_t)Hum2);
 8001d24:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <main+0x64c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff f831 	bl	8000d90 <__aeabi_f2uiz>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	461a      	mov	r2, r3
 8001d34:	491f      	ldr	r1, [pc, #124]	; (8001db4 <main+0x650>)
 8001d36:	4820      	ldr	r0, [pc, #128]	; (8001db8 <main+0x654>)
 8001d38:	f004 ffd4 	bl	8006ce4 <siprintf>
	 draw_string(118, 65, COLOR_BLUE, 1, (char *)hum_phan_thap_phan_str);
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <main+0x654>)
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2301      	movs	r3, #1
 8001d42:	221f      	movs	r2, #31
 8001d44:	2141      	movs	r1, #65	; 0x41
 8001d46:	2076      	movs	r0, #118	; 0x76
 8001d48:	f004 f85e 	bl	8005e08 <draw_string>
	 HAL_Delay(600);
 8001d4c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001d50:	f000 fc20 	bl	8002594 <HAL_Delay>
	  UART_Handle();
 8001d54:	e551      	b.n	80017fa <main+0x96>
 8001d56:	bf00      	nop
 8001d58:	2000034a 	.word	0x2000034a
 8001d5c:	2000033e 	.word	0x2000033e
 8001d60:	200003dc 	.word	0x200003dc
 8001d64:	2000034b 	.word	0x2000034b
 8001d68:	2000033f 	.word	0x2000033f
 8001d6c:	2000034c 	.word	0x2000034c
 8001d70:	20000340 	.word	0x20000340
 8001d74:	20000334 	.word	0x20000334
 8001d78:	200003f0 	.word	0x200003f0
 8001d7c:	200003f2 	.word	0x200003f2
 8001d80:	200003f1 	.word	0x200003f1
 8001d84:	20000300 	.word	0x20000300
 8001d88:	20000310 	.word	0x20000310
 8001d8c:	08009098 	.word	0x08009098
 8001d90:	20000320 	.word	0x20000320
 8001d94:	20000304 	.word	0x20000304
 8001d98:	20000314 	.word	0x20000314
 8001d9c:	08009110 	.word	0x08009110
 8001da0:	20000324 	.word	0x20000324
 8001da4:	20000308 	.word	0x20000308
 8001da8:	20000318 	.word	0x20000318
 8001dac:	20000328 	.word	0x20000328
 8001db0:	2000030c 	.word	0x2000030c
 8001db4:	08009118 	.word	0x08009118
 8001db8:	2000032c 	.word	0x2000032c

08001dbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b090      	sub	sp, #64	; 0x40
 8001dc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dc2:	f107 0318 	add.w	r3, r7, #24
 8001dc6:	2228      	movs	r2, #40	; 0x28
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f004 ffed 	bl	8006daa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	60da      	str	r2, [r3, #12]
 8001ddc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dde:	2301      	movs	r3, #1
 8001de0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001de6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001de8:	2300      	movs	r3, #0
 8001dea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dec:	2301      	movs	r3, #1
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001df0:	2302      	movs	r3, #2
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001df4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001df8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001dfa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e00:	f107 0318 	add.w	r3, r7, #24
 8001e04:	4618      	mov	r0, r3
 8001e06:	f001 ff41 	bl	8003c8c <HAL_RCC_OscConfig>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001e10:	f000 f926 	bl	8002060 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e14:	230f      	movs	r3, #15
 8001e16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f002 f9ae 	bl	8004190 <HAL_RCC_ClockConfig>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001e3a:	f000 f911 	bl	8002060 <Error_Handler>
  }
}
 8001e3e:	bf00      	nop
 8001e40:	3740      	adds	r7, #64	; 0x40
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <MX_I2C2_Init+0x50>)
 8001e4e:	4a13      	ldr	r2, [pc, #76]	; (8001e9c <MX_I2C2_Init+0x54>)
 8001e50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001e52:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <MX_I2C2_Init+0x50>)
 8001e54:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <MX_I2C2_Init+0x58>)
 8001e56:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <MX_I2C2_Init+0x50>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <MX_I2C2_Init+0x50>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <MX_I2C2_Init+0x50>)
 8001e66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e6a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <MX_I2C2_Init+0x50>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <MX_I2C2_Init+0x50>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e78:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <MX_I2C2_Init+0x50>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <MX_I2C2_Init+0x50>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e84:	4804      	ldr	r0, [pc, #16]	; (8001e98 <MX_I2C2_Init+0x50>)
 8001e86:	f000 ff33 	bl	8002cf0 <HAL_I2C_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e90:	f000 f8e6 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	200001f0 	.word	0x200001f0
 8001e9c:	40005800 	.word	0x40005800
 8001ea0:	000186a0 	.word	0x000186a0

08001ea4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ea8:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001eaa:	4a18      	ldr	r2, [pc, #96]	; (8001f0c <MX_SPI1_Init+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eae:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001eb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001eb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001eb6:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001ed8:	2208      	movs	r2, #8
 8001eda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee8:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001ef0:	220a      	movs	r2, #10
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ef4:	4804      	ldr	r0, [pc, #16]	; (8001f08 <MX_SPI1_Init+0x64>)
 8001ef6:	f002 fae3 	bl	80044c0 <HAL_SPI_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f00:	f000 f8ae 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000244 	.word	0x20000244
 8001f0c:	40013000 	.word	0x40013000

08001f10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f16:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <MX_USART1_UART_Init+0x50>)
 8001f18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f36:	220c      	movs	r2, #12
 8001f38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f46:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f48:	f002 fd20 	bl	800498c <HAL_UART_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f52:	f000 f885 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	2000029c 	.word	0x2000029c
 8001f60:	40013800 	.word	0x40013800

08001f64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6a:	f107 0310 	add.w	r3, r7, #16
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f78:	4b35      	ldr	r3, [pc, #212]	; (8002050 <MX_GPIO_Init+0xec>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	4a34      	ldr	r2, [pc, #208]	; (8002050 <MX_GPIO_Init+0xec>)
 8001f7e:	f043 0320 	orr.w	r3, r3, #32
 8001f82:	6193      	str	r3, [r2, #24]
 8001f84:	4b32      	ldr	r3, [pc, #200]	; (8002050 <MX_GPIO_Init+0xec>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f003 0320 	and.w	r3, r3, #32
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f90:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <MX_GPIO_Init+0xec>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	4a2e      	ldr	r2, [pc, #184]	; (8002050 <MX_GPIO_Init+0xec>)
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	6193      	str	r3, [r2, #24]
 8001f9c:	4b2c      	ldr	r3, [pc, #176]	; (8002050 <MX_GPIO_Init+0xec>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa8:	4b29      	ldr	r3, [pc, #164]	; (8002050 <MX_GPIO_Init+0xec>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	4a28      	ldr	r2, [pc, #160]	; (8002050 <MX_GPIO_Init+0xec>)
 8001fae:	f043 0308 	orr.w	r3, r3, #8
 8001fb2:	6193      	str	r3, [r2, #24]
 8001fb4:	4b26      	ldr	r3, [pc, #152]	; (8002050 <MX_GPIO_Init+0xec>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_RST_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001fc6:	4823      	ldr	r0, [pc, #140]	; (8002054 <MX_GPIO_Init+0xf0>)
 8001fc8:	f000 fe61 	bl	8002c8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_RS_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2103      	movs	r1, #3
 8001fd0:	4821      	ldr	r0, [pc, #132]	; (8002058 <MX_GPIO_Init+0xf4>)
 8001fd2:	f000 fe5c 	bl	8002c8e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TFT_RST_Pin PA8 */
  GPIO_InitStruct.Pin = TFT_RST_Pin|GPIO_PIN_8;
 8001fd6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001fda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	4619      	mov	r1, r3
 8001fee:	4819      	ldr	r0, [pc, #100]	; (8002054 <MX_GPIO_Init+0xf0>)
 8001ff0:	f000 fcb2 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_RS_Pin TFT_CS_Pin */
  GPIO_InitStruct.Pin = TFT_RS_Pin|TFT_CS_Pin;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	2302      	movs	r3, #2
 8002002:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	4619      	mov	r1, r3
 800200a:	4813      	ldr	r0, [pc, #76]	; (8002058 <MX_GPIO_Init+0xf4>)
 800200c:	f000 fca4 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin UP_Pin DOWN_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|UP_Pin|DOWN_Pin;
 8002010:	2370      	movs	r3, #112	; 0x70
 8002012:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <MX_GPIO_Init+0xf8>)
 8002016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002018:	2301      	movs	r3, #1
 800201a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201c:	f107 0310 	add.w	r3, r7, #16
 8002020:	4619      	mov	r1, r3
 8002022:	480d      	ldr	r0, [pc, #52]	; (8002058 <MX_GPIO_Init+0xf4>)
 8002024:	f000 fc98 	bl	8002958 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002028:	2200      	movs	r2, #0
 800202a:	2100      	movs	r1, #0
 800202c:	200a      	movs	r0, #10
 800202e:	f000 fbac 	bl	800278a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002032:	200a      	movs	r0, #10
 8002034:	f000 fbc5 	bl	80027c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002038:	2200      	movs	r2, #0
 800203a:	2100      	movs	r1, #0
 800203c:	2017      	movs	r0, #23
 800203e:	f000 fba4 	bl	800278a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002042:	2017      	movs	r0, #23
 8002044:	f000 fbbd 	bl	80027c2 <HAL_NVIC_EnableIRQ>

}
 8002048:	bf00      	nop
 800204a:	3720      	adds	r7, #32
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	40010800 	.word	0x40010800
 8002058:	40010c00 	.word	0x40010c00
 800205c:	10210000 	.word	0x10210000

08002060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002064:	b672      	cpsid	i
}
 8002066:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002068:	e7fe      	b.n	8002068 <Error_Handler+0x8>
	...

0800206c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <HAL_MspInit+0x5c>)
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	4a14      	ldr	r2, [pc, #80]	; (80020c8 <HAL_MspInit+0x5c>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6193      	str	r3, [r2, #24]
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_MspInit+0x5c>)
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <HAL_MspInit+0x5c>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <HAL_MspInit+0x5c>)
 8002090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002094:	61d3      	str	r3, [r2, #28]
 8002096:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <HAL_MspInit+0x5c>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_MspInit+0x60>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	4a04      	ldr	r2, [pc, #16]	; (80020cc <HAL_MspInit+0x60>)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40010000 	.word	0x40010000

080020d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a16      	ldr	r2, [pc, #88]	; (8002144 <HAL_I2C_MspInit+0x74>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d124      	bne.n	800213a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f0:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_I2C_MspInit+0x78>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <HAL_I2C_MspInit+0x78>)
 80020f6:	f043 0308 	orr.w	r3, r3, #8
 80020fa:	6193      	str	r3, [r2, #24]
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_I2C_MspInit+0x78>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002108:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800210c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800210e:	2312      	movs	r3, #18
 8002110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002112:	2303      	movs	r3, #3
 8002114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002116:	f107 0310 	add.w	r3, r7, #16
 800211a:	4619      	mov	r1, r3
 800211c:	480b      	ldr	r0, [pc, #44]	; (800214c <HAL_I2C_MspInit+0x7c>)
 800211e:	f000 fc1b 	bl	8002958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_I2C_MspInit+0x78>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a08      	ldr	r2, [pc, #32]	; (8002148 <HAL_I2C_MspInit+0x78>)
 8002128:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800212c:	61d3      	str	r3, [r2, #28]
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_I2C_MspInit+0x78>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800213a:	bf00      	nop
 800213c:	3720      	adds	r7, #32
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40005800 	.word	0x40005800
 8002148:	40021000 	.word	0x40021000
 800214c:	40010c00 	.word	0x40010c00

08002150 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a15      	ldr	r2, [pc, #84]	; (80021c0 <HAL_SPI_MspInit+0x70>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d123      	bne.n	80021b8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <HAL_SPI_MspInit+0x74>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <HAL_SPI_MspInit+0x74>)
 8002176:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800217a:	6193      	str	r3, [r2, #24]
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <HAL_SPI_MspInit+0x74>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002188:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <HAL_SPI_MspInit+0x74>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <HAL_SPI_MspInit+0x74>)
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	6193      	str	r3, [r2, #24]
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_SPI_MspInit+0x74>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80021a0:	23a0      	movs	r3, #160	; 0xa0
 80021a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021a8:	2303      	movs	r3, #3
 80021aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ac:	f107 0310 	add.w	r3, r7, #16
 80021b0:	4619      	mov	r1, r3
 80021b2:	4805      	ldr	r0, [pc, #20]	; (80021c8 <HAL_SPI_MspInit+0x78>)
 80021b4:	f000 fbd0 	bl	8002958 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021b8:	bf00      	nop
 80021ba:	3720      	adds	r7, #32
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40013000 	.word	0x40013000
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40010800 	.word	0x40010800

080021cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 0310 	add.w	r3, r7, #16
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a20      	ldr	r2, [pc, #128]	; (8002268 <HAL_UART_MspInit+0x9c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d139      	bne.n	8002260 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021ec:	4b1f      	ldr	r3, [pc, #124]	; (800226c <HAL_UART_MspInit+0xa0>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4a1e      	ldr	r2, [pc, #120]	; (800226c <HAL_UART_MspInit+0xa0>)
 80021f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f6:	6193      	str	r3, [r2, #24]
 80021f8:	4b1c      	ldr	r3, [pc, #112]	; (800226c <HAL_UART_MspInit+0xa0>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002204:	4b19      	ldr	r3, [pc, #100]	; (800226c <HAL_UART_MspInit+0xa0>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	4a18      	ldr	r2, [pc, #96]	; (800226c <HAL_UART_MspInit+0xa0>)
 800220a:	f043 0304 	orr.w	r3, r3, #4
 800220e:	6193      	str	r3, [r2, #24]
 8002210:	4b16      	ldr	r3, [pc, #88]	; (800226c <HAL_UART_MspInit+0xa0>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800221c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002220:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002226:	2303      	movs	r3, #3
 8002228:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222a:	f107 0310 	add.w	r3, r7, #16
 800222e:	4619      	mov	r1, r3
 8002230:	480f      	ldr	r0, [pc, #60]	; (8002270 <HAL_UART_MspInit+0xa4>)
 8002232:	f000 fb91 	bl	8002958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800223a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002244:	f107 0310 	add.w	r3, r7, #16
 8002248:	4619      	mov	r1, r3
 800224a:	4809      	ldr	r0, [pc, #36]	; (8002270 <HAL_UART_MspInit+0xa4>)
 800224c:	f000 fb84 	bl	8002958 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002250:	2200      	movs	r2, #0
 8002252:	2100      	movs	r1, #0
 8002254:	2025      	movs	r0, #37	; 0x25
 8002256:	f000 fa98 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800225a:	2025      	movs	r0, #37	; 0x25
 800225c:	f000 fab1 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002260:	bf00      	nop
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40013800 	.word	0x40013800
 800226c:	40021000 	.word	0x40021000
 8002270:	40010800 	.word	0x40010800

08002274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002278:	e7fe      	b.n	8002278 <NMI_Handler+0x4>

0800227a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227e:	e7fe      	b.n	800227e <HardFault_Handler+0x4>

08002280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <MemManage_Handler+0x4>

08002286 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800228a:	e7fe      	b.n	800228a <BusFault_Handler+0x4>

0800228c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002290:	e7fe      	b.n	8002290 <UsageFault_Handler+0x4>

08002292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr

0800229e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr

080022aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ba:	f000 f94f 	bl	800255c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_Pin);
 80022c6:	2010      	movs	r0, #16
 80022c8:	f000 fcfa 	bl	8002cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_Pin);
 80022d4:	2020      	movs	r0, #32
 80022d6:	f000 fcf3 	bl	8002cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_Pin);
 80022da:	2040      	movs	r0, #64	; 0x40
 80022dc:	f000 fcf0 	bl	8002cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <USART1_IRQHandler+0x10>)
 80022ea:	f002 fc5f 	bl	8004bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	2000029c 	.word	0x2000029c

080022f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return 1;
 80022fc:	2301      	movs	r3, #1
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr

08002306 <_kill>:

int _kill(int pid, int sig)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002310:	f004 fe1c 	bl	8006f4c <__errno>
 8002314:	4603      	mov	r3, r0
 8002316:	2216      	movs	r2, #22
 8002318:	601a      	str	r2, [r3, #0]
  return -1;
 800231a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <_exit>:

void _exit (int status)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800232e:	f04f 31ff 	mov.w	r1, #4294967295
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ffe7 	bl	8002306 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002338:	e7fe      	b.n	8002338 <_exit+0x12>

0800233a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e00a      	b.n	8002362 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800234c:	f3af 8000 	nop.w
 8002350:	4601      	mov	r1, r0
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	60ba      	str	r2, [r7, #8]
 8002358:	b2ca      	uxtb	r2, r1
 800235a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	3301      	adds	r3, #1
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	429a      	cmp	r2, r3
 8002368:	dbf0      	blt.n	800234c <_read+0x12>
  }

  return len;
 800236a:	687b      	ldr	r3, [r7, #4]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	e009      	b.n	800239a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	60ba      	str	r2, [r7, #8]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	3301      	adds	r3, #1
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	429a      	cmp	r2, r3
 80023a0:	dbf1      	blt.n	8002386 <_write+0x12>
  }
  return len;
 80023a2:	687b      	ldr	r3, [r7, #4]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <_close>:

int _close(int file)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023d2:	605a      	str	r2, [r3, #4]
  return 0;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <_isatty>:

int _isatty(int file)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023e8:	2301      	movs	r3, #1
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002414:	4a14      	ldr	r2, [pc, #80]	; (8002468 <_sbrk+0x5c>)
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <_sbrk+0x60>)
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <_sbrk+0x64>)
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <_sbrk+0x68>)
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	429a      	cmp	r2, r3
 800243a:	d207      	bcs.n	800244c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800243c:	f004 fd86 	bl	8006f4c <__errno>
 8002440:	4603      	mov	r3, r0
 8002442:	220c      	movs	r2, #12
 8002444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
 800244a:	e009      	b.n	8002460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <_sbrk+0x64>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <_sbrk+0x64>)
 800245c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245e:	68fb      	ldr	r3, [r7, #12]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20005000 	.word	0x20005000
 800246c:	00000400 	.word	0x00000400
 8002470:	20000428 	.word	0x20000428
 8002474:	20000588 	.word	0x20000588

08002478 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002484:	480c      	ldr	r0, [pc, #48]	; (80024b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002486:	490d      	ldr	r1, [pc, #52]	; (80024bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002488:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800248a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800248c:	e002      	b.n	8002494 <LoopCopyDataInit>

0800248e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800248e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002492:	3304      	adds	r3, #4

08002494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002498:	d3f9      	bcc.n	800248e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800249a:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800249c:	4c0a      	ldr	r4, [pc, #40]	; (80024c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800249e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a0:	e001      	b.n	80024a6 <LoopFillZerobss>

080024a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a4:	3204      	adds	r2, #4

080024a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a8:	d3fb      	bcc.n	80024a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024aa:	f7ff ffe5 	bl	8002478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ae:	f004 fd53 	bl	8006f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024b2:	f7ff f957 	bl	8001764 <main>
  bx lr
 80024b6:	4770      	bx	lr
  ldr r0, =_sdata
 80024b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024bc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80024c0:	08009a50 	.word	0x08009a50
  ldr r2, =_sbss
 80024c4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80024c8:	20000584 	.word	0x20000584

080024cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024cc:	e7fe      	b.n	80024cc <ADC1_2_IRQHandler>
	...

080024d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <HAL_Init+0x28>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a07      	ldr	r2, [pc, #28]	; (80024f8 <HAL_Init+0x28>)
 80024da:	f043 0310 	orr.w	r3, r3, #16
 80024de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e0:	2003      	movs	r0, #3
 80024e2:	f000 f947 	bl	8002774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024e6:	200f      	movs	r0, #15
 80024e8:	f000 f808 	bl	80024fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024ec:	f7ff fdbe 	bl	800206c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40022000 	.word	0x40022000

080024fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_InitTick+0x54>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_InitTick+0x58>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4619      	mov	r1, r3
 800250e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002512:	fbb3 f3f1 	udiv	r3, r3, r1
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f95f 	bl	80027de <HAL_SYSTICK_Config>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e00e      	b.n	8002548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b0f      	cmp	r3, #15
 800252e:	d80a      	bhi.n	8002546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002530:	2200      	movs	r2, #0
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
 8002538:	f000 f927 	bl	800278a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800253c:	4a06      	ldr	r2, [pc, #24]	; (8002558 <HAL_InitTick+0x5c>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e000      	b.n	8002548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000000 	.word	0x20000000
 8002554:	20000008 	.word	0x20000008
 8002558:	20000004 	.word	0x20000004

0800255c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_IncTick+0x1c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_IncTick+0x20>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4413      	add	r3, r2
 800256c:	4a03      	ldr	r2, [pc, #12]	; (800257c <HAL_IncTick+0x20>)
 800256e:	6013      	str	r3, [r2, #0]
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	20000008 	.word	0x20000008
 800257c:	2000042c 	.word	0x2000042c

08002580 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return uwTick;
 8002584:	4b02      	ldr	r3, [pc, #8]	; (8002590 <HAL_GetTick+0x10>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	2000042c 	.word	0x2000042c

08002594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800259c:	f7ff fff0 	bl	8002580 <HAL_GetTick>
 80025a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ac:	d005      	beq.n	80025ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <HAL_Delay+0x44>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4413      	add	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ba:	bf00      	nop
 80025bc:	f7ff ffe0 	bl	8002580 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d8f7      	bhi.n	80025bc <HAL_Delay+0x28>
  {
  }
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000008 	.word	0x20000008

080025dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f8:	4013      	ands	r3, r2
 80025fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260e:	4a04      	ldr	r2, [pc, #16]	; (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	60d3      	str	r3, [r2, #12]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002628:	4b04      	ldr	r3, [pc, #16]	; (800263c <__NVIC_GetPriorityGrouping+0x18>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	0a1b      	lsrs	r3, r3, #8
 800262e:	f003 0307 	and.w	r3, r3, #7
}
 8002632:	4618      	mov	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	2b00      	cmp	r3, #0
 8002650:	db0b      	blt.n	800266a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	f003 021f 	and.w	r2, r3, #31
 8002658:	4906      	ldr	r1, [pc, #24]	; (8002674 <__NVIC_EnableIRQ+0x34>)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2001      	movs	r0, #1
 8002662:	fa00 f202 	lsl.w	r2, r0, r2
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	e000e100 	.word	0xe000e100

08002678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	db0a      	blt.n	80026a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	490c      	ldr	r1, [pc, #48]	; (80026c4 <__NVIC_SetPriority+0x4c>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	440b      	add	r3, r1
 800269c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a0:	e00a      	b.n	80026b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4908      	ldr	r1, [pc, #32]	; (80026c8 <__NVIC_SetPriority+0x50>)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3b04      	subs	r3, #4
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	440b      	add	r3, r1
 80026b6:	761a      	strb	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000e100 	.word	0xe000e100
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	; 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f1c3 0307 	rsb	r3, r3, #7
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	bf28      	it	cs
 80026ea:	2304      	movcs	r3, #4
 80026ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d902      	bls.n	80026fc <NVIC_EncodePriority+0x30>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3b03      	subs	r3, #3
 80026fa:	e000      	b.n	80026fe <NVIC_EncodePriority+0x32>
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	f04f 32ff 	mov.w	r2, #4294967295
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	401a      	ands	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002714:	f04f 31ff 	mov.w	r1, #4294967295
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43d9      	mvns	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	4313      	orrs	r3, r2
         );
}
 8002726:	4618      	mov	r0, r3
 8002728:	3724      	adds	r7, #36	; 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002740:	d301      	bcc.n	8002746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002742:	2301      	movs	r3, #1
 8002744:	e00f      	b.n	8002766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002746:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <SysTick_Config+0x40>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274e:	210f      	movs	r1, #15
 8002750:	f04f 30ff 	mov.w	r0, #4294967295
 8002754:	f7ff ff90 	bl	8002678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <SysTick_Config+0x40>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275e:	4b04      	ldr	r3, [pc, #16]	; (8002770 <SysTick_Config+0x40>)
 8002760:	2207      	movs	r2, #7
 8002762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	e000e010 	.word	0xe000e010

08002774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ff2d 	bl	80025dc <__NVIC_SetPriorityGrouping>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800279c:	f7ff ff42 	bl	8002624 <__NVIC_GetPriorityGrouping>
 80027a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	6978      	ldr	r0, [r7, #20]
 80027a8:	f7ff ff90 	bl	80026cc <NVIC_EncodePriority>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff5f 	bl	8002678 <__NVIC_SetPriority>
}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff35 	bl	8002640 <__NVIC_EnableIRQ>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ffa2 	bl	8002730 <SysTick_Config>
 80027ec:	4603      	mov	r3, r0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b085      	sub	sp, #20
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002808:	2b02      	cmp	r3, #2
 800280a:	d008      	beq.n	800281e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2204      	movs	r2, #4
 8002810:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e020      	b.n	8002860 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 020e 	bic.w	r2, r2, #14
 800282c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0201 	bic.w	r2, r2, #1
 800283c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002846:	2101      	movs	r1, #1
 8002848:	fa01 f202 	lsl.w	r2, r1, r2
 800284c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800285e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
	...

0800286c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800287e:	2b02      	cmp	r3, #2
 8002880:	d005      	beq.n	800288e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2204      	movs	r2, #4
 8002886:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
 800288c:	e051      	b.n	8002932 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 020e 	bic.w	r2, r2, #14
 800289c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0201 	bic.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a22      	ldr	r2, [pc, #136]	; (800293c <HAL_DMA_Abort_IT+0xd0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d029      	beq.n	800290c <HAL_DMA_Abort_IT+0xa0>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a20      	ldr	r2, [pc, #128]	; (8002940 <HAL_DMA_Abort_IT+0xd4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d022      	beq.n	8002908 <HAL_DMA_Abort_IT+0x9c>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1f      	ldr	r2, [pc, #124]	; (8002944 <HAL_DMA_Abort_IT+0xd8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d01a      	beq.n	8002902 <HAL_DMA_Abort_IT+0x96>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1d      	ldr	r2, [pc, #116]	; (8002948 <HAL_DMA_Abort_IT+0xdc>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d012      	beq.n	80028fc <HAL_DMA_Abort_IT+0x90>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1c      	ldr	r2, [pc, #112]	; (800294c <HAL_DMA_Abort_IT+0xe0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00a      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x8a>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1a      	ldr	r2, [pc, #104]	; (8002950 <HAL_DMA_Abort_IT+0xe4>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d102      	bne.n	80028f0 <HAL_DMA_Abort_IT+0x84>
 80028ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028ee:	e00e      	b.n	800290e <HAL_DMA_Abort_IT+0xa2>
 80028f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028f4:	e00b      	b.n	800290e <HAL_DMA_Abort_IT+0xa2>
 80028f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028fa:	e008      	b.n	800290e <HAL_DMA_Abort_IT+0xa2>
 80028fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002900:	e005      	b.n	800290e <HAL_DMA_Abort_IT+0xa2>
 8002902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002906:	e002      	b.n	800290e <HAL_DMA_Abort_IT+0xa2>
 8002908:	2310      	movs	r3, #16
 800290a:	e000      	b.n	800290e <HAL_DMA_Abort_IT+0xa2>
 800290c:	2301      	movs	r3, #1
 800290e:	4a11      	ldr	r2, [pc, #68]	; (8002954 <HAL_DMA_Abort_IT+0xe8>)
 8002910:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	4798      	blx	r3
    } 
  }
  return status;
 8002932:	7bfb      	ldrb	r3, [r7, #15]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40020008 	.word	0x40020008
 8002940:	4002001c 	.word	0x4002001c
 8002944:	40020030 	.word	0x40020030
 8002948:	40020044 	.word	0x40020044
 800294c:	40020058 	.word	0x40020058
 8002950:	4002006c 	.word	0x4002006c
 8002954:	40020000 	.word	0x40020000

08002958 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002958:	b480      	push	{r7}
 800295a:	b08b      	sub	sp, #44	; 0x2c
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002966:	2300      	movs	r3, #0
 8002968:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800296a:	e169      	b.n	8002c40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800296c:	2201      	movs	r2, #1
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	429a      	cmp	r2, r3
 8002986:	f040 8158 	bne.w	8002c3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4a9a      	ldr	r2, [pc, #616]	; (8002bf8 <HAL_GPIO_Init+0x2a0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d05e      	beq.n	8002a52 <HAL_GPIO_Init+0xfa>
 8002994:	4a98      	ldr	r2, [pc, #608]	; (8002bf8 <HAL_GPIO_Init+0x2a0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d875      	bhi.n	8002a86 <HAL_GPIO_Init+0x12e>
 800299a:	4a98      	ldr	r2, [pc, #608]	; (8002bfc <HAL_GPIO_Init+0x2a4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d058      	beq.n	8002a52 <HAL_GPIO_Init+0xfa>
 80029a0:	4a96      	ldr	r2, [pc, #600]	; (8002bfc <HAL_GPIO_Init+0x2a4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d86f      	bhi.n	8002a86 <HAL_GPIO_Init+0x12e>
 80029a6:	4a96      	ldr	r2, [pc, #600]	; (8002c00 <HAL_GPIO_Init+0x2a8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d052      	beq.n	8002a52 <HAL_GPIO_Init+0xfa>
 80029ac:	4a94      	ldr	r2, [pc, #592]	; (8002c00 <HAL_GPIO_Init+0x2a8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d869      	bhi.n	8002a86 <HAL_GPIO_Init+0x12e>
 80029b2:	4a94      	ldr	r2, [pc, #592]	; (8002c04 <HAL_GPIO_Init+0x2ac>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d04c      	beq.n	8002a52 <HAL_GPIO_Init+0xfa>
 80029b8:	4a92      	ldr	r2, [pc, #584]	; (8002c04 <HAL_GPIO_Init+0x2ac>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d863      	bhi.n	8002a86 <HAL_GPIO_Init+0x12e>
 80029be:	4a92      	ldr	r2, [pc, #584]	; (8002c08 <HAL_GPIO_Init+0x2b0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d046      	beq.n	8002a52 <HAL_GPIO_Init+0xfa>
 80029c4:	4a90      	ldr	r2, [pc, #576]	; (8002c08 <HAL_GPIO_Init+0x2b0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d85d      	bhi.n	8002a86 <HAL_GPIO_Init+0x12e>
 80029ca:	2b12      	cmp	r3, #18
 80029cc:	d82a      	bhi.n	8002a24 <HAL_GPIO_Init+0xcc>
 80029ce:	2b12      	cmp	r3, #18
 80029d0:	d859      	bhi.n	8002a86 <HAL_GPIO_Init+0x12e>
 80029d2:	a201      	add	r2, pc, #4	; (adr r2, 80029d8 <HAL_GPIO_Init+0x80>)
 80029d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d8:	08002a53 	.word	0x08002a53
 80029dc:	08002a2d 	.word	0x08002a2d
 80029e0:	08002a3f 	.word	0x08002a3f
 80029e4:	08002a81 	.word	0x08002a81
 80029e8:	08002a87 	.word	0x08002a87
 80029ec:	08002a87 	.word	0x08002a87
 80029f0:	08002a87 	.word	0x08002a87
 80029f4:	08002a87 	.word	0x08002a87
 80029f8:	08002a87 	.word	0x08002a87
 80029fc:	08002a87 	.word	0x08002a87
 8002a00:	08002a87 	.word	0x08002a87
 8002a04:	08002a87 	.word	0x08002a87
 8002a08:	08002a87 	.word	0x08002a87
 8002a0c:	08002a87 	.word	0x08002a87
 8002a10:	08002a87 	.word	0x08002a87
 8002a14:	08002a87 	.word	0x08002a87
 8002a18:	08002a87 	.word	0x08002a87
 8002a1c:	08002a35 	.word	0x08002a35
 8002a20:	08002a49 	.word	0x08002a49
 8002a24:	4a79      	ldr	r2, [pc, #484]	; (8002c0c <HAL_GPIO_Init+0x2b4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d013      	beq.n	8002a52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a2a:	e02c      	b.n	8002a86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	623b      	str	r3, [r7, #32]
          break;
 8002a32:	e029      	b.n	8002a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	623b      	str	r3, [r7, #32]
          break;
 8002a3c:	e024      	b.n	8002a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	3308      	adds	r3, #8
 8002a44:	623b      	str	r3, [r7, #32]
          break;
 8002a46:	e01f      	b.n	8002a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	330c      	adds	r3, #12
 8002a4e:	623b      	str	r3, [r7, #32]
          break;
 8002a50:	e01a      	b.n	8002a88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d102      	bne.n	8002a60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	623b      	str	r3, [r7, #32]
          break;
 8002a5e:	e013      	b.n	8002a88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d105      	bne.n	8002a74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a68:	2308      	movs	r3, #8
 8002a6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	611a      	str	r2, [r3, #16]
          break;
 8002a72:	e009      	b.n	8002a88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a74:	2308      	movs	r3, #8
 8002a76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	615a      	str	r2, [r3, #20]
          break;
 8002a7e:	e003      	b.n	8002a88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a80:	2300      	movs	r3, #0
 8002a82:	623b      	str	r3, [r7, #32]
          break;
 8002a84:	e000      	b.n	8002a88 <HAL_GPIO_Init+0x130>
          break;
 8002a86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2bff      	cmp	r3, #255	; 0xff
 8002a8c:	d801      	bhi.n	8002a92 <HAL_GPIO_Init+0x13a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	e001      	b.n	8002a96 <HAL_GPIO_Init+0x13e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3304      	adds	r3, #4
 8002a96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2bff      	cmp	r3, #255	; 0xff
 8002a9c:	d802      	bhi.n	8002aa4 <HAL_GPIO_Init+0x14c>
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	e002      	b.n	8002aaa <HAL_GPIO_Init+0x152>
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	3b08      	subs	r3, #8
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	210f      	movs	r1, #15
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	401a      	ands	r2, r3
 8002abc:	6a39      	ldr	r1, [r7, #32]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 80b1 	beq.w	8002c3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ad8:	4b4d      	ldr	r3, [pc, #308]	; (8002c10 <HAL_GPIO_Init+0x2b8>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	4a4c      	ldr	r2, [pc, #304]	; (8002c10 <HAL_GPIO_Init+0x2b8>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6193      	str	r3, [r2, #24]
 8002ae4:	4b4a      	ldr	r3, [pc, #296]	; (8002c10 <HAL_GPIO_Init+0x2b8>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002af0:	4a48      	ldr	r2, [pc, #288]	; (8002c14 <HAL_GPIO_Init+0x2bc>)
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	089b      	lsrs	r3, r3, #2
 8002af6:	3302      	adds	r3, #2
 8002af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	220f      	movs	r2, #15
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4013      	ands	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a40      	ldr	r2, [pc, #256]	; (8002c18 <HAL_GPIO_Init+0x2c0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d013      	beq.n	8002b44 <HAL_GPIO_Init+0x1ec>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a3f      	ldr	r2, [pc, #252]	; (8002c1c <HAL_GPIO_Init+0x2c4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00d      	beq.n	8002b40 <HAL_GPIO_Init+0x1e8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a3e      	ldr	r2, [pc, #248]	; (8002c20 <HAL_GPIO_Init+0x2c8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d007      	beq.n	8002b3c <HAL_GPIO_Init+0x1e4>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a3d      	ldr	r2, [pc, #244]	; (8002c24 <HAL_GPIO_Init+0x2cc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d101      	bne.n	8002b38 <HAL_GPIO_Init+0x1e0>
 8002b34:	2303      	movs	r3, #3
 8002b36:	e006      	b.n	8002b46 <HAL_GPIO_Init+0x1ee>
 8002b38:	2304      	movs	r3, #4
 8002b3a:	e004      	b.n	8002b46 <HAL_GPIO_Init+0x1ee>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e002      	b.n	8002b46 <HAL_GPIO_Init+0x1ee>
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <HAL_GPIO_Init+0x1ee>
 8002b44:	2300      	movs	r3, #0
 8002b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b48:	f002 0203 	and.w	r2, r2, #3
 8002b4c:	0092      	lsls	r2, r2, #2
 8002b4e:	4093      	lsls	r3, r2
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b56:	492f      	ldr	r1, [pc, #188]	; (8002c14 <HAL_GPIO_Init+0x2bc>)
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	089b      	lsrs	r3, r3, #2
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d006      	beq.n	8002b7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b70:	4b2d      	ldr	r3, [pc, #180]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	492c      	ldr	r1, [pc, #176]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]
 8002b7c:	e006      	b.n	8002b8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b7e:	4b2a      	ldr	r3, [pc, #168]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	4928      	ldr	r1, [pc, #160]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d006      	beq.n	8002ba6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b98:	4b23      	ldr	r3, [pc, #140]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	4922      	ldr	r1, [pc, #136]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]
 8002ba4:	e006      	b.n	8002bb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ba6:	4b20      	ldr	r3, [pc, #128]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	491e      	ldr	r1, [pc, #120]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d006      	beq.n	8002bce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bc0:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	4918      	ldr	r1, [pc, #96]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	608b      	str	r3, [r1, #8]
 8002bcc:	e006      	b.n	8002bdc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bce:	4b16      	ldr	r3, [pc, #88]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	4914      	ldr	r1, [pc, #80]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d021      	beq.n	8002c2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002be8:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	490e      	ldr	r1, [pc, #56]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60cb      	str	r3, [r1, #12]
 8002bf4:	e021      	b.n	8002c3a <HAL_GPIO_Init+0x2e2>
 8002bf6:	bf00      	nop
 8002bf8:	10320000 	.word	0x10320000
 8002bfc:	10310000 	.word	0x10310000
 8002c00:	10220000 	.word	0x10220000
 8002c04:	10210000 	.word	0x10210000
 8002c08:	10120000 	.word	0x10120000
 8002c0c:	10110000 	.word	0x10110000
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40010000 	.word	0x40010000
 8002c18:	40010800 	.word	0x40010800
 8002c1c:	40010c00 	.word	0x40010c00
 8002c20:	40011000 	.word	0x40011000
 8002c24:	40011400 	.word	0x40011400
 8002c28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	4909      	ldr	r1, [pc, #36]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f47f ae8e 	bne.w	800296c <HAL_GPIO_Init+0x14>
  }
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	372c      	adds	r7, #44	; 0x2c
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr
 8002c5c:	40010400 	.word	0x40010400

08002c60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	887b      	ldrh	r3, [r7, #2]
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	73fb      	strb	r3, [r7, #15]
 8002c7c:	e001      	b.n	8002c82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr

08002c8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	460b      	mov	r3, r1
 8002c98:	807b      	strh	r3, [r7, #2]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c9e:	787b      	ldrb	r3, [r7, #1]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ca4:	887a      	ldrh	r2, [r7, #2]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002caa:	e003      	b.n	8002cb4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cac:	887b      	ldrh	r3, [r7, #2]
 8002cae:	041a      	lsls	r2, r3, #16
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	611a      	str	r2, [r3, #16]
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
	...

08002cc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002cca:	4b08      	ldr	r3, [pc, #32]	; (8002cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d006      	beq.n	8002ce4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cd6:	4a05      	ldr	r2, [pc, #20]	; (8002cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cd8:	88fb      	ldrh	r3, [r7, #6]
 8002cda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cdc:	88fb      	ldrh	r3, [r7, #6]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe f8a4 	bl	8000e2c <HAL_GPIO_EXTI_Callback>
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40010400 	.word	0x40010400

08002cf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e12b      	b.n	8002f5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff f9da 	bl	80020d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2224      	movs	r2, #36	; 0x24
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d54:	f001 fb6e 	bl	8004434 <HAL_RCC_GetPCLK1Freq>
 8002d58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4a81      	ldr	r2, [pc, #516]	; (8002f64 <HAL_I2C_Init+0x274>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d807      	bhi.n	8002d74 <HAL_I2C_Init+0x84>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a80      	ldr	r2, [pc, #512]	; (8002f68 <HAL_I2C_Init+0x278>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	bf94      	ite	ls
 8002d6c:	2301      	movls	r3, #1
 8002d6e:	2300      	movhi	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e006      	b.n	8002d82 <HAL_I2C_Init+0x92>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4a7d      	ldr	r2, [pc, #500]	; (8002f6c <HAL_I2C_Init+0x27c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	bf94      	ite	ls
 8002d7c:	2301      	movls	r3, #1
 8002d7e:	2300      	movhi	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e0e7      	b.n	8002f5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4a78      	ldr	r2, [pc, #480]	; (8002f70 <HAL_I2C_Init+0x280>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	0c9b      	lsrs	r3, r3, #18
 8002d94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4a6a      	ldr	r2, [pc, #424]	; (8002f64 <HAL_I2C_Init+0x274>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d802      	bhi.n	8002dc4 <HAL_I2C_Init+0xd4>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	e009      	b.n	8002dd8 <HAL_I2C_Init+0xe8>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dca:	fb02 f303 	mul.w	r3, r2, r3
 8002dce:	4a69      	ldr	r2, [pc, #420]	; (8002f74 <HAL_I2C_Init+0x284>)
 8002dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd4:	099b      	lsrs	r3, r3, #6
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	495c      	ldr	r1, [pc, #368]	; (8002f64 <HAL_I2C_Init+0x274>)
 8002df4:	428b      	cmp	r3, r1
 8002df6:	d819      	bhi.n	8002e2c <HAL_I2C_Init+0x13c>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	1e59      	subs	r1, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e06:	1c59      	adds	r1, r3, #1
 8002e08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e0c:	400b      	ands	r3, r1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_I2C_Init+0x138>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1e59      	subs	r1, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e20:	3301      	adds	r3, #1
 8002e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e26:	e051      	b.n	8002ecc <HAL_I2C_Init+0x1dc>
 8002e28:	2304      	movs	r3, #4
 8002e2a:	e04f      	b.n	8002ecc <HAL_I2C_Init+0x1dc>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d111      	bne.n	8002e58 <HAL_I2C_Init+0x168>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1e58      	subs	r0, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	440b      	add	r3, r1
 8002e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e46:	3301      	adds	r3, #1
 8002e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	e012      	b.n	8002e7e <HAL_I2C_Init+0x18e>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1e58      	subs	r0, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6859      	ldr	r1, [r3, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	0099      	lsls	r1, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e6e:	3301      	adds	r3, #1
 8002e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf0c      	ite	eq
 8002e78:	2301      	moveq	r3, #1
 8002e7a:	2300      	movne	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_I2C_Init+0x196>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e022      	b.n	8002ecc <HAL_I2C_Init+0x1dc>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10e      	bne.n	8002eac <HAL_I2C_Init+0x1bc>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	1e58      	subs	r0, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6859      	ldr	r1, [r3, #4]
 8002e96:	460b      	mov	r3, r1
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	440b      	add	r3, r1
 8002e9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eaa:	e00f      	b.n	8002ecc <HAL_I2C_Init+0x1dc>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1e58      	subs	r0, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6859      	ldr	r1, [r3, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	0099      	lsls	r1, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	6809      	ldr	r1, [r1, #0]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69da      	ldr	r2, [r3, #28]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002efa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6911      	ldr	r1, [r2, #16]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68d2      	ldr	r2, [r2, #12]
 8002f06:	4311      	orrs	r1, r2
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	000186a0 	.word	0x000186a0
 8002f68:	001e847f 	.word	0x001e847f
 8002f6c:	003d08ff 	.word	0x003d08ff
 8002f70:	431bde83 	.word	0x431bde83
 8002f74:	10624dd3 	.word	0x10624dd3

08002f78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	461a      	mov	r2, r3
 8002f84:	460b      	mov	r3, r1
 8002f86:	817b      	strh	r3, [r7, #10]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f8c:	f7ff faf8 	bl	8002580 <HAL_GetTick>
 8002f90:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	f040 80e0 	bne.w	8003160 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2319      	movs	r3, #25
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4970      	ldr	r1, [pc, #448]	; (800316c <HAL_I2C_Master_Transmit+0x1f4>)
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fc92 	bl	80038d4 <I2C_WaitOnFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e0d3      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_I2C_Master_Transmit+0x50>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e0cc      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1ea>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d007      	beq.n	8002fee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ffc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2221      	movs	r2, #33	; 0x21
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2210      	movs	r2, #16
 800300a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	893a      	ldrh	r2, [r7, #8]
 800301e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4a50      	ldr	r2, [pc, #320]	; (8003170 <HAL_I2C_Master_Transmit+0x1f8>)
 800302e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003030:	8979      	ldrh	r1, [r7, #10]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	6a3a      	ldr	r2, [r7, #32]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fafc 	bl	8003634 <I2C_MasterRequestWrite>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e08d      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800305c:	e066      	b.n	800312c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	6a39      	ldr	r1, [r7, #32]
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 fd0c 	bl	8003a80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00d      	beq.n	800308a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	2b04      	cmp	r3, #4
 8003074:	d107      	bne.n	8003086 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003084:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e06b      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	781a      	ldrb	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b2:	3b01      	subs	r3, #1
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d11b      	bne.n	8003100 <HAL_I2C_Master_Transmit+0x188>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d017      	beq.n	8003100 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	781a      	ldrb	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	6a39      	ldr	r1, [r7, #32]
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 fcfc 	bl	8003b02 <I2C_WaitOnBTFFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00d      	beq.n	800312c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	2b04      	cmp	r3, #4
 8003116:	d107      	bne.n	8003128 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003126:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e01a      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003130:	2b00      	cmp	r3, #0
 8003132:	d194      	bne.n	800305e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	e000      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003160:	2302      	movs	r3, #2
  }
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	00100002 	.word	0x00100002
 8003170:	ffff0000 	.word	0xffff0000

08003174 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08c      	sub	sp, #48	; 0x30
 8003178:	af02      	add	r7, sp, #8
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	461a      	mov	r2, r3
 8003180:	460b      	mov	r3, r1
 8003182:	817b      	strh	r3, [r7, #10]
 8003184:	4613      	mov	r3, r2
 8003186:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800318c:	f7ff f9f8 	bl	8002580 <HAL_GetTick>
 8003190:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b20      	cmp	r3, #32
 800319c:	f040 823f 	bne.w	800361e <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2319      	movs	r3, #25
 80031a6:	2201      	movs	r2, #1
 80031a8:	497f      	ldr	r1, [pc, #508]	; (80033a8 <HAL_I2C_Master_Receive+0x234>)
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 fb92 	bl	80038d4 <I2C_WaitOnFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80031b6:	2302      	movs	r3, #2
 80031b8:	e232      	b.n	8003620 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_I2C_Master_Receive+0x54>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e22b      	b.n	8003620 <HAL_I2C_Master_Receive+0x4ac>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d007      	beq.n	80031ee <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0201 	orr.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2222      	movs	r2, #34	; 0x22
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2210      	movs	r2, #16
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	893a      	ldrh	r2, [r7, #8]
 800321e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a5f      	ldr	r2, [pc, #380]	; (80033ac <HAL_I2C_Master_Receive+0x238>)
 800322e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003230:	8979      	ldrh	r1, [r7, #10]
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 fa7e 	bl	8003738 <I2C_MasterRequestRead>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e1ec      	b.n	8003620 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324a:	2b00      	cmp	r3, #0
 800324c:	d113      	bne.n	8003276 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	e1c0      	b.n	80035f8 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327a:	2b01      	cmp	r3, #1
 800327c:	d11e      	bne.n	80032bc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800328e:	b672      	cpsid	i
}
 8003290:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003292:	2300      	movs	r3, #0
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80032b8:	b662      	cpsie	i
}
 80032ba:	e035      	b.n	8003328 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d11e      	bne.n	8003302 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032d4:	b672      	cpsid	i
}
 80032d6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80032fe:	b662      	cpsie	i
}
 8003300:	e012      	b.n	8003328 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003310:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003328:	e166      	b.n	80035f8 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332e:	2b03      	cmp	r3, #3
 8003330:	f200 811f 	bhi.w	8003572 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003338:	2b01      	cmp	r3, #1
 800333a:	d123      	bne.n	8003384 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800333c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 fc1f 	bl	8003b84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e167      	b.n	8003620 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003378:	b29b      	uxth	r3, r3
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003382:	e139      	b.n	80035f8 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003388:	2b02      	cmp	r3, #2
 800338a:	d152      	bne.n	8003432 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	2200      	movs	r2, #0
 8003394:	4906      	ldr	r1, [pc, #24]	; (80033b0 <HAL_I2C_Master_Receive+0x23c>)
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 fa9c 	bl	80038d4 <I2C_WaitOnFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d008      	beq.n	80033b4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e13c      	b.n	8003620 <HAL_I2C_Master_Receive+0x4ac>
 80033a6:	bf00      	nop
 80033a8:	00100002 	.word	0x00100002
 80033ac:	ffff0000 	.word	0xffff0000
 80033b0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80033b4:	b672      	cpsid	i
}
 80033b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80033fa:	b662      	cpsie	i
}
 80033fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003430:	e0e2      	b.n	80035f8 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	2200      	movs	r2, #0
 800343a:	497b      	ldr	r1, [pc, #492]	; (8003628 <HAL_I2C_Master_Receive+0x4b4>)
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 fa49 	bl	80038d4 <I2C_WaitOnFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0e9      	b.n	8003620 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800345a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800345c:	b672      	cpsid	i
}
 800345e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003492:	4b66      	ldr	r3, [pc, #408]	; (800362c <HAL_I2C_Master_Receive+0x4b8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	08db      	lsrs	r3, r3, #3
 8003498:	4a65      	ldr	r2, [pc, #404]	; (8003630 <HAL_I2C_Master_Receive+0x4bc>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	0a1a      	lsrs	r2, r3, #8
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	00da      	lsls	r2, r3, #3
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d118      	bne.n	80034ea <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f043 0220 	orr.w	r2, r3, #32
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80034da:	b662      	cpsie	i
}
 80034dc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e09a      	b.n	8003620 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d1d9      	bne.n	80034ac <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003506:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800353a:	b662      	cpsie	i
}
 800353c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003570:	e042      	b.n	80035f8 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003574:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fb04 	bl	8003b84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e04c      	b.n	8003620 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d118      	bne.n	80035f8 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f47f ae94 	bne.w	800332a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	e000      	b.n	8003620 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800361e:	2302      	movs	r3, #2
  }
}
 8003620:	4618      	mov	r0, r3
 8003622:	3728      	adds	r7, #40	; 0x28
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	00010004 	.word	0x00010004
 800362c:	20000000 	.word	0x20000000
 8003630:	14f8b589 	.word	0x14f8b589

08003634 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af02      	add	r7, sp, #8
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	460b      	mov	r3, r1
 8003642:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b08      	cmp	r3, #8
 800364e:	d006      	beq.n	800365e <I2C_MasterRequestWrite+0x2a>
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d003      	beq.n	800365e <I2C_MasterRequestWrite+0x2a>
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800365c:	d108      	bne.n	8003670 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	e00b      	b.n	8003688 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003674:	2b12      	cmp	r3, #18
 8003676:	d107      	bne.n	8003688 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003686:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f91d 	bl	80038d4 <I2C_WaitOnFlagUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00d      	beq.n	80036bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ae:	d103      	bne.n	80036b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e035      	b.n	8003728 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036c4:	d108      	bne.n	80036d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036c6:	897b      	ldrh	r3, [r7, #10]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036d4:	611a      	str	r2, [r3, #16]
 80036d6:	e01b      	b.n	8003710 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036d8:	897b      	ldrh	r3, [r7, #10]
 80036da:	11db      	asrs	r3, r3, #7
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	f003 0306 	and.w	r3, r3, #6
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	f063 030f 	orn	r3, r3, #15
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	490e      	ldr	r1, [pc, #56]	; (8003730 <I2C_MasterRequestWrite+0xfc>)
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f943 	bl	8003982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e010      	b.n	8003728 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003706:	897b      	ldrh	r3, [r7, #10]
 8003708:	b2da      	uxtb	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4907      	ldr	r1, [pc, #28]	; (8003734 <I2C_MasterRequestWrite+0x100>)
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f933 	bl	8003982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	00010008 	.word	0x00010008
 8003734:	00010002 	.word	0x00010002

08003738 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	460b      	mov	r3, r1
 8003746:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800375c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2b08      	cmp	r3, #8
 8003762:	d006      	beq.n	8003772 <I2C_MasterRequestRead+0x3a>
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d003      	beq.n	8003772 <I2C_MasterRequestRead+0x3a>
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003770:	d108      	bne.n	8003784 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e00b      	b.n	800379c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	2b11      	cmp	r3, #17
 800378a:	d107      	bne.n	800379c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800379a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f893 	bl	80038d4 <I2C_WaitOnFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00d      	beq.n	80037d0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c2:	d103      	bne.n	80037cc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e079      	b.n	80038c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d8:	d108      	bne.n	80037ec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037da:	897b      	ldrh	r3, [r7, #10]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	611a      	str	r2, [r3, #16]
 80037ea:	e05f      	b.n	80038ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037ec:	897b      	ldrh	r3, [r7, #10]
 80037ee:	11db      	asrs	r3, r3, #7
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f003 0306 	and.w	r3, r3, #6
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f063 030f 	orn	r3, r3, #15
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	4930      	ldr	r1, [pc, #192]	; (80038cc <I2C_MasterRequestRead+0x194>)
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f8b9 	bl	8003982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e054      	b.n	80038c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800381a:	897b      	ldrh	r3, [r7, #10]
 800381c:	b2da      	uxtb	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	4929      	ldr	r1, [pc, #164]	; (80038d0 <I2C_MasterRequestRead+0x198>)
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f8a9 	bl	8003982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e044      	b.n	80038c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800385e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 f831 	bl	80038d4 <I2C_WaitOnFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00d      	beq.n	8003894 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003886:	d103      	bne.n	8003890 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800388e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e017      	b.n	80038c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003894:	897b      	ldrh	r3, [r7, #10]
 8003896:	11db      	asrs	r3, r3, #7
 8003898:	b2db      	uxtb	r3, r3
 800389a:	f003 0306 	and.w	r3, r3, #6
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f063 030e 	orn	r3, r3, #14
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4907      	ldr	r1, [pc, #28]	; (80038d0 <I2C_MasterRequestRead+0x198>)
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f865 	bl	8003982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	00010008 	.word	0x00010008
 80038d0:	00010002 	.word	0x00010002

080038d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	603b      	str	r3, [r7, #0]
 80038e0:	4613      	mov	r3, r2
 80038e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038e4:	e025      	b.n	8003932 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ec:	d021      	beq.n	8003932 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ee:	f7fe fe47 	bl	8002580 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d302      	bcc.n	8003904 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d116      	bne.n	8003932 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f043 0220 	orr.w	r2, r3, #32
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e023      	b.n	800397a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	0c1b      	lsrs	r3, r3, #16
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	d10d      	bne.n	8003958 <I2C_WaitOnFlagUntilTimeout+0x84>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	43da      	mvns	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4013      	ands	r3, r2
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	bf0c      	ite	eq
 800394e:	2301      	moveq	r3, #1
 8003950:	2300      	movne	r3, #0
 8003952:	b2db      	uxtb	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	e00c      	b.n	8003972 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	43da      	mvns	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4013      	ands	r3, r2
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	bf0c      	ite	eq
 800396a:	2301      	moveq	r3, #1
 800396c:	2300      	movne	r3, #0
 800396e:	b2db      	uxtb	r3, r3
 8003970:	461a      	mov	r2, r3
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	429a      	cmp	r2, r3
 8003976:	d0b6      	beq.n	80038e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003990:	e051      	b.n	8003a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a0:	d123      	bne.n	80039ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f043 0204 	orr.w	r2, r3, #4
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e046      	b.n	8003a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f0:	d021      	beq.n	8003a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f2:	f7fe fdc5 	bl	8002580 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d302      	bcc.n	8003a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d116      	bne.n	8003a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f043 0220 	orr.w	r2, r3, #32
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e020      	b.n	8003a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	0c1b      	lsrs	r3, r3, #16
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d10c      	bne.n	8003a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	43da      	mvns	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	bf14      	ite	ne
 8003a52:	2301      	movne	r3, #1
 8003a54:	2300      	moveq	r3, #0
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	e00b      	b.n	8003a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	43da      	mvns	r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	4013      	ands	r3, r2
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	bf14      	ite	ne
 8003a6c:	2301      	movne	r3, #1
 8003a6e:	2300      	moveq	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d18d      	bne.n	8003992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a8c:	e02d      	b.n	8003aea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f8ce 	bl	8003c30 <I2C_IsAcknowledgeFailed>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e02d      	b.n	8003afa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa4:	d021      	beq.n	8003aea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa6:	f7fe fd6b 	bl	8002580 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d302      	bcc.n	8003abc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d116      	bne.n	8003aea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f043 0220 	orr.w	r2, r3, #32
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e007      	b.n	8003afa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af4:	2b80      	cmp	r3, #128	; 0x80
 8003af6:	d1ca      	bne.n	8003a8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b0e:	e02d      	b.n	8003b6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f88d 	bl	8003c30 <I2C_IsAcknowledgeFailed>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e02d      	b.n	8003b7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b26:	d021      	beq.n	8003b6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b28:	f7fe fd2a 	bl	8002580 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d302      	bcc.n	8003b3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d116      	bne.n	8003b6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	f043 0220 	orr.w	r2, r3, #32
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e007      	b.n	8003b7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d1ca      	bne.n	8003b10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b90:	e042      	b.n	8003c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d119      	bne.n	8003bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0210 	mvn.w	r2, #16
 8003ba8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e029      	b.n	8003c28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd4:	f7fe fcd4 	bl	8002580 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d302      	bcc.n	8003bea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d116      	bne.n	8003c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	f043 0220 	orr.w	r2, r3, #32
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e007      	b.n	8003c28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c22:	2b40      	cmp	r3, #64	; 0x40
 8003c24:	d1b5      	bne.n	8003b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c46:	d11b      	bne.n	8003c80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	f043 0204 	orr.w	r2, r3, #4
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e272      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 8087 	beq.w	8003dba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cac:	4b92      	ldr	r3, [pc, #584]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d00c      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cb8:	4b8f      	ldr	r3, [pc, #572]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 030c 	and.w	r3, r3, #12
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d112      	bne.n	8003cea <HAL_RCC_OscConfig+0x5e>
 8003cc4:	4b8c      	ldr	r3, [pc, #560]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd0:	d10b      	bne.n	8003cea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd2:	4b89      	ldr	r3, [pc, #548]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d06c      	beq.n	8003db8 <HAL_RCC_OscConfig+0x12c>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d168      	bne.n	8003db8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e24c      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf2:	d106      	bne.n	8003d02 <HAL_RCC_OscConfig+0x76>
 8003cf4:	4b80      	ldr	r3, [pc, #512]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a7f      	ldr	r2, [pc, #508]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	e02e      	b.n	8003d60 <HAL_RCC_OscConfig+0xd4>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10c      	bne.n	8003d24 <HAL_RCC_OscConfig+0x98>
 8003d0a:	4b7b      	ldr	r3, [pc, #492]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a7a      	ldr	r2, [pc, #488]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	4b78      	ldr	r3, [pc, #480]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a77      	ldr	r2, [pc, #476]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	e01d      	b.n	8003d60 <HAL_RCC_OscConfig+0xd4>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d2c:	d10c      	bne.n	8003d48 <HAL_RCC_OscConfig+0xbc>
 8003d2e:	4b72      	ldr	r3, [pc, #456]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a71      	ldr	r2, [pc, #452]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	4b6f      	ldr	r3, [pc, #444]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a6e      	ldr	r2, [pc, #440]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	e00b      	b.n	8003d60 <HAL_RCC_OscConfig+0xd4>
 8003d48:	4b6b      	ldr	r3, [pc, #428]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a6a      	ldr	r2, [pc, #424]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	4b68      	ldr	r3, [pc, #416]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a67      	ldr	r2, [pc, #412]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d013      	beq.n	8003d90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7fe fc0a 	bl	8002580 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d70:	f7fe fc06 	bl	8002580 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b64      	cmp	r3, #100	; 0x64
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e200      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d82:	4b5d      	ldr	r3, [pc, #372]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0xe4>
 8003d8e:	e014      	b.n	8003dba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fe fbf6 	bl	8002580 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d98:	f7fe fbf2 	bl	8002580 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	; 0x64
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e1ec      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003daa:	4b53      	ldr	r3, [pc, #332]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x10c>
 8003db6:	e000      	b.n	8003dba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d063      	beq.n	8003e8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dc6:	4b4c      	ldr	r3, [pc, #304]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003dd2:	4b49      	ldr	r3, [pc, #292]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d11c      	bne.n	8003e18 <HAL_RCC_OscConfig+0x18c>
 8003dde:	4b46      	ldr	r3, [pc, #280]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d116      	bne.n	8003e18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dea:	4b43      	ldr	r3, [pc, #268]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <HAL_RCC_OscConfig+0x176>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d001      	beq.n	8003e02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e1c0      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e02:	4b3d      	ldr	r3, [pc, #244]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4939      	ldr	r1, [pc, #228]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e16:	e03a      	b.n	8003e8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d020      	beq.n	8003e62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e20:	4b36      	ldr	r3, [pc, #216]	; (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e22:	2201      	movs	r2, #1
 8003e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e26:	f7fe fbab 	bl	8002580 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e2e:	f7fe fba7 	bl	8002580 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e1a1      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e40:	4b2d      	ldr	r3, [pc, #180]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0f0      	beq.n	8003e2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4c:	4b2a      	ldr	r3, [pc, #168]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4927      	ldr	r1, [pc, #156]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	600b      	str	r3, [r1, #0]
 8003e60:	e015      	b.n	8003e8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e62:	4b26      	ldr	r3, [pc, #152]	; (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fe fb8a 	bl	8002580 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e70:	f7fe fb86 	bl	8002580 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e180      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e82:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d03a      	beq.n	8003f10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d019      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ea2:	4b17      	ldr	r3, [pc, #92]	; (8003f00 <HAL_RCC_OscConfig+0x274>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea8:	f7fe fb6a 	bl	8002580 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eb0:	f7fe fb66 	bl	8002580 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e160      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ece:	2001      	movs	r0, #1
 8003ed0:	f000 fad8 	bl	8004484 <RCC_Delay>
 8003ed4:	e01c      	b.n	8003f10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed6:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <HAL_RCC_OscConfig+0x274>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003edc:	f7fe fb50 	bl	8002580 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee2:	e00f      	b.n	8003f04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee4:	f7fe fb4c 	bl	8002580 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d908      	bls.n	8003f04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e146      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	42420000 	.word	0x42420000
 8003f00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f04:	4b92      	ldr	r3, [pc, #584]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1e9      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 80a6 	beq.w	800406a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f22:	4b8b      	ldr	r3, [pc, #556]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10d      	bne.n	8003f4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f2e:	4b88      	ldr	r3, [pc, #544]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	4a87      	ldr	r2, [pc, #540]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f38:	61d3      	str	r3, [r2, #28]
 8003f3a:	4b85      	ldr	r3, [pc, #532]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f46:	2301      	movs	r3, #1
 8003f48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4a:	4b82      	ldr	r3, [pc, #520]	; (8004154 <HAL_RCC_OscConfig+0x4c8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d118      	bne.n	8003f88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f56:	4b7f      	ldr	r3, [pc, #508]	; (8004154 <HAL_RCC_OscConfig+0x4c8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a7e      	ldr	r2, [pc, #504]	; (8004154 <HAL_RCC_OscConfig+0x4c8>)
 8003f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f62:	f7fe fb0d 	bl	8002580 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6a:	f7fe fb09 	bl	8002580 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b64      	cmp	r3, #100	; 0x64
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e103      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7c:	4b75      	ldr	r3, [pc, #468]	; (8004154 <HAL_RCC_OscConfig+0x4c8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCC_OscConfig+0x312>
 8003f90:	4b6f      	ldr	r3, [pc, #444]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	4a6e      	ldr	r2, [pc, #440]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6213      	str	r3, [r2, #32]
 8003f9c:	e02d      	b.n	8003ffa <HAL_RCC_OscConfig+0x36e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x334>
 8003fa6:	4b6a      	ldr	r3, [pc, #424]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	4a69      	ldr	r2, [pc, #420]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003fac:	f023 0301 	bic.w	r3, r3, #1
 8003fb0:	6213      	str	r3, [r2, #32]
 8003fb2:	4b67      	ldr	r3, [pc, #412]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	4a66      	ldr	r2, [pc, #408]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003fb8:	f023 0304 	bic.w	r3, r3, #4
 8003fbc:	6213      	str	r3, [r2, #32]
 8003fbe:	e01c      	b.n	8003ffa <HAL_RCC_OscConfig+0x36e>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	2b05      	cmp	r3, #5
 8003fc6:	d10c      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x356>
 8003fc8:	4b61      	ldr	r3, [pc, #388]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	4a60      	ldr	r2, [pc, #384]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003fce:	f043 0304 	orr.w	r3, r3, #4
 8003fd2:	6213      	str	r3, [r2, #32]
 8003fd4:	4b5e      	ldr	r3, [pc, #376]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	4a5d      	ldr	r2, [pc, #372]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	6213      	str	r3, [r2, #32]
 8003fe0:	e00b      	b.n	8003ffa <HAL_RCC_OscConfig+0x36e>
 8003fe2:	4b5b      	ldr	r3, [pc, #364]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	4a5a      	ldr	r2, [pc, #360]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	6213      	str	r3, [r2, #32]
 8003fee:	4b58      	ldr	r3, [pc, #352]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	4a57      	ldr	r2, [pc, #348]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003ff4:	f023 0304 	bic.w	r3, r3, #4
 8003ff8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d015      	beq.n	800402e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004002:	f7fe fabd 	bl	8002580 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004008:	e00a      	b.n	8004020 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400a:	f7fe fab9 	bl	8002580 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	f241 3288 	movw	r2, #5000	; 0x1388
 8004018:	4293      	cmp	r3, r2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e0b1      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004020:	4b4b      	ldr	r3, [pc, #300]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0ee      	beq.n	800400a <HAL_RCC_OscConfig+0x37e>
 800402c:	e014      	b.n	8004058 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402e:	f7fe faa7 	bl	8002580 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004034:	e00a      	b.n	800404c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004036:	f7fe faa3 	bl	8002580 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	f241 3288 	movw	r2, #5000	; 0x1388
 8004044:	4293      	cmp	r3, r2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e09b      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800404c:	4b40      	ldr	r3, [pc, #256]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1ee      	bne.n	8004036 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004058:	7dfb      	ldrb	r3, [r7, #23]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d105      	bne.n	800406a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800405e:	4b3c      	ldr	r3, [pc, #240]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	4a3b      	ldr	r2, [pc, #236]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8004064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004068:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 8087 	beq.w	8004182 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004074:	4b36      	ldr	r3, [pc, #216]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f003 030c 	and.w	r3, r3, #12
 800407c:	2b08      	cmp	r3, #8
 800407e:	d061      	beq.n	8004144 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d146      	bne.n	8004116 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004088:	4b33      	ldr	r3, [pc, #204]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408e:	f7fe fa77 	bl	8002580 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004096:	f7fe fa73 	bl	8002580 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e06d      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040a8:	4b29      	ldr	r3, [pc, #164]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f0      	bne.n	8004096 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040bc:	d108      	bne.n	80040d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040be:	4b24      	ldr	r3, [pc, #144]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	4921      	ldr	r1, [pc, #132]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040d0:	4b1f      	ldr	r3, [pc, #124]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a19      	ldr	r1, [r3, #32]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	430b      	orrs	r3, r1
 80040e2:	491b      	ldr	r1, [pc, #108]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040e8:	4b1b      	ldr	r3, [pc, #108]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 80040ea:	2201      	movs	r2, #1
 80040ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ee:	f7fe fa47 	bl	8002580 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f6:	f7fe fa43 	bl	8002580 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e03d      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004108:	4b11      	ldr	r3, [pc, #68]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCC_OscConfig+0x46a>
 8004114:	e035      	b.n	8004182 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004116:	4b10      	ldr	r3, [pc, #64]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411c:	f7fe fa30 	bl	8002580 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004124:	f7fe fa2c 	bl	8002580 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e026      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004136:	4b06      	ldr	r3, [pc, #24]	; (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x498>
 8004142:	e01e      	b.n	8004182 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d107      	bne.n	800415c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e019      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
 8004150:	40021000 	.word	0x40021000
 8004154:	40007000 	.word	0x40007000
 8004158:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_RCC_OscConfig+0x500>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	429a      	cmp	r2, r3
 800416e:	d106      	bne.n	800417e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800417a:	429a      	cmp	r2, r3
 800417c:	d001      	beq.n	8004182 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40021000 	.word	0x40021000

08004190 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0d0      	b.n	8004346 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041a4:	4b6a      	ldr	r3, [pc, #424]	; (8004350 <HAL_RCC_ClockConfig+0x1c0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d910      	bls.n	80041d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b67      	ldr	r3, [pc, #412]	; (8004350 <HAL_RCC_ClockConfig+0x1c0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 0207 	bic.w	r2, r3, #7
 80041ba:	4965      	ldr	r1, [pc, #404]	; (8004350 <HAL_RCC_ClockConfig+0x1c0>)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b63      	ldr	r3, [pc, #396]	; (8004350 <HAL_RCC_ClockConfig+0x1c0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0b8      	b.n	8004346 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d020      	beq.n	8004222 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041ec:	4b59      	ldr	r3, [pc, #356]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4a58      	ldr	r2, [pc, #352]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 80041f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004204:	4b53      	ldr	r3, [pc, #332]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	4a52      	ldr	r2, [pc, #328]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 800420a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800420e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004210:	4b50      	ldr	r3, [pc, #320]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	494d      	ldr	r1, [pc, #308]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 800421e:	4313      	orrs	r3, r2
 8004220:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d040      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d107      	bne.n	8004246 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004236:	4b47      	ldr	r3, [pc, #284]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d115      	bne.n	800426e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e07f      	b.n	8004346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d107      	bne.n	800425e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800424e:	4b41      	ldr	r3, [pc, #260]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d109      	bne.n	800426e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e073      	b.n	8004346 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425e:	4b3d      	ldr	r3, [pc, #244]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e06b      	b.n	8004346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800426e:	4b39      	ldr	r3, [pc, #228]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f023 0203 	bic.w	r2, r3, #3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	4936      	ldr	r1, [pc, #216]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 800427c:	4313      	orrs	r3, r2
 800427e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004280:	f7fe f97e 	bl	8002580 <HAL_GetTick>
 8004284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004286:	e00a      	b.n	800429e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004288:	f7fe f97a 	bl	8002580 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	f241 3288 	movw	r2, #5000	; 0x1388
 8004296:	4293      	cmp	r3, r2
 8004298:	d901      	bls.n	800429e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e053      	b.n	8004346 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429e:	4b2d      	ldr	r3, [pc, #180]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f003 020c 	and.w	r2, r3, #12
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d1eb      	bne.n	8004288 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042b0:	4b27      	ldr	r3, [pc, #156]	; (8004350 <HAL_RCC_ClockConfig+0x1c0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d210      	bcs.n	80042e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042be:	4b24      	ldr	r3, [pc, #144]	; (8004350 <HAL_RCC_ClockConfig+0x1c0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 0207 	bic.w	r2, r3, #7
 80042c6:	4922      	ldr	r1, [pc, #136]	; (8004350 <HAL_RCC_ClockConfig+0x1c0>)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ce:	4b20      	ldr	r3, [pc, #128]	; (8004350 <HAL_RCC_ClockConfig+0x1c0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e032      	b.n	8004346 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ec:	4b19      	ldr	r3, [pc, #100]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4916      	ldr	r1, [pc, #88]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800430a:	4b12      	ldr	r3, [pc, #72]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	490e      	ldr	r1, [pc, #56]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 800431a:	4313      	orrs	r3, r2
 800431c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800431e:	f000 f821 	bl	8004364 <HAL_RCC_GetSysClockFreq>
 8004322:	4602      	mov	r2, r0
 8004324:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	490a      	ldr	r1, [pc, #40]	; (8004358 <HAL_RCC_ClockConfig+0x1c8>)
 8004330:	5ccb      	ldrb	r3, [r1, r3]
 8004332:	fa22 f303 	lsr.w	r3, r2, r3
 8004336:	4a09      	ldr	r2, [pc, #36]	; (800435c <HAL_RCC_ClockConfig+0x1cc>)
 8004338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800433a:	4b09      	ldr	r3, [pc, #36]	; (8004360 <HAL_RCC_ClockConfig+0x1d0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f7fe f8dc 	bl	80024fc <HAL_InitTick>

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40022000 	.word	0x40022000
 8004354:	40021000 	.word	0x40021000
 8004358:	08009134 	.word	0x08009134
 800435c:	20000000 	.word	0x20000000
 8004360:	20000004 	.word	0x20000004

08004364 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004364:	b490      	push	{r4, r7}
 8004366:	b08a      	sub	sp, #40	; 0x28
 8004368:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800436a:	4b29      	ldr	r3, [pc, #164]	; (8004410 <HAL_RCC_GetSysClockFreq+0xac>)
 800436c:	1d3c      	adds	r4, r7, #4
 800436e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004374:	f240 2301 	movw	r3, #513	; 0x201
 8004378:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
 800437e:	2300      	movs	r3, #0
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	2300      	movs	r3, #0
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800438e:	4b21      	ldr	r3, [pc, #132]	; (8004414 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b04      	cmp	r3, #4
 800439c:	d002      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x40>
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d003      	beq.n	80043aa <HAL_RCC_GetSysClockFreq+0x46>
 80043a2:	e02b      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043a4:	4b1c      	ldr	r3, [pc, #112]	; (8004418 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043a6:	623b      	str	r3, [r7, #32]
      break;
 80043a8:	e02b      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	0c9b      	lsrs	r3, r3, #18
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	3328      	adds	r3, #40	; 0x28
 80043b4:	443b      	add	r3, r7
 80043b6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80043ba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d012      	beq.n	80043ec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043c6:	4b13      	ldr	r3, [pc, #76]	; (8004414 <HAL_RCC_GetSysClockFreq+0xb0>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	0c5b      	lsrs	r3, r3, #17
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	3328      	adds	r3, #40	; 0x28
 80043d2:	443b      	add	r3, r7
 80043d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80043d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	4a0e      	ldr	r2, [pc, #56]	; (8004418 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043de:	fb03 f202 	mul.w	r2, r3, r2
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ea:	e004      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	4a0b      	ldr	r2, [pc, #44]	; (800441c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043f0:	fb02 f303 	mul.w	r3, r2, r3
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	623b      	str	r3, [r7, #32]
      break;
 80043fa:	e002      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043fc:	4b06      	ldr	r3, [pc, #24]	; (8004418 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043fe:	623b      	str	r3, [r7, #32]
      break;
 8004400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004402:	6a3b      	ldr	r3, [r7, #32]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3728      	adds	r7, #40	; 0x28
 8004408:	46bd      	mov	sp, r7
 800440a:	bc90      	pop	{r4, r7}
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	08009124 	.word	0x08009124
 8004414:	40021000 	.word	0x40021000
 8004418:	007a1200 	.word	0x007a1200
 800441c:	003d0900 	.word	0x003d0900

08004420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004424:	4b02      	ldr	r3, [pc, #8]	; (8004430 <HAL_RCC_GetHCLKFreq+0x10>)
 8004426:	681b      	ldr	r3, [r3, #0]
}
 8004428:	4618      	mov	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr
 8004430:	20000000 	.word	0x20000000

08004434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004438:	f7ff fff2 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 800443c:	4602      	mov	r2, r0
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	0a1b      	lsrs	r3, r3, #8
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	4903      	ldr	r1, [pc, #12]	; (8004458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800444a:	5ccb      	ldrb	r3, [r1, r3]
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004450:	4618      	mov	r0, r3
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40021000 	.word	0x40021000
 8004458:	08009144 	.word	0x08009144

0800445c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004460:	f7ff ffde 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 8004464:	4602      	mov	r2, r0
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	0adb      	lsrs	r3, r3, #11
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	4903      	ldr	r1, [pc, #12]	; (8004480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004472:	5ccb      	ldrb	r3, [r1, r3]
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40021000 	.word	0x40021000
 8004480:	08009144 	.word	0x08009144

08004484 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800448c:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <RCC_Delay+0x34>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <RCC_Delay+0x38>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	0a5b      	lsrs	r3, r3, #9
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044a0:	bf00      	nop
  }
  while (Delay --);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1e5a      	subs	r2, r3, #1
 80044a6:	60fa      	str	r2, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f9      	bne.n	80044a0 <RCC_Delay+0x1c>
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr
 80044b8:	20000000 	.word	0x20000000
 80044bc:	10624dd3 	.word	0x10624dd3

080044c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e076      	b.n	80045c0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d108      	bne.n	80044ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044e2:	d009      	beq.n	80044f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	61da      	str	r2, [r3, #28]
 80044ea:	e005      	b.n	80044f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fd fe1c 	bl	8002150 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800452e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457c:	ea42 0103 	orr.w	r1, r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004584:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	0c1a      	lsrs	r2, r3, #16
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f002 0204 	and.w	r2, r2, #4
 800459e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	69da      	ldr	r2, [r3, #28]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	4613      	mov	r3, r2
 80045d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_SPI_Transmit+0x22>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e126      	b.n	8004838 <HAL_SPI_Transmit+0x270>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045f2:	f7fd ffc5 	bl	8002580 <HAL_GetTick>
 80045f6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045f8:	88fb      	ldrh	r3, [r7, #6]
 80045fa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b01      	cmp	r3, #1
 8004606:	d002      	beq.n	800460e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004608:	2302      	movs	r3, #2
 800460a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800460c:	e10b      	b.n	8004826 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <HAL_SPI_Transmit+0x52>
 8004614:	88fb      	ldrh	r3, [r7, #6]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d102      	bne.n	8004620 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800461e:	e102      	b.n	8004826 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2203      	movs	r2, #3
 8004624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	88fa      	ldrh	r2, [r7, #6]
 8004638:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	88fa      	ldrh	r2, [r7, #6]
 800463e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004666:	d10f      	bne.n	8004688 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004676:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004686:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004692:	2b40      	cmp	r3, #64	; 0x40
 8004694:	d007      	beq.n	80046a6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ae:	d14b      	bne.n	8004748 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <HAL_SPI_Transmit+0xf6>
 80046b8:	8afb      	ldrh	r3, [r7, #22]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d13e      	bne.n	800473c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	881a      	ldrh	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	1c9a      	adds	r2, r3, #2
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046e2:	e02b      	b.n	800473c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d112      	bne.n	8004718 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	881a      	ldrh	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	1c9a      	adds	r2, r3, #2
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	86da      	strh	r2, [r3, #54]	; 0x36
 8004716:	e011      	b.n	800473c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004718:	f7fd ff32 	bl	8002580 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d803      	bhi.n	8004730 <HAL_SPI_Transmit+0x168>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472e:	d102      	bne.n	8004736 <HAL_SPI_Transmit+0x16e>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d102      	bne.n	800473c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	77fb      	strb	r3, [r7, #31]
          goto error;
 800473a:	e074      	b.n	8004826 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1ce      	bne.n	80046e4 <HAL_SPI_Transmit+0x11c>
 8004746:	e04c      	b.n	80047e2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <HAL_SPI_Transmit+0x18e>
 8004750:	8afb      	ldrh	r3, [r7, #22]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d140      	bne.n	80047d8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	7812      	ldrb	r2, [r2, #0]
 8004762:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800477c:	e02c      	b.n	80047d8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b02      	cmp	r3, #2
 800478a:	d113      	bne.n	80047b4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	330c      	adds	r3, #12
 8004796:	7812      	ldrb	r2, [r2, #0]
 8004798:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	3b01      	subs	r3, #1
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80047b2:	e011      	b.n	80047d8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047b4:	f7fd fee4 	bl	8002580 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d803      	bhi.n	80047cc <HAL_SPI_Transmit+0x204>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ca:	d102      	bne.n	80047d2 <HAL_SPI_Transmit+0x20a>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d102      	bne.n	80047d8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047d6:	e026      	b.n	8004826 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1cd      	bne.n	800477e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	6839      	ldr	r1, [r7, #0]
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 f8b2 	bl	8004950 <SPI_EndRxTxTransaction>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2220      	movs	r2, #32
 80047f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10a      	bne.n	8004816 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004800:	2300      	movs	r3, #0
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	613b      	str	r3, [r7, #16]
 8004814:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	77fb      	strb	r3, [r7, #31]
 8004822:	e000      	b.n	8004826 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004824:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004836:	7ffb      	ldrb	r3, [r7, #31]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3720      	adds	r7, #32
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	4613      	mov	r3, r2
 800484e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004850:	f7fd fe96 	bl	8002580 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004858:	1a9b      	subs	r3, r3, r2
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	4413      	add	r3, r2
 800485e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004860:	f7fd fe8e 	bl	8002580 <HAL_GetTick>
 8004864:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004866:	4b39      	ldr	r3, [pc, #228]	; (800494c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	015b      	lsls	r3, r3, #5
 800486c:	0d1b      	lsrs	r3, r3, #20
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	fb02 f303 	mul.w	r3, r2, r3
 8004874:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004876:	e054      	b.n	8004922 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487e:	d050      	beq.n	8004922 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004880:	f7fd fe7e 	bl	8002580 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	69fa      	ldr	r2, [r7, #28]
 800488c:	429a      	cmp	r2, r3
 800488e:	d902      	bls.n	8004896 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d13d      	bne.n	8004912 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ae:	d111      	bne.n	80048d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b8:	d004      	beq.n	80048c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c2:	d107      	bne.n	80048d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048dc:	d10f      	bne.n	80048fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e017      	b.n	8004942 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	3b01      	subs	r3, #1
 8004920:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	4013      	ands	r3, r2
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	429a      	cmp	r2, r3
 8004930:	bf0c      	ite	eq
 8004932:	2301      	moveq	r3, #1
 8004934:	2300      	movne	r3, #0
 8004936:	b2db      	uxtb	r3, r3
 8004938:	461a      	mov	r2, r3
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	429a      	cmp	r2, r3
 800493e:	d19b      	bne.n	8004878 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3720      	adds	r7, #32
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20000000 	.word	0x20000000

08004950 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af02      	add	r7, sp, #8
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2200      	movs	r2, #0
 8004964:	2180      	movs	r1, #128	; 0x80
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7ff ff6a 	bl	8004840 <SPI_WaitFlagStateUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d007      	beq.n	8004982 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004976:	f043 0220 	orr.w	r2, r3, #32
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e000      	b.n	8004984 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e03f      	b.n	8004a1e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7fd fc0a 	bl	80021cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2224      	movs	r2, #36	; 0x24
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fc85 	bl	80052e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695a      	ldr	r2, [r3, #20]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b08a      	sub	sp, #40	; 0x28
 8004a2a:	af02      	add	r7, sp, #8
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	603b      	str	r3, [r7, #0]
 8004a32:	4613      	mov	r3, r2
 8004a34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b20      	cmp	r3, #32
 8004a44:	d17c      	bne.n	8004b40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <HAL_UART_Transmit+0x2c>
 8004a4c:	88fb      	ldrh	r3, [r7, #6]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e075      	b.n	8004b42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <HAL_UART_Transmit+0x3e>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e06e      	b.n	8004b42 <HAL_UART_Transmit+0x11c>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2221      	movs	r2, #33	; 0x21
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a7a:	f7fd fd81 	bl	8002580 <HAL_GetTick>
 8004a7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	88fa      	ldrh	r2, [r7, #6]
 8004a84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	88fa      	ldrh	r2, [r7, #6]
 8004a8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a94:	d108      	bne.n	8004aa8 <HAL_UART_Transmit+0x82>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d104      	bne.n	8004aa8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	61bb      	str	r3, [r7, #24]
 8004aa6:	e003      	b.n	8004ab0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ab8:	e02a      	b.n	8004b10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2180      	movs	r1, #128	; 0x80
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 fa38 	bl	8004f3a <UART_WaitOnFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e036      	b.n	8004b42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10b      	bne.n	8004af2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ae8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	3302      	adds	r3, #2
 8004aee:	61bb      	str	r3, [r7, #24]
 8004af0:	e007      	b.n	8004b02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	781a      	ldrb	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	3301      	adds	r3, #1
 8004b00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1cf      	bne.n	8004aba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2200      	movs	r2, #0
 8004b22:	2140      	movs	r1, #64	; 0x40
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 fa08 	bl	8004f3a <UART_WaitOnFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e006      	b.n	8004b42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	e000      	b.n	8004b42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b40:	2302      	movs	r3, #2
  }
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3720      	adds	r7, #32
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	4613      	mov	r3, r2
 8004b56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d11d      	bne.n	8004ba0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <HAL_UART_Receive_IT+0x26>
 8004b6a:	88fb      	ldrh	r3, [r7, #6]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e016      	b.n	8004ba2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_UART_Receive_IT+0x38>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e00f      	b.n	8004ba2 <HAL_UART_Receive_IT+0x58>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004b90:	88fb      	ldrh	r3, [r7, #6]
 8004b92:	461a      	mov	r2, r3
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 fa19 	bl	8004fce <UART_Start_Receive_IT>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	e000      	b.n	8004ba2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004ba0:	2302      	movs	r3, #2
  }
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	; 0x28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10d      	bne.n	8004bfe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <HAL_UART_IRQHandler+0x52>
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fac9 	bl	800518e <UART_Receive_IT>
      return;
 8004bfc:	e17b      	b.n	8004ef6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 80b1 	beq.w	8004d68 <HAL_UART_IRQHandler+0x1bc>
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d105      	bne.n	8004c1c <HAL_UART_IRQHandler+0x70>
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 80a6 	beq.w	8004d68 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <HAL_UART_IRQHandler+0x90>
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	f043 0201 	orr.w	r2, r3, #1
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <HAL_UART_IRQHandler+0xb0>
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	f043 0202 	orr.w	r2, r3, #2
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <HAL_UART_IRQHandler+0xd0>
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	f043 0204 	orr.w	r2, r3, #4
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00f      	beq.n	8004ca6 <HAL_UART_IRQHandler+0xfa>
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	f003 0320 	and.w	r3, r3, #32
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d104      	bne.n	8004c9a <HAL_UART_IRQHandler+0xee>
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d005      	beq.n	8004ca6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	f043 0208 	orr.w	r2, r3, #8
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 811e 	beq.w	8004eec <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <HAL_UART_IRQHandler+0x11e>
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	f003 0320 	and.w	r3, r3, #32
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fa62 	bl	800518e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	bf14      	ite	ne
 8004cd8:	2301      	movne	r3, #1
 8004cda:	2300      	moveq	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d102      	bne.n	8004cf2 <HAL_UART_IRQHandler+0x146>
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d031      	beq.n	8004d56 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f9a4 	bl	8005040 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d023      	beq.n	8004d4e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695a      	ldr	r2, [r3, #20]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d14:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d013      	beq.n	8004d46 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	4a76      	ldr	r2, [pc, #472]	; (8004efc <HAL_UART_IRQHandler+0x350>)
 8004d24:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fd fd9e 	bl	800286c <HAL_DMA_Abort_IT>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d016      	beq.n	8004d64 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d40:	4610      	mov	r0, r2
 8004d42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d44:	e00e      	b.n	8004d64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f8e3 	bl	8004f12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4c:	e00a      	b.n	8004d64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f8df 	bl	8004f12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d54:	e006      	b.n	8004d64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f8db 	bl	8004f12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d62:	e0c3      	b.n	8004eec <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d64:	bf00      	nop
    return;
 8004d66:	e0c1      	b.n	8004eec <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	f040 80a1 	bne.w	8004eb4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 809b 	beq.w	8004eb4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 8095 	beq.w	8004eb4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d04e      	beq.n	8004e4c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004db8:	8a3b      	ldrh	r3, [r7, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 8098 	beq.w	8004ef0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dc4:	8a3a      	ldrh	r2, [r7, #16]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	f080 8092 	bcs.w	8004ef0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	8a3a      	ldrh	r2, [r7, #16]
 8004dd0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d02b      	beq.n	8004e34 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dea:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695a      	ldr	r2, [r3, #20]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0201 	bic.w	r2, r2, #1
 8004dfa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695a      	ldr	r2, [r3, #20]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e0a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0210 	bic.w	r2, r2, #16
 8004e28:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fd fce1 	bl	80027f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f86d 	bl	8004f24 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e4a:	e051      	b.n	8004ef0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d047      	beq.n	8004ef4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004e64:	8a7b      	ldrh	r3, [r7, #18]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d044      	beq.n	8004ef4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e78:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695a      	ldr	r2, [r3, #20]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0201 	bic.w	r2, r2, #1
 8004e88:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0210 	bic.w	r2, r2, #16
 8004ea6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ea8:	8a7b      	ldrh	r3, [r7, #18]
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f839 	bl	8004f24 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004eb2:	e01f      	b.n	8004ef4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d008      	beq.n	8004ed0 <HAL_UART_IRQHandler+0x324>
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f8f9 	bl	80050c0 <UART_Transmit_IT>
    return;
 8004ece:	e012      	b.n	8004ef6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00d      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x34a>
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f93a 	bl	800515e <UART_EndTransmit_IT>
    return;
 8004eea:	e004      	b.n	8004ef6 <HAL_UART_IRQHandler+0x34a>
    return;
 8004eec:	bf00      	nop
 8004eee:	e002      	b.n	8004ef6 <HAL_UART_IRQHandler+0x34a>
      return;
 8004ef0:	bf00      	nop
 8004ef2:	e000      	b.n	8004ef6 <HAL_UART_IRQHandler+0x34a>
      return;
 8004ef4:	bf00      	nop
  }
}
 8004ef6:	3728      	adds	r7, #40	; 0x28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	08005099 	.word	0x08005099

08004f00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bc80      	pop	{r7}
 8004f10:	4770      	bx	lr

08004f12 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr

08004f24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bc80      	pop	{r7}
 8004f38:	4770      	bx	lr

08004f3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b084      	sub	sp, #16
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	603b      	str	r3, [r7, #0]
 8004f46:	4613      	mov	r3, r2
 8004f48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4a:	e02c      	b.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f52:	d028      	beq.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d007      	beq.n	8004f6a <UART_WaitOnFlagUntilTimeout+0x30>
 8004f5a:	f7fd fb11 	bl	8002580 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d21d      	bcs.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f78:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695a      	ldr	r2, [r3, #20]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0201 	bic.w	r2, r2, #1
 8004f88:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e00f      	b.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	bf0c      	ite	eq
 8004fb6:	2301      	moveq	r3, #1
 8004fb8:	2300      	movne	r3, #0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d0c3      	beq.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b085      	sub	sp, #20
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	88fa      	ldrh	r2, [r7, #6]
 8004fe6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	88fa      	ldrh	r2, [r7, #6]
 8004fec:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2222      	movs	r2, #34	; 0x22
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005012:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695a      	ldr	r2, [r3, #20]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0201 	orr.w	r2, r2, #1
 8005022:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0220 	orr.w	r2, r2, #32
 8005032:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr

08005040 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005056:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695a      	ldr	r2, [r3, #20]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0201 	bic.w	r2, r2, #1
 8005066:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506c:	2b01      	cmp	r3, #1
 800506e:	d107      	bne.n	8005080 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0210 	bic.w	r2, r2, #16
 800507e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr

08005098 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f7ff ff2d 	bl	8004f12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050b8:	bf00      	nop
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b21      	cmp	r3, #33	; 0x21
 80050d2:	d13e      	bne.n	8005152 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050dc:	d114      	bne.n	8005108 <UART_Transmit_IT+0x48>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d110      	bne.n	8005108 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	461a      	mov	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	1c9a      	adds	r2, r3, #2
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	621a      	str	r2, [r3, #32]
 8005106:	e008      	b.n	800511a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	1c59      	adds	r1, r3, #1
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	6211      	str	r1, [r2, #32]
 8005112:	781a      	ldrb	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800511e:	b29b      	uxth	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	b29b      	uxth	r3, r3
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	4619      	mov	r1, r3
 8005128:	84d1      	strh	r1, [r2, #38]	; 0x26
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10f      	bne.n	800514e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800513c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800514c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	e000      	b.n	8005154 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005152:	2302      	movs	r3, #2
  }
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	bc80      	pop	{r7}
 800515c:	4770      	bx	lr

0800515e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b082      	sub	sp, #8
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005174:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2220      	movs	r2, #32
 800517a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7ff febe 	bl	8004f00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b086      	sub	sp, #24
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b22      	cmp	r3, #34	; 0x22
 80051a0:	f040 8099 	bne.w	80052d6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ac:	d117      	bne.n	80051de <UART_Receive_IT+0x50>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d113      	bne.n	80051de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051be:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d6:	1c9a      	adds	r2, r3, #2
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	629a      	str	r2, [r3, #40]	; 0x28
 80051dc:	e026      	b.n	800522c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f0:	d007      	beq.n	8005202 <UART_Receive_IT+0x74>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10a      	bne.n	8005210 <UART_Receive_IT+0x82>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	b2da      	uxtb	r2, r3
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	e008      	b.n	8005222 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800521c:	b2da      	uxtb	r2, r3
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29b      	uxth	r3, r3
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	4619      	mov	r1, r3
 800523a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800523c:	2b00      	cmp	r3, #0
 800523e:	d148      	bne.n	80052d2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68da      	ldr	r2, [r3, #12]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0220 	bic.w	r2, r2, #32
 800524e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800525e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695a      	ldr	r2, [r3, #20]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0201 	bic.w	r2, r2, #1
 800526e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527c:	2b01      	cmp	r3, #1
 800527e:	d123      	bne.n	80052c8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0210 	bic.w	r2, r2, #16
 8005294:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b10      	cmp	r3, #16
 80052a2:	d10a      	bne.n	80052ba <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052a4:	2300      	movs	r3, #0
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052be:	4619      	mov	r1, r3
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7ff fe2f 	bl	8004f24 <HAL_UARTEx_RxEventCallback>
 80052c6:	e002      	b.n	80052ce <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7fc f92b 	bl	8001524 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	e002      	b.n	80052d8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	e000      	b.n	80052d8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80052d6:	2302      	movs	r3, #2
  }
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800531a:	f023 030c 	bic.w	r3, r3, #12
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	430b      	orrs	r3, r1
 8005326:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699a      	ldr	r2, [r3, #24]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a2c      	ldr	r2, [pc, #176]	; (80053f4 <UART_SetConfig+0x114>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d103      	bne.n	8005350 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005348:	f7ff f888 	bl	800445c <HAL_RCC_GetPCLK2Freq>
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	e002      	b.n	8005356 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005350:	f7ff f870 	bl	8004434 <HAL_RCC_GetPCLK1Freq>
 8005354:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	009a      	lsls	r2, r3, #2
 8005360:	441a      	add	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	fbb2 f3f3 	udiv	r3, r2, r3
 800536c:	4a22      	ldr	r2, [pc, #136]	; (80053f8 <UART_SetConfig+0x118>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	0119      	lsls	r1, r3, #4
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4613      	mov	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	009a      	lsls	r2, r3, #2
 8005380:	441a      	add	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	fbb2 f2f3 	udiv	r2, r2, r3
 800538c:	4b1a      	ldr	r3, [pc, #104]	; (80053f8 <UART_SetConfig+0x118>)
 800538e:	fba3 0302 	umull	r0, r3, r3, r2
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	2064      	movs	r0, #100	; 0x64
 8005396:	fb00 f303 	mul.w	r3, r0, r3
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	3332      	adds	r3, #50	; 0x32
 80053a0:	4a15      	ldr	r2, [pc, #84]	; (80053f8 <UART_SetConfig+0x118>)
 80053a2:	fba2 2303 	umull	r2, r3, r2, r3
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053ac:	4419      	add	r1, r3
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	009a      	lsls	r2, r3, #2
 80053b8:	441a      	add	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80053c4:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <UART_SetConfig+0x118>)
 80053c6:	fba3 0302 	umull	r0, r3, r3, r2
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	2064      	movs	r0, #100	; 0x64
 80053ce:	fb00 f303 	mul.w	r3, r0, r3
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	3332      	adds	r3, #50	; 0x32
 80053d8:	4a07      	ldr	r2, [pc, #28]	; (80053f8 <UART_SetConfig+0x118>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	f003 020f 	and.w	r2, r3, #15
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	440a      	add	r2, r1
 80053ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80053ec:	bf00      	nop
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40013800 	.word	0x40013800
 80053f8:	51eb851f 	.word	0x51eb851f

080053fc <DWT_Delay_Init>:
//uint8_t Hum1, Hum2, Temp1, Temp2;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
	
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8005400:	4b14      	ldr	r3, [pc, #80]	; (8005454 <DWT_Delay_Init+0x58>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	4a13      	ldr	r2, [pc, #76]	; (8005454 <DWT_Delay_Init+0x58>)
 8005406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800540a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800540c:	4b11      	ldr	r3, [pc, #68]	; (8005454 <DWT_Delay_Init+0x58>)
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	4a10      	ldr	r2, [pc, #64]	; (8005454 <DWT_Delay_Init+0x58>)
 8005412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005416:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8005418:	4b0f      	ldr	r3, [pc, #60]	; (8005458 <DWT_Delay_Init+0x5c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a0e      	ldr	r2, [pc, #56]	; (8005458 <DWT_Delay_Init+0x5c>)
 800541e:	f023 0301 	bic.w	r3, r3, #1
 8005422:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8005424:	4b0c      	ldr	r3, [pc, #48]	; (8005458 <DWT_Delay_Init+0x5c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a0b      	ldr	r2, [pc, #44]	; (8005458 <DWT_Delay_Init+0x5c>)
 800542a:	f043 0301 	orr.w	r3, r3, #1
 800542e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8005430:	4b09      	ldr	r3, [pc, #36]	; (8005458 <DWT_Delay_Init+0x5c>)
 8005432:	2200      	movs	r2, #0
 8005434:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8005436:	bf00      	nop
     __ASM volatile ("NOP");
 8005438:	bf00      	nop
 __ASM volatile ("NOP");
 800543a:	bf00      	nop

  /* Check if clock cycle counter has started */
	
			 if(DWT->CYCCNT)
 800543c:	4b06      	ldr	r3, [pc, #24]	; (8005458 <DWT_Delay_Init+0x5c>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <DWT_Delay_Init+0x4c>
				 {
					 return 0; /*clock cycle counter started*/
 8005444:	2300      	movs	r3, #0
 8005446:	e000      	b.n	800544a <DWT_Delay_Init+0x4e>
				 }
			 else
				{
					return 1; /*clock cycle counter not started*/
 8005448:	2301      	movs	r3, #1
				}
				

		
}
 800544a:	4618      	mov	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	bc80      	pop	{r7}
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	e000edf0 	.word	0xe000edf0
 8005458:	e0001000 	.word	0xe0001000

0800545c <delay>:

 void delay(volatile uint32_t microseconds)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8005464:	4b0d      	ldr	r3, [pc, #52]	; (800549c <delay+0x40>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800546a:	f7fe ffd9 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 800546e:	4603      	mov	r3, r0
 8005470:	4a0b      	ldr	r2, [pc, #44]	; (80054a0 <delay+0x44>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	0c9b      	lsrs	r3, r3, #18
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	fb02 f303 	mul.w	r3, r2, r3
 800547e:	607b      	str	r3, [r7, #4]
	 while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8005480:	bf00      	nop
 8005482:	4b06      	ldr	r3, [pc, #24]	; (800549c <delay+0x40>)
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1ad2      	subs	r2, r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	429a      	cmp	r2, r3
 800548e:	d3f8      	bcc.n	8005482 <delay+0x26>
}
 8005490:	bf00      	nop
 8005492:	bf00      	nop
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	e0001000 	.word	0xe0001000
 80054a0:	431bde83 	.word	0x431bde83

080054a4 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	460b      	mov	r3, r1
 80054ae:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054b0:	f107 0308 	add.w	r3, r7, #8
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	605a      	str	r2, [r3, #4]
 80054ba:	609a      	str	r2, [r3, #8]
 80054bc:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80054be:	887b      	ldrh	r3, [r7, #2]
 80054c0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054c2:	2301      	movs	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054c6:	2302      	movs	r3, #2
 80054c8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80054ca:	f107 0308 	add.w	r3, r7, #8
 80054ce:	4619      	mov	r1, r3
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7fd fa41 	bl	8002958 <HAL_GPIO_Init>
}
 80054d6:	bf00      	nop
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b086      	sub	sp, #24
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	460b      	mov	r3, r1
 80054e8:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054ea:	f107 0308 	add.w	r3, r7, #8
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	605a      	str	r2, [r3, #4]
 80054f4:	609a      	str	r2, [r3, #8]
 80054f6:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80054f8:	887b      	ldrh	r3, [r7, #2]
 80054fa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054fc:	2300      	movs	r3, #0
 80054fe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005500:	2300      	movs	r3, #0
 8005502:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8005504:	f107 0308 	add.w	r3, r7, #8
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fd fa24 	bl	8002958 <HAL_GPIO_Init>
}
 8005510:	bf00      	nop
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <DHT_Start>:


void DHT_Start (void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 800551c:	f7ff ff6e 	bl	80053fc <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8005520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005524:	480e      	ldr	r0, [pc, #56]	; (8005560 <DHT_Start+0x48>)
 8005526:	f7ff ffbd 	bl	80054a4 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, GPIO_PIN_RESET);   // pull the pin low
 800552a:	2200      	movs	r2, #0
 800552c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005530:	480b      	ldr	r0, [pc, #44]	; (8005560 <DHT_Start+0x48>)
 8005532:	f7fd fbac 	bl	8002c8e <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8005536:	f244 6050 	movw	r0, #18000	; 0x4650
 800553a:	f7ff ff8f 	bl	800545c <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, GPIO_PIN_SET);   // pull the pin high
 800553e:	2201      	movs	r2, #1
 8005540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005544:	4806      	ldr	r0, [pc, #24]	; (8005560 <DHT_Start+0x48>)
 8005546:	f7fd fba2 	bl	8002c8e <HAL_GPIO_WritePin>
    delay(30);   // wait for 30us
 800554a:	201e      	movs	r0, #30
 800554c:	f7ff ff86 	bl	800545c <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8005550:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005554:	4802      	ldr	r0, [pc, #8]	; (8005560 <DHT_Start+0x48>)
 8005556:	f7ff ffc2 	bl	80054de <Set_Pin_Input>
}
 800555a:	bf00      	nop
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	40010800 	.word	0x40010800

08005564 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800556a:	2300      	movs	r3, #0
 800556c:	71fb      	strb	r3, [r7, #7]
	delay (50);
 800556e:	2032      	movs	r0, #50	; 0x32
 8005570:	f7ff ff74 	bl	800545c <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8005574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005578:	4818      	ldr	r0, [pc, #96]	; (80055dc <DHT_Check_Response+0x78>)
 800557a:	f7fd fb71 	bl	8002c60 <HAL_GPIO_ReadPin>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10f      	bne.n	80055a4 <DHT_Check_Response+0x40>
	{
		delay (100);
 8005584:	2064      	movs	r0, #100	; 0x64
 8005586:	f7ff ff69 	bl	800545c <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) 
 800558a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800558e:	4813      	ldr	r0, [pc, #76]	; (80055dc <DHT_Check_Response+0x78>)
 8005590:	f7fd fb66 	bl	8002c60 <HAL_GPIO_ReadPin>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <DHT_Check_Response+0x3c>
		{
			Response = 1;
 800559a:	2301      	movs	r3, #1
 800559c:	71fb      	strb	r3, [r7, #7]
 800559e:	e001      	b.n	80055a4 <DHT_Check_Response+0x40>
		}
		else 
		{
			Response = -1;
 80055a0:	23ff      	movs	r3, #255	; 0xff
 80055a2:	71fb      	strb	r3, [r7, #7]
		}
	}
	uint32_t timer_out = HAL_GetTick();
 80055a4:	f7fc ffec 	bl	8002580 <HAL_GetTick>
 80055a8:	6038      	str	r0, [r7, #0]
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 80055aa:	e009      	b.n	80055c0 <DHT_Check_Response+0x5c>
	{// wait for the pin to go low
		if (HAL_GetTick() - timer_out >= 10)
 80055ac:	f7fc ffe8 	bl	8002580 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b09      	cmp	r3, #9
 80055b8:	d902      	bls.n	80055c0 <DHT_Check_Response+0x5c>
		{
			Response = -1;
 80055ba:	23ff      	movs	r3, #255	; 0xff
 80055bc:	71fb      	strb	r3, [r7, #7]
			break;
 80055be:	e007      	b.n	80055d0 <DHT_Check_Response+0x6c>
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 80055c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055c4:	4805      	ldr	r0, [pc, #20]	; (80055dc <DHT_Check_Response+0x78>)
 80055c6:	f7fd fb4b 	bl	8002c60 <HAL_GPIO_ReadPin>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1ed      	bne.n	80055ac <DHT_Check_Response+0x48>
		}
	}

	return Response;
 80055d0:	79fb      	ldrb	r3, [r7, #7]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	40010800 	.word	0x40010800

080055e0 <DHT_Read>:

uint8_t DHT_Read (void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	uint32_t timer_out = HAL_GetTick();
 80055e6:	f7fc ffcb 	bl	8002580 <HAL_GetTick>
 80055ea:	6038      	str	r0, [r7, #0]
	for (j=0;j<8;j++)
 80055ec:	2300      	movs	r3, #0
 80055ee:	71bb      	strb	r3, [r7, #6]
 80055f0:	e04e      	b.n	8005690 <DHT_Read+0xb0>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
		{
			// wait for the pin to go high
			if (HAL_GetTick() - timer_out >= 10)
 80055f2:	f7fc ffc5 	bl	8002580 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b09      	cmp	r3, #9
 80055fe:	d901      	bls.n	8005604 <DHT_Read+0x24>
			{
				return 0;
 8005600:	2300      	movs	r3, #0
 8005602:	e049      	b.n	8005698 <DHT_Read+0xb8>
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8005604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005608:	4825      	ldr	r0, [pc, #148]	; (80056a0 <DHT_Read+0xc0>)
 800560a:	f7fd fb29 	bl	8002c60 <HAL_GPIO_ReadPin>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0ee      	beq.n	80055f2 <DHT_Read+0x12>
			}
		}
		delay (50);   // wait for 40 us
 8005614:	2032      	movs	r0, #50	; 0x32
 8005616:	f7ff ff21 	bl	800545c <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 800561a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800561e:	4820      	ldr	r0, [pc, #128]	; (80056a0 <DHT_Read+0xc0>)
 8005620:	f7fd fb1e 	bl	8002c60 <HAL_GPIO_ReadPin>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10e      	bne.n	8005648 <DHT_Read+0x68>
		{
			i&= ~(1<<(7-j));   // write 0
 800562a:	79bb      	ldrb	r3, [r7, #6]
 800562c:	f1c3 0307 	rsb	r3, r3, #7
 8005630:	2201      	movs	r2, #1
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	b25b      	sxtb	r3, r3
 8005638:	43db      	mvns	r3, r3
 800563a:	b25a      	sxtb	r2, r3
 800563c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005640:	4013      	ands	r3, r2
 8005642:	b25b      	sxtb	r3, r3
 8005644:	71fb      	strb	r3, [r7, #7]
 8005646:	e00b      	b.n	8005660 <DHT_Read+0x80>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8005648:	79bb      	ldrb	r3, [r7, #6]
 800564a:	f1c3 0307 	rsb	r3, r3, #7
 800564e:	2201      	movs	r2, #1
 8005650:	fa02 f303 	lsl.w	r3, r2, r3
 8005654:	b25a      	sxtb	r2, r3
 8005656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800565a:	4313      	orrs	r3, r2
 800565c:	b25b      	sxtb	r3, r3
 800565e:	71fb      	strb	r3, [r7, #7]
		timer_out = HAL_GetTick();
 8005660:	f7fc ff8e 	bl	8002580 <HAL_GetTick>
 8005664:	6038      	str	r0, [r7, #0]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8005666:	e008      	b.n	800567a <DHT_Read+0x9a>
		{
			// wait for the pin to go low
			if (HAL_GetTick() - timer_out >= 10)
 8005668:	f7fc ff8a 	bl	8002580 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b09      	cmp	r3, #9
 8005674:	d901      	bls.n	800567a <DHT_Read+0x9a>
			{
				return 0;
 8005676:	2300      	movs	r3, #0
 8005678:	e00e      	b.n	8005698 <DHT_Read+0xb8>
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 800567a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800567e:	4808      	ldr	r0, [pc, #32]	; (80056a0 <DHT_Read+0xc0>)
 8005680:	f7fd faee 	bl	8002c60 <HAL_GPIO_ReadPin>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1ee      	bne.n	8005668 <DHT_Read+0x88>
	for (j=0;j<8;j++)
 800568a:	79bb      	ldrb	r3, [r7, #6]
 800568c:	3301      	adds	r3, #1
 800568e:	71bb      	strb	r3, [r7, #6]
 8005690:	79bb      	ldrb	r3, [r7, #6]
 8005692:	2b07      	cmp	r3, #7
 8005694:	d9b6      	bls.n	8005604 <DHT_Read+0x24>
			}
		}
	}
	return i;
 8005696:	79fb      	ldrb	r3, [r7, #7]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40010800 	.word	0x40010800

080056a4 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  DHT_Start ();
 80056ac:	f7ff ff34 	bl	8005518 <DHT_Start>
	Presence = DHT_Check_Response ();
 80056b0:	f7ff ff58 	bl	8005564 <DHT_Check_Response>
 80056b4:	4603      	mov	r3, r0
 80056b6:	461a      	mov	r2, r3
 80056b8:	4b32      	ldr	r3, [pc, #200]	; (8005784 <DHT_GetData+0xe0>)
 80056ba:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 80056bc:	f7ff ff90 	bl	80055e0 <DHT_Read>
 80056c0:	4603      	mov	r3, r0
 80056c2:	461a      	mov	r2, r3
 80056c4:	4b30      	ldr	r3, [pc, #192]	; (8005788 <DHT_GetData+0xe4>)
 80056c6:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 80056c8:	f7ff ff8a 	bl	80055e0 <DHT_Read>
 80056cc:	4603      	mov	r3, r0
 80056ce:	461a      	mov	r2, r3
 80056d0:	4b2e      	ldr	r3, [pc, #184]	; (800578c <DHT_GetData+0xe8>)
 80056d2:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 80056d4:	f7ff ff84 	bl	80055e0 <DHT_Read>
 80056d8:	4603      	mov	r3, r0
 80056da:	461a      	mov	r2, r3
 80056dc:	4b2c      	ldr	r3, [pc, #176]	; (8005790 <DHT_GetData+0xec>)
 80056de:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 80056e0:	f7ff ff7e 	bl	80055e0 <DHT_Read>
 80056e4:	4603      	mov	r3, r0
 80056e6:	461a      	mov	r2, r3
 80056e8:	4b2a      	ldr	r3, [pc, #168]	; (8005794 <DHT_GetData+0xf0>)
 80056ea:	701a      	strb	r2, [r3, #0]

	
	SUM = DHT_Read();
 80056ec:	f7ff ff78 	bl	80055e0 <DHT_Read>
 80056f0:	4603      	mov	r3, r0
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	4b28      	ldr	r3, [pc, #160]	; (8005798 <DHT_GetData+0xf4>)
 80056f6:	801a      	strh	r2, [r3, #0]
	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 80056f8:	4b27      	ldr	r3, [pc, #156]	; (8005798 <DHT_GetData+0xf4>)
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	4619      	mov	r1, r3
 80056fe:	4b22      	ldr	r3, [pc, #136]	; (8005788 <DHT_GetData+0xe4>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	4b21      	ldr	r3, [pc, #132]	; (800578c <DHT_GetData+0xe8>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	4413      	add	r3, r2
 800570a:	4a21      	ldr	r2, [pc, #132]	; (8005790 <DHT_GetData+0xec>)
 800570c:	7812      	ldrb	r2, [r2, #0]
 800570e:	4413      	add	r3, r2
 8005710:	4a20      	ldr	r2, [pc, #128]	; (8005794 <DHT_GetData+0xf0>)
 8005712:	7812      	ldrb	r2, [r2, #0]
 8005714:	4413      	add	r3, r2
 8005716:	4299      	cmp	r1, r3
 8005718:	d12f      	bne.n	800577a <DHT_GetData+0xd6>
	{
		#if defined(TYPE_DHT11)
		DHT_Data->Temperature = Temp_byte1;
 800571a:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <DHT_GetData+0xec>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	4618      	mov	r0, r3
 8005720:	f7fb fa68 	bl	8000bf4 <__aeabi_ui2f>
 8005724:	4602      	mov	r2, r0
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	601a      	str	r2, [r3, #0]
		DHT_Data->Temp1 = Temp_byte1;
 800572a:	4b19      	ldr	r3, [pc, #100]	; (8005790 <DHT_GetData+0xec>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	4618      	mov	r0, r3
 8005730:	f7fb fa60 	bl	8000bf4 <__aeabi_ui2f>
 8005734:	4602      	mov	r2, r0
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	609a      	str	r2, [r3, #8]
		DHT_Data->Temp2 = Temp_byte2; //tự thêm để chuyển data từ Temp_byte2 sang integer
 800573a:	4b16      	ldr	r3, [pc, #88]	; (8005794 <DHT_GetData+0xf0>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	4618      	mov	r0, r3
 8005740:	f7fb fa58 	bl	8000bf4 <__aeabi_ui2f>
 8005744:	4602      	mov	r2, r0
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	60da      	str	r2, [r3, #12]
		DHT_Data->Humidity = Rh_byte1;
 800574a:	4b0f      	ldr	r3, [pc, #60]	; (8005788 <DHT_GetData+0xe4>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	4618      	mov	r0, r3
 8005750:	f7fb fa50 	bl	8000bf4 <__aeabi_ui2f>
 8005754:	4602      	mov	r2, r0
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	605a      	str	r2, [r3, #4]
		DHT_Data->Hum1 = Rh_byte1;
 800575a:	4b0b      	ldr	r3, [pc, #44]	; (8005788 <DHT_GetData+0xe4>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f7fb fa48 	bl	8000bf4 <__aeabi_ui2f>
 8005764:	4602      	mov	r2, r0
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	611a      	str	r2, [r3, #16]
		DHT_Data->Hum2 = Rh_byte2;
 800576a:	4b08      	ldr	r3, [pc, #32]	; (800578c <DHT_GetData+0xe8>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f7fb fa40 	bl	8000bf4 <__aeabi_ui2f>
 8005774:	4602      	mov	r2, r0
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	615a      	str	r2, [r3, #20]
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
	
	
}
 800577a:	bf00      	nop
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20000436 	.word	0x20000436
 8005788:	20000430 	.word	0x20000430
 800578c:	20000431 	.word	0x20000431
 8005790:	20000432 	.word	0x20000432
 8005794:	20000433 	.word	0x20000433
 8005798:	20000434 	.word	0x20000434

0800579c <spi_write>:
    const uint16_t sun [2][16] = {
		{0x0000, 0x0100, 0x0920, 0x0440, 0x2388, 0x17D0, 0x0FE0, 0x0FE0, 0x6FEC, 0x0FE0, 0x17D0, 0x2388, 0x0440, 0x0920, 0x0100, 0x0000}, //sun : 1
		{0x2020, 0x7070, 0x2020, 0x0000, 0x07C4, 0x0F8E, 0x1E04, 0x3C00, 0x3C00, 0x3C00, 0x3C00, 0x1E70, 0x0FE0, 0x47C0, 0xE000, 0x4000}, //moon : 2
    };

void spi_write(unsigned char data) {
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	4603      	mov	r3, r0
 80057a4:	71fb      	strb	r3, [r7, #7]
    //TODO: Update these buffer labels according to your device.

	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 80057a6:	1df9      	adds	r1, r7, #7
 80057a8:	2364      	movs	r3, #100	; 0x64
 80057aa:	2201      	movs	r2, #1
 80057ac:	4803      	ldr	r0, [pc, #12]	; (80057bc <spi_write+0x20>)
 80057ae:	f7fe ff0b 	bl	80045c8 <HAL_SPI_Transmit>
}
 80057b2:	bf00      	nop
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	20000244 	.word	0x20000244

080057c0 <lcd_write_data>:

/*
 * Writes a data byte to the display. Pulls CS low as required.
 */
void lcd_write_data(unsigned char data) {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	4603      	mov	r3, r0
 80057c8:	71fb      	strb	r3, [r7, #7]
    //CS LOW
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 80057ca:	2200      	movs	r2, #0
 80057cc:	2102      	movs	r1, #2
 80057ce:	480a      	ldr	r0, [pc, #40]	; (80057f8 <lcd_write_data+0x38>)
 80057d0:	f7fd fa5d 	bl	8002c8e <HAL_GPIO_WritePin>
    //DC HIGH
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_SET);
 80057d4:	2201      	movs	r2, #1
 80057d6:	2101      	movs	r1, #1
 80057d8:	4807      	ldr	r0, [pc, #28]	; (80057f8 <lcd_write_data+0x38>)
 80057da:	f7fd fa58 	bl	8002c8e <HAL_GPIO_WritePin>
    //Send data to the SPI register
    spi_write(data);
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff ffdb 	bl	800579c <spi_write>
    //CS HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 80057e6:	2201      	movs	r2, #1
 80057e8:	2102      	movs	r1, #2
 80057ea:	4803      	ldr	r0, [pc, #12]	; (80057f8 <lcd_write_data+0x38>)
 80057ec:	f7fd fa4f 	bl	8002c8e <HAL_GPIO_WritePin>
}
 80057f0:	bf00      	nop
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	40010c00 	.word	0x40010c00

080057fc <lcd_write_command>:

/*
 * Writes a command byte to the display
 */
void lcd_write_command(unsigned char data) {
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	71fb      	strb	r3, [r7, #7]
    //Pull the command AND chip select lines LOW
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET);
 8005806:	2200      	movs	r2, #0
 8005808:	2101      	movs	r1, #1
 800580a:	480a      	ldr	r0, [pc, #40]	; (8005834 <lcd_write_command+0x38>)
 800580c:	f7fd fa3f 	bl	8002c8e <HAL_GPIO_WritePin>
    //CSX = 0;
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8005810:	2200      	movs	r2, #0
 8005812:	2102      	movs	r1, #2
 8005814:	4807      	ldr	r0, [pc, #28]	; (8005834 <lcd_write_command+0x38>)
 8005816:	f7fd fa3a 	bl	8002c8e <HAL_GPIO_WritePin>
    spi_write(data);
 800581a:	79fb      	ldrb	r3, [r7, #7]
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff ffbd 	bl	800579c <spi_write>
    //Return the control lines to HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8005822:	2201      	movs	r2, #1
 8005824:	2102      	movs	r1, #2
 8005826:	4803      	ldr	r0, [pc, #12]	; (8005834 <lcd_write_command+0x38>)
 8005828:	f7fd fa31 	bl	8002c8e <HAL_GPIO_WritePin>
}
 800582c:	bf00      	nop
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40010c00 	.word	0x40010c00

08005838 <lcd_write_register>:

/*
 * Writes data to a specific register.
 * Accepts a 16-bit register address, and 16-bits of data.
 */
void lcd_write_register(unsigned int reg, unsigned int data) {
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
    //Write each register byte, and each data byte seperately.
    lcd_write_command(reg >> 8); //regH
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	0a1b      	lsrs	r3, r3, #8
 8005846:	b2db      	uxtb	r3, r3
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff ffd7 	bl	80057fc <lcd_write_command>
    lcd_write_command(reg & 0xFF); //regL
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	b2db      	uxtb	r3, r3
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff ffd2 	bl	80057fc <lcd_write_command>
    lcd_write_data(data >> 8); //dataH
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	0a1b      	lsrs	r3, r3, #8
 800585c:	b2db      	uxtb	r3, r3
 800585e:	4618      	mov	r0, r3
 8005860:	f7ff ffae 	bl	80057c0 <lcd_write_data>
    lcd_write_data(data & 0xFF); //dataL
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	b2db      	uxtb	r3, r3
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff ffa9 	bl	80057c0 <lcd_write_data>
}
 800586e:	bf00      	nop
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <swap_char>:
}

/*
 * Swaps two 8-bit integers
 */
void swap_char(char *num1, char *num2) {
 8005876:	b480      	push	{r7}
 8005878:	b085      	sub	sp, #20
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	6039      	str	r1, [r7, #0]
    char temp = *num2;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	73fb      	strb	r3, [r7, #15]
    *num2 = *num1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	781a      	ldrb	r2, [r3, #0]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	701a      	strb	r2, [r3, #0]
    *num1 = temp;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	7bfa      	ldrb	r2, [r7, #15]
 8005892:	701a      	strb	r2, [r3, #0]
}
 8005894:	bf00      	nop
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr
	...

080058a0 <delay_ms>:

/*
 * Delay calcualted on 32MHz clock.
 * Does NOT adjust to clock setting
 */
void delay_ms(double millis) {
 80058a0:	b5b0      	push	{r4, r5, r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	e9c7 0100 	strd	r0, r1, [r7]
    int multiplier = 4;
 80058aa:	2304      	movs	r3, #4
 80058ac:	617b      	str	r3, [r7, #20]
    double counter = millis;
 80058ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 80058b6:	e01c      	b.n	80058f2 <delay_ms+0x52>
        while(counter--);
 80058b8:	bf00      	nop
 80058ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80058be:	f04f 0200 	mov.w	r2, #0
 80058c2:	4b11      	ldr	r3, [pc, #68]	; (8005908 <delay_ms+0x68>)
 80058c4:	4620      	mov	r0, r4
 80058c6:	4629      	mov	r1, r5
 80058c8:	f7fa fc4e 	bl	8000168 <__aeabi_dsub>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	f04f 0300 	mov.w	r3, #0
 80058dc:	4620      	mov	r0, r4
 80058de:	4629      	mov	r1, r5
 80058e0:	f7fb f862 	bl	80009a8 <__aeabi_dcmpeq>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0e7      	beq.n	80058ba <delay_ms+0x1a>
        counter = millis;
 80058ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	1e5a      	subs	r2, r3, #1
 80058f6:	617a      	str	r2, [r7, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1dd      	bne.n	80058b8 <delay_ms+0x18>
    }
}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bdb0      	pop	{r4, r5, r7, pc}
 8005906:	bf00      	nop
 8005908:	3ff00000 	.word	0x3ff00000

0800590c <lcd_init>:
/*
 * Initialisation routine for the LCD
 * I got this from the one of the ebay sellers which make them.
 * From Open-Smart
 */
void lcd_init() {
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
    
    //SET control pins for the LCD HIGH (they are active LOW)
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8005910:	2201      	movs	r2, #1
 8005912:	2102      	movs	r1, #2
 8005914:	4812      	ldr	r0, [pc, #72]	; (8005960 <lcd_init+0x54>)
 8005916:	f7fd f9ba 	bl	8002c8e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET); //Data / command select, the datasheet isn't clear on that.
 800591a:	2200      	movs	r2, #0
 800591c:	2101      	movs	r1, #1
 800591e:	4810      	ldr	r0, [pc, #64]	; (8005960 <lcd_init+0x54>)
 8005920:	f7fd f9b5 	bl	8002c8e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET); //RESET pin HIGH
 8005924:	2201      	movs	r2, #1
 8005926:	2140      	movs	r1, #64	; 0x40
 8005928:	480e      	ldr	r0, [pc, #56]	; (8005964 <lcd_init+0x58>)
 800592a:	f7fd f9b0 	bl	8002c8e <HAL_GPIO_WritePin>
    
    //Cycle reset pin
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_RESET);
 800592e:	2200      	movs	r2, #0
 8005930:	2140      	movs	r1, #64	; 0x40
 8005932:	480c      	ldr	r0, [pc, #48]	; (8005964 <lcd_init+0x58>)
 8005934:	f7fd f9ab 	bl	8002c8e <HAL_GPIO_WritePin>
    delay_ms(500);
 8005938:	f04f 0000 	mov.w	r0, #0
 800593c:	490a      	ldr	r1, [pc, #40]	; (8005968 <lcd_init+0x5c>)
 800593e:	f7ff ffaf 	bl	80058a0 <delay_ms>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET);
 8005942:	2201      	movs	r2, #1
 8005944:	2140      	movs	r1, #64	; 0x40
 8005946:	4807      	ldr	r0, [pc, #28]	; (8005964 <lcd_init+0x58>)
 8005948:	f7fd f9a1 	bl	8002c8e <HAL_GPIO_WritePin>
    delay_ms(500);
 800594c:	f04f 0000 	mov.w	r0, #0
 8005950:	4905      	ldr	r1, [pc, #20]	; (8005968 <lcd_init+0x5c>)
 8005952:	f7ff ffa5 	bl	80058a0 <delay_ms>
    
    lcd_init_command_list();
 8005956:	f000 f809 	bl	800596c <lcd_init_command_list>
    
}
 800595a:	bf00      	nop
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	40010c00 	.word	0x40010c00
 8005964:	40010800 	.word	0x40010800
 8005968:	407f4000 	.word	0x407f4000

0800596c <lcd_init_command_list>:
 * This is the magic initialisation routine. Supplied by Open-Smart
 * who sell cheap modules on eBay.
 * This routine works with OTM2201A and ILI9925.
 */
void lcd_init_command_list(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
    
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0000); // Set SAP,DSTB,STB
 8005970:	2100      	movs	r1, #0
 8005972:	2010      	movs	r0, #16
 8005974:	f7ff ff60 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL2, 0x0000); // Set APON,PON,AON,VCI1EN,VC
 8005978:	2100      	movs	r1, #0
 800597a:	2011      	movs	r0, #17
 800597c:	f7ff ff5c 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x0000); // Set BT,DC1,DC2,DC3
 8005980:	2100      	movs	r1, #0
 8005982:	2012      	movs	r0, #18
 8005984:	f7ff ff58 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x0000); // Set GVDD
 8005988:	2100      	movs	r1, #0
 800598a:	2013      	movs	r0, #19
 800598c:	f7ff ff54 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x0000); // Set VCOMH/VCOML voltage
 8005990:	2100      	movs	r1, #0
 8005992:	2014      	movs	r0, #20
 8005994:	f7ff ff50 	bl	8005838 <lcd_write_register>
    
    delay_ms(10);
 8005998:	f04f 0000 	mov.w	r0, #0
 800599c:	4960      	ldr	r1, [pc, #384]	; (8005b20 <lcd_init_command_list+0x1b4>)
 800599e:	f7ff ff7f 	bl	80058a0 <delay_ms>
    
    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // EVERYTHING ON
 80059a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80059a6:	2011      	movs	r0, #17
 80059a8:	f7ff ff46 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x7000); // Set BT,DC1,DC2,DC3
 80059ac:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80059b0:	2012      	movs	r0, #18
 80059b2:	f7ff ff41 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x006F); // Set GVDD   /*007F 0088 */
 80059b6:	216f      	movs	r1, #111	; 0x6f
 80059b8:	2013      	movs	r0, #19
 80059ba:	f7ff ff3d 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x495F); // Set VCOMH/VCOML voltage
 80059be:	f644 115f 	movw	r1, #18783	; 0x495f
 80059c2:	2014      	movs	r0, #20
 80059c4:	f7ff ff38 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0F00); // Set SAP,DSTB,STB
 80059c8:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80059cc:	2010      	movs	r0, #16
 80059ce:	f7ff ff33 	bl	8005838 <lcd_write_register>
    
    delay_ms(10);
 80059d2:	f04f 0000 	mov.w	r0, #0
 80059d6:	4952      	ldr	r1, [pc, #328]	; (8005b20 <lcd_init_command_list+0x1b4>)
 80059d8:	f7ff ff62 	bl	80058a0 <delay_ms>
    

    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // Set APON,PON,AON,VCI1EN,VC
 80059dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80059e0:	2011      	movs	r0, #17
 80059e2:	f7ff ff29 	bl	8005838 <lcd_write_register>

    delay_ms(50);
 80059e6:	f04f 0000 	mov.w	r0, #0
 80059ea:	494e      	ldr	r1, [pc, #312]	; (8005b24 <lcd_init_command_list+0x1b8>)
 80059ec:	f7ff ff58 	bl	80058a0 <delay_ms>


    lcd_write_register(ILI9225_DRIVER_OUTPUT_CTRL, 0x011C); // set the display line number and display direction
 80059f0:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80059f4:	2001      	movs	r0, #1
 80059f6:	f7ff ff1f 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_LCD_AC_DRIVING_CTRL, 0x0100); // set 1 line inversion
 80059fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059fe:	2002      	movs	r0, #2
 8005a00:	f7ff ff1a 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_ENTRY_MODE, 0x1030); // set GRAM write direction and BGR=1.
 8005a04:	f241 0130 	movw	r1, #4144	; 0x1030
 8005a08:	2003      	movs	r0, #3
 8005a0a:	f7ff ff15 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_DISP_CTRL1, 0x0000); // Display off
 8005a0e:	2100      	movs	r1, #0
 8005a10:	2007      	movs	r0, #7
 8005a12:	f7ff ff11 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_BLANK_PERIOD_CTRL1, 0x0202); // set the back porch and front porch (2 lines, minimum)
 8005a16:	f240 2102 	movw	r1, #514	; 0x202
 8005a1a:	2008      	movs	r0, #8
 8005a1c:	f7ff ff0c 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_FRAME_CYCLE_CTRL, 0x0000); // set the clocks number per line
 8005a20:	2100      	movs	r1, #0
 8005a22:	200b      	movs	r0, #11
 8005a24:	f7ff ff08 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_INTERFACE_CTRL, 0x0000); // CPU interface
 8005a28:	2100      	movs	r1, #0
 8005a2a:	200c      	movs	r0, #12
 8005a2c:	f7ff ff04 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_OSC_CTRL, 0x0F01); // Set Osc
 8005a30:	f640 7101 	movw	r1, #3841	; 0xf01
 8005a34:	200f      	movs	r0, #15
 8005a36:	f7ff feff 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_VCI_RECYCLING, 0x0000); // Set VCI recycling
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	2015      	movs	r0, #21
 8005a3e:	f7ff fefb 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET1, 0x0000); // RAM Address
 8005a42:	2100      	movs	r1, #0
 8005a44:	2020      	movs	r0, #32
 8005a46:	f7ff fef7 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2, 0x0000); // RAM Address
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	2021      	movs	r0, #33	; 0x21
 8005a4e:	f7ff fef3 	bl	8005838 <lcd_write_register>

    /* Set GRAM area */
    lcd_write_register(ILI9225_GATE_SCAN_CTRL, 0x0000); 
 8005a52:	2100      	movs	r1, #0
 8005a54:	2030      	movs	r0, #48	; 0x30
 8005a56:	f7ff feef 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL1, 0x00DB); 
 8005a5a:	21db      	movs	r1, #219	; 0xdb
 8005a5c:	2031      	movs	r0, #49	; 0x31
 8005a5e:	f7ff feeb 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL2, 0x0000); 
 8005a62:	2100      	movs	r1, #0
 8005a64:	2032      	movs	r0, #50	; 0x32
 8005a66:	f7ff fee7 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL3, 0x0000); 
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	2033      	movs	r0, #51	; 0x33
 8005a6e:	f7ff fee3 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS1, 0x00DB); 
 8005a72:	21db      	movs	r1, #219	; 0xdb
 8005a74:	2034      	movs	r0, #52	; 0x34
 8005a76:	f7ff fedf 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS2, 0x0000); 
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	2035      	movs	r0, #53	; 0x35
 8005a7e:	f7ff fedb 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1, 0x00AF); 
 8005a82:	21af      	movs	r1, #175	; 0xaf
 8005a84:	2036      	movs	r0, #54	; 0x36
 8005a86:	f7ff fed7 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2, 0x0000); 
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	2037      	movs	r0, #55	; 0x37
 8005a8e:	f7ff fed3 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1, 0x00DB); 
 8005a92:	21db      	movs	r1, #219	; 0xdb
 8005a94:	2038      	movs	r0, #56	; 0x38
 8005a96:	f7ff fecf 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000); 
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	2039      	movs	r0, #57	; 0x39
 8005a9e:	f7ff fecb 	bl	8005838 <lcd_write_register>

    /* Set GAMMA curve */
    lcd_write_register(ILI9225_GAMMA_CTRL1, 0x0000); 
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	2050      	movs	r0, #80	; 0x50
 8005aa6:	f7ff fec7 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL2, 0x0808); 
 8005aaa:	f640 0108 	movw	r1, #2056	; 0x808
 8005aae:	2051      	movs	r0, #81	; 0x51
 8005ab0:	f7ff fec2 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL3, 0x080A); 
 8005ab4:	f640 010a 	movw	r1, #2058	; 0x80a
 8005ab8:	2052      	movs	r0, #82	; 0x52
 8005aba:	f7ff febd 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL4, 0x000A); 
 8005abe:	210a      	movs	r1, #10
 8005ac0:	2053      	movs	r0, #83	; 0x53
 8005ac2:	f7ff feb9 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL5, 0x0A08); 
 8005ac6:	f640 2108 	movw	r1, #2568	; 0xa08
 8005aca:	2054      	movs	r0, #84	; 0x54
 8005acc:	f7ff feb4 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL6, 0x0808); 
 8005ad0:	f640 0108 	movw	r1, #2056	; 0x808
 8005ad4:	2055      	movs	r0, #85	; 0x55
 8005ad6:	f7ff feaf 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL7, 0x0000); 
 8005ada:	2100      	movs	r1, #0
 8005adc:	2056      	movs	r0, #86	; 0x56
 8005ade:	f7ff feab 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL8, 0x0A00); 
 8005ae2:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8005ae6:	2057      	movs	r0, #87	; 0x57
 8005ae8:	f7ff fea6 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL9, 0x0710); 
 8005aec:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8005af0:	2058      	movs	r0, #88	; 0x58
 8005af2:	f7ff fea1 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL10, 0x0710); 
 8005af6:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8005afa:	2059      	movs	r0, #89	; 0x59
 8005afc:	f7ff fe9c 	bl	8005838 <lcd_write_register>

    lcd_write_register(ILI9225_DISP_CTRL1, 0x0012); 
 8005b00:	2112      	movs	r1, #18
 8005b02:	2007      	movs	r0, #7
 8005b04:	f7ff fe98 	bl	8005838 <lcd_write_register>

    delay_ms(50); 
 8005b08:	f04f 0000 	mov.w	r0, #0
 8005b0c:	4905      	ldr	r1, [pc, #20]	; (8005b24 <lcd_init_command_list+0x1b8>)
 8005b0e:	f7ff fec7 	bl	80058a0 <delay_ms>
    
    lcd_write_register(ILI9225_DISP_CTRL1, 0x1017);
 8005b12:	f241 0117 	movw	r1, #4119	; 0x1017
 8005b16:	2007      	movs	r0, #7
 8005b18:	f7ff fe8e 	bl	8005838 <lcd_write_register>

    
}
 8005b1c:	bf00      	nop
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40240000 	.word	0x40240000
 8005b24:	40490000 	.word	0x40490000

08005b28 <draw_pixel>:
 * Draws a single pixel to the LCD at position X, Y, with 
 * Colour.
 * 
 * 28 bytes per pixel. Use it wisely.
 */
void draw_pixel(char x, char y, unsigned int colour) {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	4603      	mov	r3, r0
 8005b30:	603a      	str	r2, [r7, #0]
 8005b32:	71fb      	strb	r3, [r7, #7]
 8005b34:	460b      	mov	r3, r1
 8005b36:	71bb      	strb	r3, [r7, #6]
    //If we are in landscape view then translate -90 degrees
    if(LANDSCAPE) {
        swap_char(&x, &y);
 8005b38:	1dba      	adds	r2, r7, #6
 8005b3a:	1dfb      	adds	r3, r7, #7
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff fe99 	bl	8005876 <swap_char>
        y = WIDTH - y;
 8005b44:	79ba      	ldrb	r2, [r7, #6]
 8005b46:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8005b4a:	1a9b      	subs	r3, r3, r2
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	71bb      	strb	r3, [r7, #6]
    }
    
    //Set the x, y position that we want to write to
    set_draw_window(x, y, x+1, y+1);
 8005b50:	79f8      	ldrb	r0, [r7, #7]
 8005b52:	79b9      	ldrb	r1, [r7, #6]
 8005b54:	79fb      	ldrb	r3, [r7, #7]
 8005b56:	3301      	adds	r3, #1
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	79bb      	ldrb	r3, [r7, #6]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f000 f87a 	bl	8005c58 <set_draw_window>
    lcd_write_data(colour >> 8);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	0a1b      	lsrs	r3, r3, #8
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff fe28 	bl	80057c0 <lcd_write_data>
    lcd_write_data(colour & 0xFF);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7ff fe23 	bl	80057c0 <lcd_write_data>
}
 8005b7a:	bf00      	nop
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <fill_rectangle>:

/*
 * Fills a rectangle with a given colour
 */
void fill_rectangle(char x1, char y1, char x2, char y2, unsigned int colour) {
 8005b84:	b590      	push	{r4, r7, lr}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	4611      	mov	r1, r2
 8005b90:	461a      	mov	r2, r3
 8005b92:	4623      	mov	r3, r4
 8005b94:	71fb      	strb	r3, [r7, #7]
 8005b96:	4603      	mov	r3, r0
 8005b98:	71bb      	strb	r3, [r7, #6]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	717b      	strb	r3, [r7, #5]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	713b      	strb	r3, [r7, #4]
    //If landscape view then translate everyting -90 degrees
    if(LANDSCAPE) {
        swap_char(&x1, &y1);
 8005ba2:	1dba      	adds	r2, r7, #6
 8005ba4:	1dfb      	adds	r3, r7, #7
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff fe64 	bl	8005876 <swap_char>
        swap_char(&x2, &y2);
 8005bae:	1d3a      	adds	r2, r7, #4
 8005bb0:	1d7b      	adds	r3, r7, #5
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7ff fe5e 	bl	8005876 <swap_char>
        y1 = WIDTH - y1;
 8005bba:	79ba      	ldrb	r2, [r7, #6]
 8005bbc:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8005bc0:	1a9b      	subs	r3, r3, r2
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	71bb      	strb	r3, [r7, #6]
        y2 = WIDTH - y2;
 8005bc6:	793a      	ldrb	r2, [r7, #4]
 8005bc8:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8005bcc:	1a9b      	subs	r3, r3, r2
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	713b      	strb	r3, [r7, #4]
        swap_char(&y2, &y1);
 8005bd2:	1dba      	adds	r2, r7, #6
 8005bd4:	1d3b      	adds	r3, r7, #4
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7ff fe4c 	bl	8005876 <swap_char>
    }
    
    //Split the colour int in to two bytes
    unsigned char colour_high = colour >> 8;
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	0a1b      	lsrs	r3, r3, #8
 8005be2:	73fb      	strb	r3, [r7, #15]
    unsigned char colour_low = colour & 0xFF;
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	73bb      	strb	r3, [r7, #14]
    
    //Set the drawing region
    set_draw_window(x1, y1, x2, y2);
 8005be8:	79f8      	ldrb	r0, [r7, #7]
 8005bea:	79b9      	ldrb	r1, [r7, #6]
 8005bec:	797a      	ldrb	r2, [r7, #5]
 8005bee:	793b      	ldrb	r3, [r7, #4]
 8005bf0:	f000 f832 	bl	8005c58 <set_draw_window>
    
    //We will do the SPI write manually here for speed
    //( the data sheet says it doesn't matter if CSX changes between 
    // data sections but I don't trust it.)
    //CSX low to begin data
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2102      	movs	r1, #2
 8005bf8:	4816      	ldr	r0, [pc, #88]	; (8005c54 <fill_rectangle+0xd0>)
 8005bfa:	f7fd f848 	bl	8002c8e <HAL_GPIO_WritePin>

    //Write colour to each pixel
    for(int y = 0; y < y2-y1+1 ; y++) {
 8005bfe:	2300      	movs	r3, #0
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	e017      	b.n	8005c34 <fill_rectangle+0xb0>
        for(int x = 0; x < x2-x1+1; x++) {
 8005c04:	2300      	movs	r3, #0
 8005c06:	613b      	str	r3, [r7, #16]
 8005c08:	e00a      	b.n	8005c20 <fill_rectangle+0x9c>
            lcd_write_data(colour_high);
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff fdd7 	bl	80057c0 <lcd_write_data>
            lcd_write_data(colour_low);
 8005c12:	7bbb      	ldrb	r3, [r7, #14]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff fdd3 	bl	80057c0 <lcd_write_data>
        for(int x = 0; x < x2-x1+1; x++) {
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	613b      	str	r3, [r7, #16]
 8005c20:	797b      	ldrb	r3, [r7, #5]
 8005c22:	461a      	mov	r2, r3
 8005c24:	79fb      	ldrb	r3, [r7, #7]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	dded      	ble.n	8005c0a <fill_rectangle+0x86>
    for(int y = 0; y < y2-y1+1 ; y++) {
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	3301      	adds	r3, #1
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	793b      	ldrb	r3, [r7, #4]
 8005c36:	461a      	mov	r2, r3
 8005c38:	79bb      	ldrb	r3, [r7, #6]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	dde0      	ble.n	8005c04 <fill_rectangle+0x80>
        }
    }
    //Return CSX to high
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8005c42:	2201      	movs	r2, #1
 8005c44:	2102      	movs	r1, #2
 8005c46:	4803      	ldr	r0, [pc, #12]	; (8005c54 <fill_rectangle+0xd0>)
 8005c48:	f7fd f821 	bl	8002c8e <HAL_GPIO_WritePin>
}
 8005c4c:	bf00      	nop
 8005c4e:	371c      	adds	r7, #28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd90      	pop	{r4, r7, pc}
 8005c54:	40010c00 	.word	0x40010c00

08005c58 <set_draw_window>:
 * Should only be called within a function that draws something
 * to the display.
 * 
 * NOTE: This is 26 bytes. Use it sparingly (see draw_bitmap())
 */
void set_draw_window(char x1, char y1, char x2, char y2) {
 8005c58:	b590      	push	{r4, r7, lr}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4604      	mov	r4, r0
 8005c60:	4608      	mov	r0, r1
 8005c62:	4611      	mov	r1, r2
 8005c64:	461a      	mov	r2, r3
 8005c66:	4623      	mov	r3, r4
 8005c68:	71fb      	strb	r3, [r7, #7]
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	71bb      	strb	r3, [r7, #6]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	717b      	strb	r3, [r7, #5]
 8005c72:	4613      	mov	r3, r2
 8005c74:	713b      	strb	r3, [r7, #4]
    
    //Check that the values are in order
    if(x2 < x1)
 8005c76:	797a      	ldrb	r2, [r7, #5]
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d205      	bcs.n	8005c8a <set_draw_window+0x32>
        swap_char(&x2, &x1);
 8005c7e:	1dfa      	adds	r2, r7, #7
 8005c80:	1d7b      	adds	r3, r7, #5
 8005c82:	4611      	mov	r1, r2
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7ff fdf6 	bl	8005876 <swap_char>
    if(y2 < y1)
 8005c8a:	793a      	ldrb	r2, [r7, #4]
 8005c8c:	79bb      	ldrb	r3, [r7, #6]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d205      	bcs.n	8005c9e <set_draw_window+0x46>
        swap_char(&y2, &y1);
 8005c92:	1dba      	adds	r2, r7, #6
 8005c94:	1d3b      	adds	r3, r7, #4
 8005c96:	4611      	mov	r1, r2
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7ff fdec 	bl	8005876 <swap_char>

    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1,x2);
 8005c9e:	797b      	ldrb	r3, [r7, #5]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	2036      	movs	r0, #54	; 0x36
 8005ca4:	f7ff fdc8 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2,x1);
 8005ca8:	79fb      	ldrb	r3, [r7, #7]
 8005caa:	4619      	mov	r1, r3
 8005cac:	2037      	movs	r0, #55	; 0x37
 8005cae:	f7ff fdc3 	bl	8005838 <lcd_write_register>

    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1,y2);
 8005cb2:	793b      	ldrb	r3, [r7, #4]
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	2038      	movs	r0, #56	; 0x38
 8005cb8:	f7ff fdbe 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2,y1);
 8005cbc:	79bb      	ldrb	r3, [r7, #6]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	2039      	movs	r0, #57	; 0x39
 8005cc2:	f7ff fdb9 	bl	8005838 <lcd_write_register>

    lcd_write_register(ILI9225_RAM_ADDR_SET1,x1);
 8005cc6:	79fb      	ldrb	r3, [r7, #7]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	2020      	movs	r0, #32
 8005ccc:	f7ff fdb4 	bl	8005838 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2,y1);
 8005cd0:	79bb      	ldrb	r3, [r7, #6]
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	2021      	movs	r0, #33	; 0x21
 8005cd6:	f7ff fdaf 	bl	8005838 <lcd_write_register>

    lcd_write_command(0x00);
 8005cda:	2000      	movs	r0, #0
 8005cdc:	f7ff fd8e 	bl	80057fc <lcd_write_command>
    lcd_write_command(0x22);
 8005ce0:	2022      	movs	r0, #34	; 0x22
 8005ce2:	f7ff fd8b 	bl	80057fc <lcd_write_command>
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd90      	pop	{r4, r7, pc}
	...

08005cf0 <draw_char>:
 * 
 * NOTE:
 * This sends approx. 800 bytes per char to the LCD, but it does preserver
 * the background image. Use the draw_fast_char() function where possible.
 */
void draw_char(char x, char y, char c, unsigned int colour, char size) {
 8005cf0:	b590      	push	{r4, r7, lr}
 8005cf2:	b089      	sub	sp, #36	; 0x24
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	603b      	str	r3, [r7, #0]
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	71fb      	strb	r3, [r7, #7]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	71bb      	strb	r3, [r7, #6]
 8005d00:	4613      	mov	r3, r2
 8005d02:	717b      	strb	r3, [r7, #5]
    int i, j;
    char line;
    unsigned int font_index = (c - 32);
 8005d04:	797b      	ldrb	r3, [r7, #5]
 8005d06:	3b20      	subs	r3, #32
 8005d08:	60fb      	str	r3, [r7, #12]
    
    //Get the line of pixels from the font file
    for(i=0; i<13; i++ ) {
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	e070      	b.n	8005df2 <draw_char+0x102>

        line = FontLarge[font_index][12 - i];
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f1c3 010c 	rsb	r1, r3, #12
 8005d16:	483b      	ldr	r0, [pc, #236]	; (8005e04 <draw_char+0x114>)
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	4403      	add	r3, r0
 8005d26:	440b      	add	r3, r1
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	72fb      	strb	r3, [r7, #11]
        
        //Draw the pixels to screen
        for(j=0; j<8; j++) {
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	613b      	str	r3, [r7, #16]
 8005d30:	e059      	b.n	8005de6 <draw_char+0xf6>
            if(line & (0x01 << j)) {
 8005d32:	7afa      	ldrb	r2, [r7, #11]
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	fa42 f303 	asr.w	r3, r2, r3
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d04e      	beq.n	8005de0 <draw_char+0xf0>
                if(size == 1) {
 8005d42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d110      	bne.n	8005d6c <draw_char+0x7c>
                    //If we are just doing the smallest size font then do a single pixel each
                    draw_pixel(x+(8-j), y+i, colour);
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	79fa      	ldrb	r2, [r7, #7]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	3308      	adds	r3, #8
 8005d56:	b2d8      	uxtb	r0, r3
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	79bb      	ldrb	r3, [r7, #6]
 8005d5e:	4413      	add	r3, r2
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	4619      	mov	r1, r3
 8005d66:	f7ff fedf 	bl	8005b28 <draw_pixel>
 8005d6a:	e039      	b.n	8005de0 <draw_char+0xf0>
                }
                else {
                    // do a small box to represent each pixel
                    fill_rectangle(x+((8-j)*size), y+((i)*size), x+((8-j)*size)+size, y+((i)*size)+size, colour);
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f1c3 0308 	rsb	r3, r3, #8
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005d78:	fb02 f303 	mul.w	r3, r2, r3
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	79fb      	ldrb	r3, [r7, #7]
 8005d80:	4413      	add	r3, r2
 8005d82:	b2d8      	uxtb	r0, r3
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005d8c:	fb02 f303 	mul.w	r3, r2, r3
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	79bb      	ldrb	r3, [r7, #6]
 8005d94:	4413      	add	r3, r2
 8005d96:	b2d9      	uxtb	r1, r3
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f1c3 0308 	rsb	r3, r3, #8
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005da4:	fb02 f303 	mul.w	r3, r2, r3
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	79fb      	ldrb	r3, [r7, #7]
 8005dac:	4413      	add	r3, r2
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005db4:	4413      	add	r3, r2
 8005db6:	b2dc      	uxtb	r4, r3
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005dc0:	fb02 f303 	mul.w	r3, r2, r3
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	79bb      	ldrb	r3, [r7, #6]
 8005dc8:	4413      	add	r3, r2
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005dd0:	4413      	add	r3, r2
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	4622      	mov	r2, r4
 8005ddc:	f7ff fed2 	bl	8005b84 <fill_rectangle>
        for(j=0; j<8; j++) {
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	3301      	adds	r3, #1
 8005de4:	613b      	str	r3, [r7, #16]
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b07      	cmp	r3, #7
 8005dea:	dda2      	ble.n	8005d32 <draw_char+0x42>
    for(i=0; i<13; i++ ) {
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	3301      	adds	r3, #1
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2b0c      	cmp	r3, #12
 8005df6:	dd8b      	ble.n	8005d10 <draw_char+0x20>
                }
            }
        }
    }
}
 8005df8:	bf00      	nop
 8005dfa:	bf00      	nop
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd90      	pop	{r4, r7, pc}
 8005e02:	bf00      	nop
 8005e04:	0800914c 	.word	0x0800914c

08005e08 <draw_string>:

/*
 * Writes a string to the display as an array of chars at position x, y with 
 * a given colour and size.
 */
void draw_string(char x, char y, unsigned int colour, char size, char *str) {
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af02      	add	r7, sp, #8
 8005e0e:	603a      	str	r2, [r7, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	4603      	mov	r3, r0
 8005e14:	71fb      	strb	r3, [r7, #7]
 8005e16:	460b      	mov	r3, r1
 8005e18:	71bb      	strb	r3, [r7, #6]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	717b      	strb	r3, [r7, #5]
    
    //Work out the size of each character
    int char_width = size * 9;
 8005e1e:	797a      	ldrb	r2, [r7, #5]
 8005e20:	4613      	mov	r3, r2
 8005e22:	00db      	lsls	r3, r3, #3
 8005e24:	4413      	add	r3, r2
 8005e26:	613b      	str	r3, [r7, #16]
    //Iterate through each character in the string
    int counter = 0;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 8005e2c:	e015      	b.n	8005e5a <draw_string+0x52>
        //Calculate character position
        int char_pos = x + (counter * char_width);
 8005e2e:	79fa      	ldrb	r2, [r7, #7]
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	6939      	ldr	r1, [r7, #16]
 8005e34:	fb01 f303 	mul.w	r3, r1, r3
 8005e38:	4413      	add	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]
        //Write char to the display
        draw_char(char_pos, y, str[counter], colour, size);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	b2d8      	uxtb	r0, r3
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	6a3a      	ldr	r2, [r7, #32]
 8005e44:	4413      	add	r3, r2
 8005e46:	781a      	ldrb	r2, [r3, #0]
 8005e48:	79b9      	ldrb	r1, [r7, #6]
 8005e4a:	797b      	ldrb	r3, [r7, #5]
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	f7ff ff4e 	bl	8005cf0 <draw_char>
        //Next character
        counter++;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	3301      	adds	r3, #1
 8005e58:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	6a3a      	ldr	r2, [r7, #32]
 8005e5e:	4413      	add	r3, r2
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1e3      	bne.n	8005e2e <draw_string+0x26>
    }
}
 8005e66:	bf00      	nop
 8005e68:	bf00      	nop
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <draw_pic_8bit>:
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);

}


void draw_pic_8bit(char x, char y, char c, unsigned int colour, char size) {
 8005e70:	b590      	push	{r4, r7, lr}
 8005e72:	b089      	sub	sp, #36	; 0x24
 8005e74:	af02      	add	r7, sp, #8
 8005e76:	603b      	str	r3, [r7, #0]
 8005e78:	4603      	mov	r3, r0
 8005e7a:	71fb      	strb	r3, [r7, #7]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	71bb      	strb	r3, [r7, #6]
 8005e80:	4613      	mov	r3, r2
 8005e82:	717b      	strb	r3, [r7, #5]
    int i, j;
    uint8_t line;
    unsigned int font_index = c-1;
 8005e84:	797b      	ldrb	r3, [r7, #5]
 8005e86:	3b01      	subs	r3, #1
 8005e88:	60fb      	str	r3, [r7, #12]
//    for(font_index=0; font_index<2; font_index++){

    //Get the line of pixels from the font file
    for(i=0; i<8; i++ ) {
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	e06c      	b.n	8005f6a <draw_pic_8bit+0xfa>

        line = cloud[font_index][7-i];
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f1c3 0307 	rsb	r3, r3, #7
 8005e96:	4939      	ldr	r1, [pc, #228]	; (8005f7c <draw_pic_8bit+0x10c>)
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	00d2      	lsls	r2, r2, #3
 8005e9c:	440a      	add	r2, r1
 8005e9e:	4413      	add	r3, r2
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	72fb      	strb	r3, [r7, #11]

        //Draw the pixels to screen
        for(j=0; j<8; j++) {
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	613b      	str	r3, [r7, #16]
 8005ea8:	e059      	b.n	8005f5e <draw_pic_8bit+0xee>
            if(line & (0x01 << j)) {
 8005eaa:	7afa      	ldrb	r2, [r7, #11]
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	fa42 f303 	asr.w	r3, r2, r3
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d04e      	beq.n	8005f58 <draw_pic_8bit+0xe8>

                if(size == 1) {
 8005eba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d110      	bne.n	8005ee4 <draw_pic_8bit+0x74>
                    //If we are just doing the smallest size font then do a single pixel each
                    draw_pixel(x+(8-j), y+i, colour);
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	79fa      	ldrb	r2, [r7, #7]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	3308      	adds	r3, #8
 8005ece:	b2d8      	uxtb	r0, r3
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	79bb      	ldrb	r3, [r7, #6]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	4619      	mov	r1, r3
 8005ede:	f7ff fe23 	bl	8005b28 <draw_pixel>
 8005ee2:	e039      	b.n	8005f58 <draw_pic_8bit+0xe8>
                }
                else {
                    // do a small box to represent each pixel
                    fill_rectangle(x+((8-j)*size), y+((i)*size), x+((8-j)*size)+size, y+((i)*size)+size, colour);
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f1c3 0308 	rsb	r3, r3, #8
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005ef0:	fb02 f303 	mul.w	r3, r2, r3
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	79fb      	ldrb	r3, [r7, #7]
 8005ef8:	4413      	add	r3, r2
 8005efa:	b2d8      	uxtb	r0, r3
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005f04:	fb02 f303 	mul.w	r3, r2, r3
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	79bb      	ldrb	r3, [r7, #6]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	b2d9      	uxtb	r1, r3
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f1c3 0308 	rsb	r3, r3, #8
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005f1c:	fb02 f303 	mul.w	r3, r2, r3
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	79fb      	ldrb	r3, [r7, #7]
 8005f24:	4413      	add	r3, r2
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f2c:	4413      	add	r3, r2
 8005f2e:	b2dc      	uxtb	r4, r3
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005f38:	fb02 f303 	mul.w	r3, r2, r3
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	79bb      	ldrb	r3, [r7, #6]
 8005f40:	4413      	add	r3, r2
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f48:	4413      	add	r3, r2
 8005f4a:	b2da      	uxtb	r2, r3
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	4613      	mov	r3, r2
 8005f52:	4622      	mov	r2, r4
 8005f54:	f7ff fe16 	bl	8005b84 <fill_rectangle>
        for(j=0; j<8; j++) {
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	613b      	str	r3, [r7, #16]
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	2b07      	cmp	r3, #7
 8005f62:	dda2      	ble.n	8005eaa <draw_pic_8bit+0x3a>
    for(i=0; i<8; i++ ) {
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	3301      	adds	r3, #1
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b07      	cmp	r3, #7
 8005f6e:	dd8f      	ble.n	8005e90 <draw_pic_8bit+0x20>
                }
            }
        }
    }
}
 8005f70:	bf00      	nop
 8005f72:	bf00      	nop
 8005f74:	371c      	adds	r7, #28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd90      	pop	{r4, r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	08009620 	.word	0x08009620

08005f80 <draw_pic_16bit>:

void draw_pic_16bit(char x, char y, char c, unsigned int colour, char size) {
 8005f80:	b590      	push	{r4, r7, lr}
 8005f82:	b089      	sub	sp, #36	; 0x24
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	4603      	mov	r3, r0
 8005f8a:	71fb      	strb	r3, [r7, #7]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	71bb      	strb	r3, [r7, #6]
 8005f90:	4613      	mov	r3, r2
 8005f92:	717b      	strb	r3, [r7, #5]
    int i, j;
    uint16_t line;
    unsigned int font_index = c-1;
 8005f94:	797b      	ldrb	r3, [r7, #5]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	60fb      	str	r3, [r7, #12]
//    for(font_index=0; font_index<2; font_index++){

    //Get the line of pixels from the font file
    for(i=0; i<16; i++ ) {
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	617b      	str	r3, [r7, #20]
 8005f9e:	e06a      	b.n	8006076 <draw_pic_16bit+0xf6>

        line = sun[font_index][i];
 8005fa0:	4939      	ldr	r1, [pc, #228]	; (8006088 <draw_pic_16bit+0x108>)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	011a      	lsls	r2, r3, #4
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005fae:	817b      	strh	r3, [r7, #10]

        //Draw the pixels to screen
        for(j=0; j<16; j++) {
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	613b      	str	r3, [r7, #16]
 8005fb4:	e059      	b.n	800606a <draw_pic_16bit+0xea>
            if(line & (0x01 << j)) {
 8005fb6:	897a      	ldrh	r2, [r7, #10]
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	fa42 f303 	asr.w	r3, r2, r3
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d04e      	beq.n	8006064 <draw_pic_16bit+0xe4>

                if(size == 1) {
 8005fc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d110      	bne.n	8005ff0 <draw_pic_16bit+0x70>
                    //If we are just doing the smallest size font then do a single pixel each
                    draw_pixel(x+(16-j), y+i, colour);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	79fa      	ldrb	r2, [r7, #7]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	3310      	adds	r3, #16
 8005fda:	b2d8      	uxtb	r0, r3
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	79bb      	ldrb	r3, [r7, #6]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	4619      	mov	r1, r3
 8005fea:	f7ff fd9d 	bl	8005b28 <draw_pixel>
 8005fee:	e039      	b.n	8006064 <draw_pic_16bit+0xe4>
                }
                else {
                    // do a small box to represent each pixel
                    fill_rectangle(x+((16-j)*size), y+((i)*size), x+((16-j)*size)+size, y+((i)*size)+size, colour);
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f1c3 0310 	rsb	r3, r3, #16
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005ffc:	fb02 f303 	mul.w	r3, r2, r3
 8006000:	b2da      	uxtb	r2, r3
 8006002:	79fb      	ldrb	r3, [r7, #7]
 8006004:	4413      	add	r3, r2
 8006006:	b2d8      	uxtb	r0, r3
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006010:	fb02 f303 	mul.w	r3, r2, r3
 8006014:	b2da      	uxtb	r2, r3
 8006016:	79bb      	ldrb	r3, [r7, #6]
 8006018:	4413      	add	r3, r2
 800601a:	b2d9      	uxtb	r1, r3
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	f1c3 0310 	rsb	r3, r3, #16
 8006022:	b2db      	uxtb	r3, r3
 8006024:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006028:	fb02 f303 	mul.w	r3, r2, r3
 800602c:	b2da      	uxtb	r2, r3
 800602e:	79fb      	ldrb	r3, [r7, #7]
 8006030:	4413      	add	r3, r2
 8006032:	b2da      	uxtb	r2, r3
 8006034:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006038:	4413      	add	r3, r2
 800603a:	b2dc      	uxtb	r4, r3
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	b2db      	uxtb	r3, r3
 8006040:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006044:	fb02 f303 	mul.w	r3, r2, r3
 8006048:	b2da      	uxtb	r2, r3
 800604a:	79bb      	ldrb	r3, [r7, #6]
 800604c:	4413      	add	r3, r2
 800604e:	b2da      	uxtb	r2, r3
 8006050:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006054:	4413      	add	r3, r2
 8006056:	b2da      	uxtb	r2, r3
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	4613      	mov	r3, r2
 800605e:	4622      	mov	r2, r4
 8006060:	f7ff fd90 	bl	8005b84 <fill_rectangle>
        for(j=0; j<16; j++) {
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	3301      	adds	r3, #1
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	2b0f      	cmp	r3, #15
 800606e:	dda2      	ble.n	8005fb6 <draw_pic_16bit+0x36>
    for(i=0; i<16; i++ ) {
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	3301      	adds	r3, #1
 8006074:	617b      	str	r3, [r7, #20]
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	2b0f      	cmp	r3, #15
 800607a:	dd91      	ble.n	8005fa0 <draw_pic_16bit+0x20>
                }
            }
        }
    }
}
 800607c:	bf00      	nop
 800607e:	bf00      	nop
 8006080:	371c      	adds	r7, #28
 8006082:	46bd      	mov	sp, r7
 8006084:	bd90      	pop	{r4, r7, pc}
 8006086:	bf00      	nop
 8006088:	08009640 	.word	0x08009640

0800608c <Demical2BCD>:
extern I2C_HandleTypeDef hi2c2;

#define RTC_ADDR 0x68<<1

uint8_t Demical2BCD(uint8_t num)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	4603      	mov	r3, r0
 8006094:	71fb      	strb	r3, [r7, #7]
	return (num/10)<<4|(num%10);
 8006096:	79fb      	ldrb	r3, [r7, #7]
 8006098:	4a0d      	ldr	r2, [pc, #52]	; (80060d0 <Demical2BCD+0x44>)
 800609a:	fba2 2303 	umull	r2, r3, r2, r3
 800609e:	08db      	lsrs	r3, r3, #3
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	b258      	sxtb	r0, r3
 80060a6:	79fa      	ldrb	r2, [r7, #7]
 80060a8:	4b09      	ldr	r3, [pc, #36]	; (80060d0 <Demical2BCD+0x44>)
 80060aa:	fba3 1302 	umull	r1, r3, r3, r2
 80060ae:	08d9      	lsrs	r1, r3, #3
 80060b0:	460b      	mov	r3, r1
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	440b      	add	r3, r1
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	b25b      	sxtb	r3, r3
 80060be:	4303      	orrs	r3, r0
 80060c0:	b25b      	sxtb	r3, r3
 80060c2:	b2db      	uxtb	r3, r3
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bc80      	pop	{r7}
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	cccccccd 	.word	0xcccccccd

080060d4 <BCD2Demical>:

uint8_t BCD2Demical(uint8_t num)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	4603      	mov	r3, r0
 80060dc:	71fb      	strb	r3, [r7, #7]
	return (num>>4)*10+(num&0x0F);
 80060de:	79fb      	ldrb	r3, [r7, #7]
 80060e0:	091b      	lsrs	r3, r3, #4
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	0092      	lsls	r2, r2, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	79fb      	ldrb	r3, [r7, #7]
 80060f0:	f003 030f 	and.w	r3, r3, #15
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	4413      	add	r3, r2
 80060f8:	b2db      	uxtb	r3, r3
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	bc80      	pop	{r7}
 8006102:	4770      	bx	lr

08006104 <RTC_WriteTime>:

void RTC_WriteTime(DateTime_t *dt)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af02      	add	r7, sp, #8
 800610a:	6078      	str	r0, [r7, #4]
	uint8_t buff[8];
	buff[0] = 0;
 800610c:	2300      	movs	r3, #0
 800610e:	723b      	strb	r3, [r7, #8]
	buff[1] = Demical2BCD(dt->second);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff ffb9 	bl	800608c <Demical2BCD>
 800611a:	4603      	mov	r3, r0
 800611c:	727b      	strb	r3, [r7, #9]
	buff[2] = Demical2BCD(dt->min);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	785b      	ldrb	r3, [r3, #1]
 8006122:	4618      	mov	r0, r3
 8006124:	f7ff ffb2 	bl	800608c <Demical2BCD>
 8006128:	4603      	mov	r3, r0
 800612a:	72bb      	strb	r3, [r7, #10]
	buff[3] = Demical2BCD(dt->hour);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	789b      	ldrb	r3, [r3, #2]
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff ffab 	bl	800608c <Demical2BCD>
 8006136:	4603      	mov	r3, r0
 8006138:	72fb      	strb	r3, [r7, #11]
	buff[4] = Demical2BCD(dt->day);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	78db      	ldrb	r3, [r3, #3]
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff ffa4 	bl	800608c <Demical2BCD>
 8006144:	4603      	mov	r3, r0
 8006146:	733b      	strb	r3, [r7, #12]
	buff[5] = Demical2BCD(dt->date);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	791b      	ldrb	r3, [r3, #4]
 800614c:	4618      	mov	r0, r3
 800614e:	f7ff ff9d 	bl	800608c <Demical2BCD>
 8006152:	4603      	mov	r3, r0
 8006154:	737b      	strb	r3, [r7, #13]
	buff[6] = Demical2BCD(dt->month);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	795b      	ldrb	r3, [r3, #5]
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff ff96 	bl	800608c <Demical2BCD>
 8006160:	4603      	mov	r3, r0
 8006162:	73bb      	strb	r3, [r7, #14]
	buff[7] = Demical2BCD(dt->year);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	799b      	ldrb	r3, [r3, #6]
 8006168:	4618      	mov	r0, r3
 800616a:	f7ff ff8f 	bl	800608c <Demical2BCD>
 800616e:	4603      	mov	r3, r0
 8006170:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c2, RTC_ADDR, buff, 8, 100);
 8006172:	f107 0208 	add.w	r2, r7, #8
 8006176:	2364      	movs	r3, #100	; 0x64
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	2308      	movs	r3, #8
 800617c:	21d0      	movs	r1, #208	; 0xd0
 800617e:	4803      	ldr	r0, [pc, #12]	; (800618c <RTC_WriteTime+0x88>)
 8006180:	f7fc fefa 	bl	8002f78 <HAL_I2C_Master_Transmit>
}
 8006184:	bf00      	nop
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	200001f0 	.word	0x200001f0

08006190 <RTC_ReadTime>:

void RTC_ReadTime(DateTime_t *dt)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af02      	add	r7, sp, #8
 8006196:	6078      	str	r0, [r7, #4]
	uint8_t buff[7];
	uint8_t ADD_reg = 0;
 8006198:	2300      	movs	r3, #0
 800619a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c2, RTC_ADDR, &ADD_reg, 1, 100);
 800619c:	f107 020f 	add.w	r2, r7, #15
 80061a0:	2364      	movs	r3, #100	; 0x64
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	2301      	movs	r3, #1
 80061a6:	21d0      	movs	r1, #208	; 0xd0
 80061a8:	4823      	ldr	r0, [pc, #140]	; (8006238 <RTC_ReadTime+0xa8>)
 80061aa:	f7fc fee5 	bl	8002f78 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, RTC_ADDR, buff, 7, 100);
 80061ae:	f107 0210 	add.w	r2, r7, #16
 80061b2:	2364      	movs	r3, #100	; 0x64
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	2307      	movs	r3, #7
 80061b8:	21d0      	movs	r1, #208	; 0xd0
 80061ba:	481f      	ldr	r0, [pc, #124]	; (8006238 <RTC_ReadTime+0xa8>)
 80061bc:	f7fc ffda 	bl	8003174 <HAL_I2C_Master_Receive>
	dt->second = BCD2Demical(buff[0]);
 80061c0:	7c3b      	ldrb	r3, [r7, #16]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7ff ff86 	bl	80060d4 <BCD2Demical>
 80061c8:	4603      	mov	r3, r0
 80061ca:	461a      	mov	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	701a      	strb	r2, [r3, #0]
	dt->min = BCD2Demical(buff[1]);
 80061d0:	7c7b      	ldrb	r3, [r7, #17]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff ff7e 	bl	80060d4 <BCD2Demical>
 80061d8:	4603      	mov	r3, r0
 80061da:	461a      	mov	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	705a      	strb	r2, [r3, #1]
	dt->hour = BCD2Demical(buff[2]);
 80061e0:	7cbb      	ldrb	r3, [r7, #18]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff ff76 	bl	80060d4 <BCD2Demical>
 80061e8:	4603      	mov	r3, r0
 80061ea:	461a      	mov	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	709a      	strb	r2, [r3, #2]
	dt->day = BCD2Demical(buff[3]);
 80061f0:	7cfb      	ldrb	r3, [r7, #19]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7ff ff6e 	bl	80060d4 <BCD2Demical>
 80061f8:	4603      	mov	r3, r0
 80061fa:	461a      	mov	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	70da      	strb	r2, [r3, #3]
	dt->date = BCD2Demical(buff[4]);
 8006200:	7d3b      	ldrb	r3, [r7, #20]
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff ff66 	bl	80060d4 <BCD2Demical>
 8006208:	4603      	mov	r3, r0
 800620a:	461a      	mov	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	711a      	strb	r2, [r3, #4]
	dt->month = BCD2Demical(buff[5]);
 8006210:	7d7b      	ldrb	r3, [r7, #21]
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff ff5e 	bl	80060d4 <BCD2Demical>
 8006218:	4603      	mov	r3, r0
 800621a:	461a      	mov	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	715a      	strb	r2, [r3, #5]
	dt->year = BCD2Demical(buff[6]);
 8006220:	7dbb      	ldrb	r3, [r7, #22]
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff ff56 	bl	80060d4 <BCD2Demical>
 8006228:	4603      	mov	r3, r0
 800622a:	461a      	mov	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	719a      	strb	r2, [r3, #6]
}
 8006230:	bf00      	nop
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	200001f0 	.word	0x200001f0

0800623c <__cvt>:
 800623c:	2b00      	cmp	r3, #0
 800623e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006242:	461f      	mov	r7, r3
 8006244:	bfbb      	ittet	lt
 8006246:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800624a:	461f      	movlt	r7, r3
 800624c:	2300      	movge	r3, #0
 800624e:	232d      	movlt	r3, #45	; 0x2d
 8006250:	b088      	sub	sp, #32
 8006252:	4614      	mov	r4, r2
 8006254:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006256:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006258:	7013      	strb	r3, [r2, #0]
 800625a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800625c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006260:	f023 0820 	bic.w	r8, r3, #32
 8006264:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006268:	d005      	beq.n	8006276 <__cvt+0x3a>
 800626a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800626e:	d100      	bne.n	8006272 <__cvt+0x36>
 8006270:	3501      	adds	r5, #1
 8006272:	2302      	movs	r3, #2
 8006274:	e000      	b.n	8006278 <__cvt+0x3c>
 8006276:	2303      	movs	r3, #3
 8006278:	aa07      	add	r2, sp, #28
 800627a:	9204      	str	r2, [sp, #16]
 800627c:	aa06      	add	r2, sp, #24
 800627e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006282:	e9cd 3500 	strd	r3, r5, [sp]
 8006286:	4622      	mov	r2, r4
 8006288:	463b      	mov	r3, r7
 800628a:	f000 ff45 	bl	8007118 <_dtoa_r>
 800628e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006292:	4606      	mov	r6, r0
 8006294:	d102      	bne.n	800629c <__cvt+0x60>
 8006296:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006298:	07db      	lsls	r3, r3, #31
 800629a:	d522      	bpl.n	80062e2 <__cvt+0xa6>
 800629c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062a0:	eb06 0905 	add.w	r9, r6, r5
 80062a4:	d110      	bne.n	80062c8 <__cvt+0x8c>
 80062a6:	7833      	ldrb	r3, [r6, #0]
 80062a8:	2b30      	cmp	r3, #48	; 0x30
 80062aa:	d10a      	bne.n	80062c2 <__cvt+0x86>
 80062ac:	2200      	movs	r2, #0
 80062ae:	2300      	movs	r3, #0
 80062b0:	4620      	mov	r0, r4
 80062b2:	4639      	mov	r1, r7
 80062b4:	f7fa fb78 	bl	80009a8 <__aeabi_dcmpeq>
 80062b8:	b918      	cbnz	r0, 80062c2 <__cvt+0x86>
 80062ba:	f1c5 0501 	rsb	r5, r5, #1
 80062be:	f8ca 5000 	str.w	r5, [sl]
 80062c2:	f8da 3000 	ldr.w	r3, [sl]
 80062c6:	4499      	add	r9, r3
 80062c8:	2200      	movs	r2, #0
 80062ca:	2300      	movs	r3, #0
 80062cc:	4620      	mov	r0, r4
 80062ce:	4639      	mov	r1, r7
 80062d0:	f7fa fb6a 	bl	80009a8 <__aeabi_dcmpeq>
 80062d4:	b108      	cbz	r0, 80062da <__cvt+0x9e>
 80062d6:	f8cd 901c 	str.w	r9, [sp, #28]
 80062da:	2230      	movs	r2, #48	; 0x30
 80062dc:	9b07      	ldr	r3, [sp, #28]
 80062de:	454b      	cmp	r3, r9
 80062e0:	d307      	bcc.n	80062f2 <__cvt+0xb6>
 80062e2:	4630      	mov	r0, r6
 80062e4:	9b07      	ldr	r3, [sp, #28]
 80062e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80062e8:	1b9b      	subs	r3, r3, r6
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	b008      	add	sp, #32
 80062ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062f2:	1c59      	adds	r1, r3, #1
 80062f4:	9107      	str	r1, [sp, #28]
 80062f6:	701a      	strb	r2, [r3, #0]
 80062f8:	e7f0      	b.n	80062dc <__cvt+0xa0>

080062fa <__exponent>:
 80062fa:	4603      	mov	r3, r0
 80062fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062fe:	2900      	cmp	r1, #0
 8006300:	f803 2b02 	strb.w	r2, [r3], #2
 8006304:	bfb6      	itet	lt
 8006306:	222d      	movlt	r2, #45	; 0x2d
 8006308:	222b      	movge	r2, #43	; 0x2b
 800630a:	4249      	neglt	r1, r1
 800630c:	2909      	cmp	r1, #9
 800630e:	7042      	strb	r2, [r0, #1]
 8006310:	dd2a      	ble.n	8006368 <__exponent+0x6e>
 8006312:	f10d 0207 	add.w	r2, sp, #7
 8006316:	4617      	mov	r7, r2
 8006318:	260a      	movs	r6, #10
 800631a:	fb91 f5f6 	sdiv	r5, r1, r6
 800631e:	4694      	mov	ip, r2
 8006320:	fb06 1415 	mls	r4, r6, r5, r1
 8006324:	3430      	adds	r4, #48	; 0x30
 8006326:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800632a:	460c      	mov	r4, r1
 800632c:	2c63      	cmp	r4, #99	; 0x63
 800632e:	4629      	mov	r1, r5
 8006330:	f102 32ff 	add.w	r2, r2, #4294967295
 8006334:	dcf1      	bgt.n	800631a <__exponent+0x20>
 8006336:	3130      	adds	r1, #48	; 0x30
 8006338:	f1ac 0402 	sub.w	r4, ip, #2
 800633c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006340:	4622      	mov	r2, r4
 8006342:	1c41      	adds	r1, r0, #1
 8006344:	42ba      	cmp	r2, r7
 8006346:	d30a      	bcc.n	800635e <__exponent+0x64>
 8006348:	f10d 0209 	add.w	r2, sp, #9
 800634c:	eba2 020c 	sub.w	r2, r2, ip
 8006350:	42bc      	cmp	r4, r7
 8006352:	bf88      	it	hi
 8006354:	2200      	movhi	r2, #0
 8006356:	4413      	add	r3, r2
 8006358:	1a18      	subs	r0, r3, r0
 800635a:	b003      	add	sp, #12
 800635c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800635e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006362:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006366:	e7ed      	b.n	8006344 <__exponent+0x4a>
 8006368:	2330      	movs	r3, #48	; 0x30
 800636a:	3130      	adds	r1, #48	; 0x30
 800636c:	7083      	strb	r3, [r0, #2]
 800636e:	70c1      	strb	r1, [r0, #3]
 8006370:	1d03      	adds	r3, r0, #4
 8006372:	e7f1      	b.n	8006358 <__exponent+0x5e>

08006374 <_printf_float>:
 8006374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006378:	b091      	sub	sp, #68	; 0x44
 800637a:	460c      	mov	r4, r1
 800637c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006380:	4616      	mov	r6, r2
 8006382:	461f      	mov	r7, r3
 8006384:	4605      	mov	r5, r0
 8006386:	f000 fd97 	bl	8006eb8 <_localeconv_r>
 800638a:	6803      	ldr	r3, [r0, #0]
 800638c:	4618      	mov	r0, r3
 800638e:	9309      	str	r3, [sp, #36]	; 0x24
 8006390:	f7f9 fede 	bl	8000150 <strlen>
 8006394:	2300      	movs	r3, #0
 8006396:	930e      	str	r3, [sp, #56]	; 0x38
 8006398:	f8d8 3000 	ldr.w	r3, [r8]
 800639c:	900a      	str	r0, [sp, #40]	; 0x28
 800639e:	3307      	adds	r3, #7
 80063a0:	f023 0307 	bic.w	r3, r3, #7
 80063a4:	f103 0208 	add.w	r2, r3, #8
 80063a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80063ac:	f8d4 b000 	ldr.w	fp, [r4]
 80063b0:	f8c8 2000 	str.w	r2, [r8]
 80063b4:	e9d3 a800 	ldrd	sl, r8, [r3]
 80063b8:	4652      	mov	r2, sl
 80063ba:	4643      	mov	r3, r8
 80063bc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80063c0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80063c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80063c6:	f04f 32ff 	mov.w	r2, #4294967295
 80063ca:	4650      	mov	r0, sl
 80063cc:	4b9c      	ldr	r3, [pc, #624]	; (8006640 <_printf_float+0x2cc>)
 80063ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063d0:	f7fa fb1c 	bl	8000a0c <__aeabi_dcmpun>
 80063d4:	bb70      	cbnz	r0, 8006434 <_printf_float+0xc0>
 80063d6:	f04f 32ff 	mov.w	r2, #4294967295
 80063da:	4650      	mov	r0, sl
 80063dc:	4b98      	ldr	r3, [pc, #608]	; (8006640 <_printf_float+0x2cc>)
 80063de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063e0:	f7fa faf6 	bl	80009d0 <__aeabi_dcmple>
 80063e4:	bb30      	cbnz	r0, 8006434 <_printf_float+0xc0>
 80063e6:	2200      	movs	r2, #0
 80063e8:	2300      	movs	r3, #0
 80063ea:	4650      	mov	r0, sl
 80063ec:	4641      	mov	r1, r8
 80063ee:	f7fa fae5 	bl	80009bc <__aeabi_dcmplt>
 80063f2:	b110      	cbz	r0, 80063fa <_printf_float+0x86>
 80063f4:	232d      	movs	r3, #45	; 0x2d
 80063f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063fa:	4a92      	ldr	r2, [pc, #584]	; (8006644 <_printf_float+0x2d0>)
 80063fc:	4b92      	ldr	r3, [pc, #584]	; (8006648 <_printf_float+0x2d4>)
 80063fe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006402:	bf94      	ite	ls
 8006404:	4690      	movls	r8, r2
 8006406:	4698      	movhi	r8, r3
 8006408:	2303      	movs	r3, #3
 800640a:	f04f 0a00 	mov.w	sl, #0
 800640e:	6123      	str	r3, [r4, #16]
 8006410:	f02b 0304 	bic.w	r3, fp, #4
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	4633      	mov	r3, r6
 8006418:	4621      	mov	r1, r4
 800641a:	4628      	mov	r0, r5
 800641c:	9700      	str	r7, [sp, #0]
 800641e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006420:	f000 f9d6 	bl	80067d0 <_printf_common>
 8006424:	3001      	adds	r0, #1
 8006426:	f040 8090 	bne.w	800654a <_printf_float+0x1d6>
 800642a:	f04f 30ff 	mov.w	r0, #4294967295
 800642e:	b011      	add	sp, #68	; 0x44
 8006430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006434:	4652      	mov	r2, sl
 8006436:	4643      	mov	r3, r8
 8006438:	4650      	mov	r0, sl
 800643a:	4641      	mov	r1, r8
 800643c:	f7fa fae6 	bl	8000a0c <__aeabi_dcmpun>
 8006440:	b148      	cbz	r0, 8006456 <_printf_float+0xe2>
 8006442:	f1b8 0f00 	cmp.w	r8, #0
 8006446:	bfb8      	it	lt
 8006448:	232d      	movlt	r3, #45	; 0x2d
 800644a:	4a80      	ldr	r2, [pc, #512]	; (800664c <_printf_float+0x2d8>)
 800644c:	bfb8      	it	lt
 800644e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006452:	4b7f      	ldr	r3, [pc, #508]	; (8006650 <_printf_float+0x2dc>)
 8006454:	e7d3      	b.n	80063fe <_printf_float+0x8a>
 8006456:	6863      	ldr	r3, [r4, #4]
 8006458:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	d142      	bne.n	80064e6 <_printf_float+0x172>
 8006460:	2306      	movs	r3, #6
 8006462:	6063      	str	r3, [r4, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	9206      	str	r2, [sp, #24]
 8006468:	aa0e      	add	r2, sp, #56	; 0x38
 800646a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800646e:	aa0d      	add	r2, sp, #52	; 0x34
 8006470:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006474:	9203      	str	r2, [sp, #12]
 8006476:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800647a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800647e:	6023      	str	r3, [r4, #0]
 8006480:	6863      	ldr	r3, [r4, #4]
 8006482:	4652      	mov	r2, sl
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	4628      	mov	r0, r5
 8006488:	4643      	mov	r3, r8
 800648a:	910b      	str	r1, [sp, #44]	; 0x2c
 800648c:	f7ff fed6 	bl	800623c <__cvt>
 8006490:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006492:	4680      	mov	r8, r0
 8006494:	2947      	cmp	r1, #71	; 0x47
 8006496:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006498:	d108      	bne.n	80064ac <_printf_float+0x138>
 800649a:	1cc8      	adds	r0, r1, #3
 800649c:	db02      	blt.n	80064a4 <_printf_float+0x130>
 800649e:	6863      	ldr	r3, [r4, #4]
 80064a0:	4299      	cmp	r1, r3
 80064a2:	dd40      	ble.n	8006526 <_printf_float+0x1b2>
 80064a4:	f1a9 0902 	sub.w	r9, r9, #2
 80064a8:	fa5f f989 	uxtb.w	r9, r9
 80064ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80064b0:	d81f      	bhi.n	80064f2 <_printf_float+0x17e>
 80064b2:	464a      	mov	r2, r9
 80064b4:	3901      	subs	r1, #1
 80064b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80064ba:	910d      	str	r1, [sp, #52]	; 0x34
 80064bc:	f7ff ff1d 	bl	80062fa <__exponent>
 80064c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064c2:	4682      	mov	sl, r0
 80064c4:	1813      	adds	r3, r2, r0
 80064c6:	2a01      	cmp	r2, #1
 80064c8:	6123      	str	r3, [r4, #16]
 80064ca:	dc02      	bgt.n	80064d2 <_printf_float+0x15e>
 80064cc:	6822      	ldr	r2, [r4, #0]
 80064ce:	07d2      	lsls	r2, r2, #31
 80064d0:	d501      	bpl.n	80064d6 <_printf_float+0x162>
 80064d2:	3301      	adds	r3, #1
 80064d4:	6123      	str	r3, [r4, #16]
 80064d6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d09b      	beq.n	8006416 <_printf_float+0xa2>
 80064de:	232d      	movs	r3, #45	; 0x2d
 80064e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064e4:	e797      	b.n	8006416 <_printf_float+0xa2>
 80064e6:	2947      	cmp	r1, #71	; 0x47
 80064e8:	d1bc      	bne.n	8006464 <_printf_float+0xf0>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1ba      	bne.n	8006464 <_printf_float+0xf0>
 80064ee:	2301      	movs	r3, #1
 80064f0:	e7b7      	b.n	8006462 <_printf_float+0xee>
 80064f2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80064f6:	d118      	bne.n	800652a <_printf_float+0x1b6>
 80064f8:	2900      	cmp	r1, #0
 80064fa:	6863      	ldr	r3, [r4, #4]
 80064fc:	dd0b      	ble.n	8006516 <_printf_float+0x1a2>
 80064fe:	6121      	str	r1, [r4, #16]
 8006500:	b913      	cbnz	r3, 8006508 <_printf_float+0x194>
 8006502:	6822      	ldr	r2, [r4, #0]
 8006504:	07d0      	lsls	r0, r2, #31
 8006506:	d502      	bpl.n	800650e <_printf_float+0x19a>
 8006508:	3301      	adds	r3, #1
 800650a:	440b      	add	r3, r1
 800650c:	6123      	str	r3, [r4, #16]
 800650e:	f04f 0a00 	mov.w	sl, #0
 8006512:	65a1      	str	r1, [r4, #88]	; 0x58
 8006514:	e7df      	b.n	80064d6 <_printf_float+0x162>
 8006516:	b913      	cbnz	r3, 800651e <_printf_float+0x1aa>
 8006518:	6822      	ldr	r2, [r4, #0]
 800651a:	07d2      	lsls	r2, r2, #31
 800651c:	d501      	bpl.n	8006522 <_printf_float+0x1ae>
 800651e:	3302      	adds	r3, #2
 8006520:	e7f4      	b.n	800650c <_printf_float+0x198>
 8006522:	2301      	movs	r3, #1
 8006524:	e7f2      	b.n	800650c <_printf_float+0x198>
 8006526:	f04f 0967 	mov.w	r9, #103	; 0x67
 800652a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800652c:	4299      	cmp	r1, r3
 800652e:	db05      	blt.n	800653c <_printf_float+0x1c8>
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	6121      	str	r1, [r4, #16]
 8006534:	07d8      	lsls	r0, r3, #31
 8006536:	d5ea      	bpl.n	800650e <_printf_float+0x19a>
 8006538:	1c4b      	adds	r3, r1, #1
 800653a:	e7e7      	b.n	800650c <_printf_float+0x198>
 800653c:	2900      	cmp	r1, #0
 800653e:	bfcc      	ite	gt
 8006540:	2201      	movgt	r2, #1
 8006542:	f1c1 0202 	rsble	r2, r1, #2
 8006546:	4413      	add	r3, r2
 8006548:	e7e0      	b.n	800650c <_printf_float+0x198>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	055a      	lsls	r2, r3, #21
 800654e:	d407      	bmi.n	8006560 <_printf_float+0x1ec>
 8006550:	6923      	ldr	r3, [r4, #16]
 8006552:	4642      	mov	r2, r8
 8006554:	4631      	mov	r1, r6
 8006556:	4628      	mov	r0, r5
 8006558:	47b8      	blx	r7
 800655a:	3001      	adds	r0, #1
 800655c:	d12b      	bne.n	80065b6 <_printf_float+0x242>
 800655e:	e764      	b.n	800642a <_printf_float+0xb6>
 8006560:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006564:	f240 80dd 	bls.w	8006722 <_printf_float+0x3ae>
 8006568:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800656c:	2200      	movs	r2, #0
 800656e:	2300      	movs	r3, #0
 8006570:	f7fa fa1a 	bl	80009a8 <__aeabi_dcmpeq>
 8006574:	2800      	cmp	r0, #0
 8006576:	d033      	beq.n	80065e0 <_printf_float+0x26c>
 8006578:	2301      	movs	r3, #1
 800657a:	4631      	mov	r1, r6
 800657c:	4628      	mov	r0, r5
 800657e:	4a35      	ldr	r2, [pc, #212]	; (8006654 <_printf_float+0x2e0>)
 8006580:	47b8      	blx	r7
 8006582:	3001      	adds	r0, #1
 8006584:	f43f af51 	beq.w	800642a <_printf_float+0xb6>
 8006588:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800658c:	429a      	cmp	r2, r3
 800658e:	db02      	blt.n	8006596 <_printf_float+0x222>
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	07d8      	lsls	r0, r3, #31
 8006594:	d50f      	bpl.n	80065b6 <_printf_float+0x242>
 8006596:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800659a:	4631      	mov	r1, r6
 800659c:	4628      	mov	r0, r5
 800659e:	47b8      	blx	r7
 80065a0:	3001      	adds	r0, #1
 80065a2:	f43f af42 	beq.w	800642a <_printf_float+0xb6>
 80065a6:	f04f 0800 	mov.w	r8, #0
 80065aa:	f104 091a 	add.w	r9, r4, #26
 80065ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065b0:	3b01      	subs	r3, #1
 80065b2:	4543      	cmp	r3, r8
 80065b4:	dc09      	bgt.n	80065ca <_printf_float+0x256>
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	079b      	lsls	r3, r3, #30
 80065ba:	f100 8104 	bmi.w	80067c6 <_printf_float+0x452>
 80065be:	68e0      	ldr	r0, [r4, #12]
 80065c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065c2:	4298      	cmp	r0, r3
 80065c4:	bfb8      	it	lt
 80065c6:	4618      	movlt	r0, r3
 80065c8:	e731      	b.n	800642e <_printf_float+0xba>
 80065ca:	2301      	movs	r3, #1
 80065cc:	464a      	mov	r2, r9
 80065ce:	4631      	mov	r1, r6
 80065d0:	4628      	mov	r0, r5
 80065d2:	47b8      	blx	r7
 80065d4:	3001      	adds	r0, #1
 80065d6:	f43f af28 	beq.w	800642a <_printf_float+0xb6>
 80065da:	f108 0801 	add.w	r8, r8, #1
 80065de:	e7e6      	b.n	80065ae <_printf_float+0x23a>
 80065e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	dc38      	bgt.n	8006658 <_printf_float+0x2e4>
 80065e6:	2301      	movs	r3, #1
 80065e8:	4631      	mov	r1, r6
 80065ea:	4628      	mov	r0, r5
 80065ec:	4a19      	ldr	r2, [pc, #100]	; (8006654 <_printf_float+0x2e0>)
 80065ee:	47b8      	blx	r7
 80065f0:	3001      	adds	r0, #1
 80065f2:	f43f af1a 	beq.w	800642a <_printf_float+0xb6>
 80065f6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80065fa:	4313      	orrs	r3, r2
 80065fc:	d102      	bne.n	8006604 <_printf_float+0x290>
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	07d9      	lsls	r1, r3, #31
 8006602:	d5d8      	bpl.n	80065b6 <_printf_float+0x242>
 8006604:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006608:	4631      	mov	r1, r6
 800660a:	4628      	mov	r0, r5
 800660c:	47b8      	blx	r7
 800660e:	3001      	adds	r0, #1
 8006610:	f43f af0b 	beq.w	800642a <_printf_float+0xb6>
 8006614:	f04f 0900 	mov.w	r9, #0
 8006618:	f104 0a1a 	add.w	sl, r4, #26
 800661c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800661e:	425b      	negs	r3, r3
 8006620:	454b      	cmp	r3, r9
 8006622:	dc01      	bgt.n	8006628 <_printf_float+0x2b4>
 8006624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006626:	e794      	b.n	8006552 <_printf_float+0x1de>
 8006628:	2301      	movs	r3, #1
 800662a:	4652      	mov	r2, sl
 800662c:	4631      	mov	r1, r6
 800662e:	4628      	mov	r0, r5
 8006630:	47b8      	blx	r7
 8006632:	3001      	adds	r0, #1
 8006634:	f43f aef9 	beq.w	800642a <_printf_float+0xb6>
 8006638:	f109 0901 	add.w	r9, r9, #1
 800663c:	e7ee      	b.n	800661c <_printf_float+0x2a8>
 800663e:	bf00      	nop
 8006640:	7fefffff 	.word	0x7fefffff
 8006644:	08009680 	.word	0x08009680
 8006648:	08009684 	.word	0x08009684
 800664c:	08009688 	.word	0x08009688
 8006650:	0800968c 	.word	0x0800968c
 8006654:	08009690 	.word	0x08009690
 8006658:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800665a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800665c:	429a      	cmp	r2, r3
 800665e:	bfa8      	it	ge
 8006660:	461a      	movge	r2, r3
 8006662:	2a00      	cmp	r2, #0
 8006664:	4691      	mov	r9, r2
 8006666:	dc37      	bgt.n	80066d8 <_printf_float+0x364>
 8006668:	f04f 0b00 	mov.w	fp, #0
 800666c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006670:	f104 021a 	add.w	r2, r4, #26
 8006674:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006678:	ebaa 0309 	sub.w	r3, sl, r9
 800667c:	455b      	cmp	r3, fp
 800667e:	dc33      	bgt.n	80066e8 <_printf_float+0x374>
 8006680:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006684:	429a      	cmp	r2, r3
 8006686:	db3b      	blt.n	8006700 <_printf_float+0x38c>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	07da      	lsls	r2, r3, #31
 800668c:	d438      	bmi.n	8006700 <_printf_float+0x38c>
 800668e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006692:	eba2 0903 	sub.w	r9, r2, r3
 8006696:	eba2 020a 	sub.w	r2, r2, sl
 800669a:	4591      	cmp	r9, r2
 800669c:	bfa8      	it	ge
 800669e:	4691      	movge	r9, r2
 80066a0:	f1b9 0f00 	cmp.w	r9, #0
 80066a4:	dc34      	bgt.n	8006710 <_printf_float+0x39c>
 80066a6:	f04f 0800 	mov.w	r8, #0
 80066aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066ae:	f104 0a1a 	add.w	sl, r4, #26
 80066b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	eba3 0309 	sub.w	r3, r3, r9
 80066bc:	4543      	cmp	r3, r8
 80066be:	f77f af7a 	ble.w	80065b6 <_printf_float+0x242>
 80066c2:	2301      	movs	r3, #1
 80066c4:	4652      	mov	r2, sl
 80066c6:	4631      	mov	r1, r6
 80066c8:	4628      	mov	r0, r5
 80066ca:	47b8      	blx	r7
 80066cc:	3001      	adds	r0, #1
 80066ce:	f43f aeac 	beq.w	800642a <_printf_float+0xb6>
 80066d2:	f108 0801 	add.w	r8, r8, #1
 80066d6:	e7ec      	b.n	80066b2 <_printf_float+0x33e>
 80066d8:	4613      	mov	r3, r2
 80066da:	4631      	mov	r1, r6
 80066dc:	4642      	mov	r2, r8
 80066de:	4628      	mov	r0, r5
 80066e0:	47b8      	blx	r7
 80066e2:	3001      	adds	r0, #1
 80066e4:	d1c0      	bne.n	8006668 <_printf_float+0x2f4>
 80066e6:	e6a0      	b.n	800642a <_printf_float+0xb6>
 80066e8:	2301      	movs	r3, #1
 80066ea:	4631      	mov	r1, r6
 80066ec:	4628      	mov	r0, r5
 80066ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80066f0:	47b8      	blx	r7
 80066f2:	3001      	adds	r0, #1
 80066f4:	f43f ae99 	beq.w	800642a <_printf_float+0xb6>
 80066f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066fa:	f10b 0b01 	add.w	fp, fp, #1
 80066fe:	e7b9      	b.n	8006674 <_printf_float+0x300>
 8006700:	4631      	mov	r1, r6
 8006702:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006706:	4628      	mov	r0, r5
 8006708:	47b8      	blx	r7
 800670a:	3001      	adds	r0, #1
 800670c:	d1bf      	bne.n	800668e <_printf_float+0x31a>
 800670e:	e68c      	b.n	800642a <_printf_float+0xb6>
 8006710:	464b      	mov	r3, r9
 8006712:	4631      	mov	r1, r6
 8006714:	4628      	mov	r0, r5
 8006716:	eb08 020a 	add.w	r2, r8, sl
 800671a:	47b8      	blx	r7
 800671c:	3001      	adds	r0, #1
 800671e:	d1c2      	bne.n	80066a6 <_printf_float+0x332>
 8006720:	e683      	b.n	800642a <_printf_float+0xb6>
 8006722:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006724:	2a01      	cmp	r2, #1
 8006726:	dc01      	bgt.n	800672c <_printf_float+0x3b8>
 8006728:	07db      	lsls	r3, r3, #31
 800672a:	d539      	bpl.n	80067a0 <_printf_float+0x42c>
 800672c:	2301      	movs	r3, #1
 800672e:	4642      	mov	r2, r8
 8006730:	4631      	mov	r1, r6
 8006732:	4628      	mov	r0, r5
 8006734:	47b8      	blx	r7
 8006736:	3001      	adds	r0, #1
 8006738:	f43f ae77 	beq.w	800642a <_printf_float+0xb6>
 800673c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006740:	4631      	mov	r1, r6
 8006742:	4628      	mov	r0, r5
 8006744:	47b8      	blx	r7
 8006746:	3001      	adds	r0, #1
 8006748:	f43f ae6f 	beq.w	800642a <_printf_float+0xb6>
 800674c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006750:	2200      	movs	r2, #0
 8006752:	2300      	movs	r3, #0
 8006754:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006758:	f7fa f926 	bl	80009a8 <__aeabi_dcmpeq>
 800675c:	b9d8      	cbnz	r0, 8006796 <_printf_float+0x422>
 800675e:	f109 33ff 	add.w	r3, r9, #4294967295
 8006762:	f108 0201 	add.w	r2, r8, #1
 8006766:	4631      	mov	r1, r6
 8006768:	4628      	mov	r0, r5
 800676a:	47b8      	blx	r7
 800676c:	3001      	adds	r0, #1
 800676e:	d10e      	bne.n	800678e <_printf_float+0x41a>
 8006770:	e65b      	b.n	800642a <_printf_float+0xb6>
 8006772:	2301      	movs	r3, #1
 8006774:	464a      	mov	r2, r9
 8006776:	4631      	mov	r1, r6
 8006778:	4628      	mov	r0, r5
 800677a:	47b8      	blx	r7
 800677c:	3001      	adds	r0, #1
 800677e:	f43f ae54 	beq.w	800642a <_printf_float+0xb6>
 8006782:	f108 0801 	add.w	r8, r8, #1
 8006786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006788:	3b01      	subs	r3, #1
 800678a:	4543      	cmp	r3, r8
 800678c:	dcf1      	bgt.n	8006772 <_printf_float+0x3fe>
 800678e:	4653      	mov	r3, sl
 8006790:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006794:	e6de      	b.n	8006554 <_printf_float+0x1e0>
 8006796:	f04f 0800 	mov.w	r8, #0
 800679a:	f104 091a 	add.w	r9, r4, #26
 800679e:	e7f2      	b.n	8006786 <_printf_float+0x412>
 80067a0:	2301      	movs	r3, #1
 80067a2:	4642      	mov	r2, r8
 80067a4:	e7df      	b.n	8006766 <_printf_float+0x3f2>
 80067a6:	2301      	movs	r3, #1
 80067a8:	464a      	mov	r2, r9
 80067aa:	4631      	mov	r1, r6
 80067ac:	4628      	mov	r0, r5
 80067ae:	47b8      	blx	r7
 80067b0:	3001      	adds	r0, #1
 80067b2:	f43f ae3a 	beq.w	800642a <_printf_float+0xb6>
 80067b6:	f108 0801 	add.w	r8, r8, #1
 80067ba:	68e3      	ldr	r3, [r4, #12]
 80067bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80067be:	1a5b      	subs	r3, r3, r1
 80067c0:	4543      	cmp	r3, r8
 80067c2:	dcf0      	bgt.n	80067a6 <_printf_float+0x432>
 80067c4:	e6fb      	b.n	80065be <_printf_float+0x24a>
 80067c6:	f04f 0800 	mov.w	r8, #0
 80067ca:	f104 0919 	add.w	r9, r4, #25
 80067ce:	e7f4      	b.n	80067ba <_printf_float+0x446>

080067d0 <_printf_common>:
 80067d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d4:	4616      	mov	r6, r2
 80067d6:	4699      	mov	r9, r3
 80067d8:	688a      	ldr	r2, [r1, #8]
 80067da:	690b      	ldr	r3, [r1, #16]
 80067dc:	4607      	mov	r7, r0
 80067de:	4293      	cmp	r3, r2
 80067e0:	bfb8      	it	lt
 80067e2:	4613      	movlt	r3, r2
 80067e4:	6033      	str	r3, [r6, #0]
 80067e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067ea:	460c      	mov	r4, r1
 80067ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067f0:	b10a      	cbz	r2, 80067f6 <_printf_common+0x26>
 80067f2:	3301      	adds	r3, #1
 80067f4:	6033      	str	r3, [r6, #0]
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	0699      	lsls	r1, r3, #26
 80067fa:	bf42      	ittt	mi
 80067fc:	6833      	ldrmi	r3, [r6, #0]
 80067fe:	3302      	addmi	r3, #2
 8006800:	6033      	strmi	r3, [r6, #0]
 8006802:	6825      	ldr	r5, [r4, #0]
 8006804:	f015 0506 	ands.w	r5, r5, #6
 8006808:	d106      	bne.n	8006818 <_printf_common+0x48>
 800680a:	f104 0a19 	add.w	sl, r4, #25
 800680e:	68e3      	ldr	r3, [r4, #12]
 8006810:	6832      	ldr	r2, [r6, #0]
 8006812:	1a9b      	subs	r3, r3, r2
 8006814:	42ab      	cmp	r3, r5
 8006816:	dc2b      	bgt.n	8006870 <_printf_common+0xa0>
 8006818:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800681c:	1e13      	subs	r3, r2, #0
 800681e:	6822      	ldr	r2, [r4, #0]
 8006820:	bf18      	it	ne
 8006822:	2301      	movne	r3, #1
 8006824:	0692      	lsls	r2, r2, #26
 8006826:	d430      	bmi.n	800688a <_printf_common+0xba>
 8006828:	4649      	mov	r1, r9
 800682a:	4638      	mov	r0, r7
 800682c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006830:	47c0      	blx	r8
 8006832:	3001      	adds	r0, #1
 8006834:	d023      	beq.n	800687e <_printf_common+0xae>
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	6922      	ldr	r2, [r4, #16]
 800683a:	f003 0306 	and.w	r3, r3, #6
 800683e:	2b04      	cmp	r3, #4
 8006840:	bf14      	ite	ne
 8006842:	2500      	movne	r5, #0
 8006844:	6833      	ldreq	r3, [r6, #0]
 8006846:	f04f 0600 	mov.w	r6, #0
 800684a:	bf08      	it	eq
 800684c:	68e5      	ldreq	r5, [r4, #12]
 800684e:	f104 041a 	add.w	r4, r4, #26
 8006852:	bf08      	it	eq
 8006854:	1aed      	subeq	r5, r5, r3
 8006856:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800685a:	bf08      	it	eq
 800685c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006860:	4293      	cmp	r3, r2
 8006862:	bfc4      	itt	gt
 8006864:	1a9b      	subgt	r3, r3, r2
 8006866:	18ed      	addgt	r5, r5, r3
 8006868:	42b5      	cmp	r5, r6
 800686a:	d11a      	bne.n	80068a2 <_printf_common+0xd2>
 800686c:	2000      	movs	r0, #0
 800686e:	e008      	b.n	8006882 <_printf_common+0xb2>
 8006870:	2301      	movs	r3, #1
 8006872:	4652      	mov	r2, sl
 8006874:	4649      	mov	r1, r9
 8006876:	4638      	mov	r0, r7
 8006878:	47c0      	blx	r8
 800687a:	3001      	adds	r0, #1
 800687c:	d103      	bne.n	8006886 <_printf_common+0xb6>
 800687e:	f04f 30ff 	mov.w	r0, #4294967295
 8006882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006886:	3501      	adds	r5, #1
 8006888:	e7c1      	b.n	800680e <_printf_common+0x3e>
 800688a:	2030      	movs	r0, #48	; 0x30
 800688c:	18e1      	adds	r1, r4, r3
 800688e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006898:	4422      	add	r2, r4
 800689a:	3302      	adds	r3, #2
 800689c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068a0:	e7c2      	b.n	8006828 <_printf_common+0x58>
 80068a2:	2301      	movs	r3, #1
 80068a4:	4622      	mov	r2, r4
 80068a6:	4649      	mov	r1, r9
 80068a8:	4638      	mov	r0, r7
 80068aa:	47c0      	blx	r8
 80068ac:	3001      	adds	r0, #1
 80068ae:	d0e6      	beq.n	800687e <_printf_common+0xae>
 80068b0:	3601      	adds	r6, #1
 80068b2:	e7d9      	b.n	8006868 <_printf_common+0x98>

080068b4 <_printf_i>:
 80068b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068b8:	7e0f      	ldrb	r7, [r1, #24]
 80068ba:	4691      	mov	r9, r2
 80068bc:	2f78      	cmp	r7, #120	; 0x78
 80068be:	4680      	mov	r8, r0
 80068c0:	460c      	mov	r4, r1
 80068c2:	469a      	mov	sl, r3
 80068c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068ca:	d807      	bhi.n	80068dc <_printf_i+0x28>
 80068cc:	2f62      	cmp	r7, #98	; 0x62
 80068ce:	d80a      	bhi.n	80068e6 <_printf_i+0x32>
 80068d0:	2f00      	cmp	r7, #0
 80068d2:	f000 80d5 	beq.w	8006a80 <_printf_i+0x1cc>
 80068d6:	2f58      	cmp	r7, #88	; 0x58
 80068d8:	f000 80c1 	beq.w	8006a5e <_printf_i+0x1aa>
 80068dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068e4:	e03a      	b.n	800695c <_printf_i+0xa8>
 80068e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068ea:	2b15      	cmp	r3, #21
 80068ec:	d8f6      	bhi.n	80068dc <_printf_i+0x28>
 80068ee:	a101      	add	r1, pc, #4	; (adr r1, 80068f4 <_printf_i+0x40>)
 80068f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068f4:	0800694d 	.word	0x0800694d
 80068f8:	08006961 	.word	0x08006961
 80068fc:	080068dd 	.word	0x080068dd
 8006900:	080068dd 	.word	0x080068dd
 8006904:	080068dd 	.word	0x080068dd
 8006908:	080068dd 	.word	0x080068dd
 800690c:	08006961 	.word	0x08006961
 8006910:	080068dd 	.word	0x080068dd
 8006914:	080068dd 	.word	0x080068dd
 8006918:	080068dd 	.word	0x080068dd
 800691c:	080068dd 	.word	0x080068dd
 8006920:	08006a67 	.word	0x08006a67
 8006924:	0800698d 	.word	0x0800698d
 8006928:	08006a21 	.word	0x08006a21
 800692c:	080068dd 	.word	0x080068dd
 8006930:	080068dd 	.word	0x080068dd
 8006934:	08006a89 	.word	0x08006a89
 8006938:	080068dd 	.word	0x080068dd
 800693c:	0800698d 	.word	0x0800698d
 8006940:	080068dd 	.word	0x080068dd
 8006944:	080068dd 	.word	0x080068dd
 8006948:	08006a29 	.word	0x08006a29
 800694c:	682b      	ldr	r3, [r5, #0]
 800694e:	1d1a      	adds	r2, r3, #4
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	602a      	str	r2, [r5, #0]
 8006954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800695c:	2301      	movs	r3, #1
 800695e:	e0a0      	b.n	8006aa2 <_printf_i+0x1ee>
 8006960:	6820      	ldr	r0, [r4, #0]
 8006962:	682b      	ldr	r3, [r5, #0]
 8006964:	0607      	lsls	r7, r0, #24
 8006966:	f103 0104 	add.w	r1, r3, #4
 800696a:	6029      	str	r1, [r5, #0]
 800696c:	d501      	bpl.n	8006972 <_printf_i+0xbe>
 800696e:	681e      	ldr	r6, [r3, #0]
 8006970:	e003      	b.n	800697a <_printf_i+0xc6>
 8006972:	0646      	lsls	r6, r0, #25
 8006974:	d5fb      	bpl.n	800696e <_printf_i+0xba>
 8006976:	f9b3 6000 	ldrsh.w	r6, [r3]
 800697a:	2e00      	cmp	r6, #0
 800697c:	da03      	bge.n	8006986 <_printf_i+0xd2>
 800697e:	232d      	movs	r3, #45	; 0x2d
 8006980:	4276      	negs	r6, r6
 8006982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006986:	230a      	movs	r3, #10
 8006988:	4859      	ldr	r0, [pc, #356]	; (8006af0 <_printf_i+0x23c>)
 800698a:	e012      	b.n	80069b2 <_printf_i+0xfe>
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	6820      	ldr	r0, [r4, #0]
 8006990:	1d19      	adds	r1, r3, #4
 8006992:	6029      	str	r1, [r5, #0]
 8006994:	0605      	lsls	r5, r0, #24
 8006996:	d501      	bpl.n	800699c <_printf_i+0xe8>
 8006998:	681e      	ldr	r6, [r3, #0]
 800699a:	e002      	b.n	80069a2 <_printf_i+0xee>
 800699c:	0641      	lsls	r1, r0, #25
 800699e:	d5fb      	bpl.n	8006998 <_printf_i+0xe4>
 80069a0:	881e      	ldrh	r6, [r3, #0]
 80069a2:	2f6f      	cmp	r7, #111	; 0x6f
 80069a4:	bf0c      	ite	eq
 80069a6:	2308      	moveq	r3, #8
 80069a8:	230a      	movne	r3, #10
 80069aa:	4851      	ldr	r0, [pc, #324]	; (8006af0 <_printf_i+0x23c>)
 80069ac:	2100      	movs	r1, #0
 80069ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069b2:	6865      	ldr	r5, [r4, #4]
 80069b4:	2d00      	cmp	r5, #0
 80069b6:	bfa8      	it	ge
 80069b8:	6821      	ldrge	r1, [r4, #0]
 80069ba:	60a5      	str	r5, [r4, #8]
 80069bc:	bfa4      	itt	ge
 80069be:	f021 0104 	bicge.w	r1, r1, #4
 80069c2:	6021      	strge	r1, [r4, #0]
 80069c4:	b90e      	cbnz	r6, 80069ca <_printf_i+0x116>
 80069c6:	2d00      	cmp	r5, #0
 80069c8:	d04b      	beq.n	8006a62 <_printf_i+0x1ae>
 80069ca:	4615      	mov	r5, r2
 80069cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80069d0:	fb03 6711 	mls	r7, r3, r1, r6
 80069d4:	5dc7      	ldrb	r7, [r0, r7]
 80069d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80069da:	4637      	mov	r7, r6
 80069dc:	42bb      	cmp	r3, r7
 80069de:	460e      	mov	r6, r1
 80069e0:	d9f4      	bls.n	80069cc <_printf_i+0x118>
 80069e2:	2b08      	cmp	r3, #8
 80069e4:	d10b      	bne.n	80069fe <_printf_i+0x14a>
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	07de      	lsls	r6, r3, #31
 80069ea:	d508      	bpl.n	80069fe <_printf_i+0x14a>
 80069ec:	6923      	ldr	r3, [r4, #16]
 80069ee:	6861      	ldr	r1, [r4, #4]
 80069f0:	4299      	cmp	r1, r3
 80069f2:	bfde      	ittt	le
 80069f4:	2330      	movle	r3, #48	; 0x30
 80069f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80069fe:	1b52      	subs	r2, r2, r5
 8006a00:	6122      	str	r2, [r4, #16]
 8006a02:	464b      	mov	r3, r9
 8006a04:	4621      	mov	r1, r4
 8006a06:	4640      	mov	r0, r8
 8006a08:	f8cd a000 	str.w	sl, [sp]
 8006a0c:	aa03      	add	r2, sp, #12
 8006a0e:	f7ff fedf 	bl	80067d0 <_printf_common>
 8006a12:	3001      	adds	r0, #1
 8006a14:	d14a      	bne.n	8006aac <_printf_i+0x1f8>
 8006a16:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1a:	b004      	add	sp, #16
 8006a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	f043 0320 	orr.w	r3, r3, #32
 8006a26:	6023      	str	r3, [r4, #0]
 8006a28:	2778      	movs	r7, #120	; 0x78
 8006a2a:	4832      	ldr	r0, [pc, #200]	; (8006af4 <_printf_i+0x240>)
 8006a2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	6829      	ldr	r1, [r5, #0]
 8006a34:	061f      	lsls	r7, r3, #24
 8006a36:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a3a:	d402      	bmi.n	8006a42 <_printf_i+0x18e>
 8006a3c:	065f      	lsls	r7, r3, #25
 8006a3e:	bf48      	it	mi
 8006a40:	b2b6      	uxthmi	r6, r6
 8006a42:	07df      	lsls	r7, r3, #31
 8006a44:	bf48      	it	mi
 8006a46:	f043 0320 	orrmi.w	r3, r3, #32
 8006a4a:	6029      	str	r1, [r5, #0]
 8006a4c:	bf48      	it	mi
 8006a4e:	6023      	strmi	r3, [r4, #0]
 8006a50:	b91e      	cbnz	r6, 8006a5a <_printf_i+0x1a6>
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	f023 0320 	bic.w	r3, r3, #32
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	2310      	movs	r3, #16
 8006a5c:	e7a6      	b.n	80069ac <_printf_i+0xf8>
 8006a5e:	4824      	ldr	r0, [pc, #144]	; (8006af0 <_printf_i+0x23c>)
 8006a60:	e7e4      	b.n	8006a2c <_printf_i+0x178>
 8006a62:	4615      	mov	r5, r2
 8006a64:	e7bd      	b.n	80069e2 <_printf_i+0x12e>
 8006a66:	682b      	ldr	r3, [r5, #0]
 8006a68:	6826      	ldr	r6, [r4, #0]
 8006a6a:	1d18      	adds	r0, r3, #4
 8006a6c:	6961      	ldr	r1, [r4, #20]
 8006a6e:	6028      	str	r0, [r5, #0]
 8006a70:	0635      	lsls	r5, r6, #24
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	d501      	bpl.n	8006a7a <_printf_i+0x1c6>
 8006a76:	6019      	str	r1, [r3, #0]
 8006a78:	e002      	b.n	8006a80 <_printf_i+0x1cc>
 8006a7a:	0670      	lsls	r0, r6, #25
 8006a7c:	d5fb      	bpl.n	8006a76 <_printf_i+0x1c2>
 8006a7e:	8019      	strh	r1, [r3, #0]
 8006a80:	2300      	movs	r3, #0
 8006a82:	4615      	mov	r5, r2
 8006a84:	6123      	str	r3, [r4, #16]
 8006a86:	e7bc      	b.n	8006a02 <_printf_i+0x14e>
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	1d1a      	adds	r2, r3, #4
 8006a8e:	602a      	str	r2, [r5, #0]
 8006a90:	681d      	ldr	r5, [r3, #0]
 8006a92:	6862      	ldr	r2, [r4, #4]
 8006a94:	4628      	mov	r0, r5
 8006a96:	f000 fa86 	bl	8006fa6 <memchr>
 8006a9a:	b108      	cbz	r0, 8006aa0 <_printf_i+0x1ec>
 8006a9c:	1b40      	subs	r0, r0, r5
 8006a9e:	6060      	str	r0, [r4, #4]
 8006aa0:	6863      	ldr	r3, [r4, #4]
 8006aa2:	6123      	str	r3, [r4, #16]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aaa:	e7aa      	b.n	8006a02 <_printf_i+0x14e>
 8006aac:	462a      	mov	r2, r5
 8006aae:	4649      	mov	r1, r9
 8006ab0:	4640      	mov	r0, r8
 8006ab2:	6923      	ldr	r3, [r4, #16]
 8006ab4:	47d0      	blx	sl
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d0ad      	beq.n	8006a16 <_printf_i+0x162>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	079b      	lsls	r3, r3, #30
 8006abe:	d413      	bmi.n	8006ae8 <_printf_i+0x234>
 8006ac0:	68e0      	ldr	r0, [r4, #12]
 8006ac2:	9b03      	ldr	r3, [sp, #12]
 8006ac4:	4298      	cmp	r0, r3
 8006ac6:	bfb8      	it	lt
 8006ac8:	4618      	movlt	r0, r3
 8006aca:	e7a6      	b.n	8006a1a <_printf_i+0x166>
 8006acc:	2301      	movs	r3, #1
 8006ace:	4632      	mov	r2, r6
 8006ad0:	4649      	mov	r1, r9
 8006ad2:	4640      	mov	r0, r8
 8006ad4:	47d0      	blx	sl
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	d09d      	beq.n	8006a16 <_printf_i+0x162>
 8006ada:	3501      	adds	r5, #1
 8006adc:	68e3      	ldr	r3, [r4, #12]
 8006ade:	9903      	ldr	r1, [sp, #12]
 8006ae0:	1a5b      	subs	r3, r3, r1
 8006ae2:	42ab      	cmp	r3, r5
 8006ae4:	dcf2      	bgt.n	8006acc <_printf_i+0x218>
 8006ae6:	e7eb      	b.n	8006ac0 <_printf_i+0x20c>
 8006ae8:	2500      	movs	r5, #0
 8006aea:	f104 0619 	add.w	r6, r4, #25
 8006aee:	e7f5      	b.n	8006adc <_printf_i+0x228>
 8006af0:	08009692 	.word	0x08009692
 8006af4:	080096a3 	.word	0x080096a3

08006af8 <std>:
 8006af8:	2300      	movs	r3, #0
 8006afa:	b510      	push	{r4, lr}
 8006afc:	4604      	mov	r4, r0
 8006afe:	e9c0 3300 	strd	r3, r3, [r0]
 8006b02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b06:	6083      	str	r3, [r0, #8]
 8006b08:	8181      	strh	r1, [r0, #12]
 8006b0a:	6643      	str	r3, [r0, #100]	; 0x64
 8006b0c:	81c2      	strh	r2, [r0, #14]
 8006b0e:	6183      	str	r3, [r0, #24]
 8006b10:	4619      	mov	r1, r3
 8006b12:	2208      	movs	r2, #8
 8006b14:	305c      	adds	r0, #92	; 0x5c
 8006b16:	f000 f948 	bl	8006daa <memset>
 8006b1a:	4b0d      	ldr	r3, [pc, #52]	; (8006b50 <std+0x58>)
 8006b1c:	6224      	str	r4, [r4, #32]
 8006b1e:	6263      	str	r3, [r4, #36]	; 0x24
 8006b20:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <std+0x5c>)
 8006b22:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b24:	4b0c      	ldr	r3, [pc, #48]	; (8006b58 <std+0x60>)
 8006b26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b28:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <std+0x64>)
 8006b2a:	6323      	str	r3, [r4, #48]	; 0x30
 8006b2c:	4b0c      	ldr	r3, [pc, #48]	; (8006b60 <std+0x68>)
 8006b2e:	429c      	cmp	r4, r3
 8006b30:	d006      	beq.n	8006b40 <std+0x48>
 8006b32:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006b36:	4294      	cmp	r4, r2
 8006b38:	d002      	beq.n	8006b40 <std+0x48>
 8006b3a:	33d0      	adds	r3, #208	; 0xd0
 8006b3c:	429c      	cmp	r4, r3
 8006b3e:	d105      	bne.n	8006b4c <std+0x54>
 8006b40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b48:	f000 ba2a 	b.w	8006fa0 <__retarget_lock_init_recursive>
 8006b4c:	bd10      	pop	{r4, pc}
 8006b4e:	bf00      	nop
 8006b50:	08006d25 	.word	0x08006d25
 8006b54:	08006d47 	.word	0x08006d47
 8006b58:	08006d7f 	.word	0x08006d7f
 8006b5c:	08006da3 	.word	0x08006da3
 8006b60:	20000438 	.word	0x20000438

08006b64 <stdio_exit_handler>:
 8006b64:	4a02      	ldr	r2, [pc, #8]	; (8006b70 <stdio_exit_handler+0xc>)
 8006b66:	4903      	ldr	r1, [pc, #12]	; (8006b74 <stdio_exit_handler+0x10>)
 8006b68:	4803      	ldr	r0, [pc, #12]	; (8006b78 <stdio_exit_handler+0x14>)
 8006b6a:	f000 b869 	b.w	8006c40 <_fwalk_sglue>
 8006b6e:	bf00      	nop
 8006b70:	2000000c 	.word	0x2000000c
 8006b74:	0800897d 	.word	0x0800897d
 8006b78:	20000018 	.word	0x20000018

08006b7c <cleanup_stdio>:
 8006b7c:	6841      	ldr	r1, [r0, #4]
 8006b7e:	4b0c      	ldr	r3, [pc, #48]	; (8006bb0 <cleanup_stdio+0x34>)
 8006b80:	b510      	push	{r4, lr}
 8006b82:	4299      	cmp	r1, r3
 8006b84:	4604      	mov	r4, r0
 8006b86:	d001      	beq.n	8006b8c <cleanup_stdio+0x10>
 8006b88:	f001 fef8 	bl	800897c <_fflush_r>
 8006b8c:	68a1      	ldr	r1, [r4, #8]
 8006b8e:	4b09      	ldr	r3, [pc, #36]	; (8006bb4 <cleanup_stdio+0x38>)
 8006b90:	4299      	cmp	r1, r3
 8006b92:	d002      	beq.n	8006b9a <cleanup_stdio+0x1e>
 8006b94:	4620      	mov	r0, r4
 8006b96:	f001 fef1 	bl	800897c <_fflush_r>
 8006b9a:	68e1      	ldr	r1, [r4, #12]
 8006b9c:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <cleanup_stdio+0x3c>)
 8006b9e:	4299      	cmp	r1, r3
 8006ba0:	d004      	beq.n	8006bac <cleanup_stdio+0x30>
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ba8:	f001 bee8 	b.w	800897c <_fflush_r>
 8006bac:	bd10      	pop	{r4, pc}
 8006bae:	bf00      	nop
 8006bb0:	20000438 	.word	0x20000438
 8006bb4:	200004a0 	.word	0x200004a0
 8006bb8:	20000508 	.word	0x20000508

08006bbc <global_stdio_init.part.0>:
 8006bbc:	b510      	push	{r4, lr}
 8006bbe:	4b0b      	ldr	r3, [pc, #44]	; (8006bec <global_stdio_init.part.0+0x30>)
 8006bc0:	4c0b      	ldr	r4, [pc, #44]	; (8006bf0 <global_stdio_init.part.0+0x34>)
 8006bc2:	4a0c      	ldr	r2, [pc, #48]	; (8006bf4 <global_stdio_init.part.0+0x38>)
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	2104      	movs	r1, #4
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f7ff ff94 	bl	8006af8 <std>
 8006bd0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	2109      	movs	r1, #9
 8006bd8:	f7ff ff8e 	bl	8006af8 <std>
 8006bdc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006be0:	2202      	movs	r2, #2
 8006be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be6:	2112      	movs	r1, #18
 8006be8:	f7ff bf86 	b.w	8006af8 <std>
 8006bec:	20000570 	.word	0x20000570
 8006bf0:	20000438 	.word	0x20000438
 8006bf4:	08006b65 	.word	0x08006b65

08006bf8 <__sfp_lock_acquire>:
 8006bf8:	4801      	ldr	r0, [pc, #4]	; (8006c00 <__sfp_lock_acquire+0x8>)
 8006bfa:	f000 b9d2 	b.w	8006fa2 <__retarget_lock_acquire_recursive>
 8006bfe:	bf00      	nop
 8006c00:	20000579 	.word	0x20000579

08006c04 <__sfp_lock_release>:
 8006c04:	4801      	ldr	r0, [pc, #4]	; (8006c0c <__sfp_lock_release+0x8>)
 8006c06:	f000 b9cd 	b.w	8006fa4 <__retarget_lock_release_recursive>
 8006c0a:	bf00      	nop
 8006c0c:	20000579 	.word	0x20000579

08006c10 <__sinit>:
 8006c10:	b510      	push	{r4, lr}
 8006c12:	4604      	mov	r4, r0
 8006c14:	f7ff fff0 	bl	8006bf8 <__sfp_lock_acquire>
 8006c18:	6a23      	ldr	r3, [r4, #32]
 8006c1a:	b11b      	cbz	r3, 8006c24 <__sinit+0x14>
 8006c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c20:	f7ff bff0 	b.w	8006c04 <__sfp_lock_release>
 8006c24:	4b04      	ldr	r3, [pc, #16]	; (8006c38 <__sinit+0x28>)
 8006c26:	6223      	str	r3, [r4, #32]
 8006c28:	4b04      	ldr	r3, [pc, #16]	; (8006c3c <__sinit+0x2c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1f5      	bne.n	8006c1c <__sinit+0xc>
 8006c30:	f7ff ffc4 	bl	8006bbc <global_stdio_init.part.0>
 8006c34:	e7f2      	b.n	8006c1c <__sinit+0xc>
 8006c36:	bf00      	nop
 8006c38:	08006b7d 	.word	0x08006b7d
 8006c3c:	20000570 	.word	0x20000570

08006c40 <_fwalk_sglue>:
 8006c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c44:	4607      	mov	r7, r0
 8006c46:	4688      	mov	r8, r1
 8006c48:	4614      	mov	r4, r2
 8006c4a:	2600      	movs	r6, #0
 8006c4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c50:	f1b9 0901 	subs.w	r9, r9, #1
 8006c54:	d505      	bpl.n	8006c62 <_fwalk_sglue+0x22>
 8006c56:	6824      	ldr	r4, [r4, #0]
 8006c58:	2c00      	cmp	r4, #0
 8006c5a:	d1f7      	bne.n	8006c4c <_fwalk_sglue+0xc>
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c62:	89ab      	ldrh	r3, [r5, #12]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d907      	bls.n	8006c78 <_fwalk_sglue+0x38>
 8006c68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	d003      	beq.n	8006c78 <_fwalk_sglue+0x38>
 8006c70:	4629      	mov	r1, r5
 8006c72:	4638      	mov	r0, r7
 8006c74:	47c0      	blx	r8
 8006c76:	4306      	orrs	r6, r0
 8006c78:	3568      	adds	r5, #104	; 0x68
 8006c7a:	e7e9      	b.n	8006c50 <_fwalk_sglue+0x10>

08006c7c <sniprintf>:
 8006c7c:	b40c      	push	{r2, r3}
 8006c7e:	b530      	push	{r4, r5, lr}
 8006c80:	4b17      	ldr	r3, [pc, #92]	; (8006ce0 <sniprintf+0x64>)
 8006c82:	1e0c      	subs	r4, r1, #0
 8006c84:	681d      	ldr	r5, [r3, #0]
 8006c86:	b09d      	sub	sp, #116	; 0x74
 8006c88:	da08      	bge.n	8006c9c <sniprintf+0x20>
 8006c8a:	238b      	movs	r3, #139	; 0x8b
 8006c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c90:	602b      	str	r3, [r5, #0]
 8006c92:	b01d      	add	sp, #116	; 0x74
 8006c94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c98:	b002      	add	sp, #8
 8006c9a:	4770      	bx	lr
 8006c9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006ca0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ca4:	bf0c      	ite	eq
 8006ca6:	4623      	moveq	r3, r4
 8006ca8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006cac:	9304      	str	r3, [sp, #16]
 8006cae:	9307      	str	r3, [sp, #28]
 8006cb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006cb4:	9002      	str	r0, [sp, #8]
 8006cb6:	9006      	str	r0, [sp, #24]
 8006cb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	ab21      	add	r3, sp, #132	; 0x84
 8006cc0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006cc2:	a902      	add	r1, sp, #8
 8006cc4:	9301      	str	r3, [sp, #4]
 8006cc6:	f001 fcd9 	bl	800867c <_svfiprintf_r>
 8006cca:	1c43      	adds	r3, r0, #1
 8006ccc:	bfbc      	itt	lt
 8006cce:	238b      	movlt	r3, #139	; 0x8b
 8006cd0:	602b      	strlt	r3, [r5, #0]
 8006cd2:	2c00      	cmp	r4, #0
 8006cd4:	d0dd      	beq.n	8006c92 <sniprintf+0x16>
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	9b02      	ldr	r3, [sp, #8]
 8006cda:	701a      	strb	r2, [r3, #0]
 8006cdc:	e7d9      	b.n	8006c92 <sniprintf+0x16>
 8006cde:	bf00      	nop
 8006ce0:	20000064 	.word	0x20000064

08006ce4 <siprintf>:
 8006ce4:	b40e      	push	{r1, r2, r3}
 8006ce6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006cea:	b500      	push	{lr}
 8006cec:	b09c      	sub	sp, #112	; 0x70
 8006cee:	ab1d      	add	r3, sp, #116	; 0x74
 8006cf0:	9002      	str	r0, [sp, #8]
 8006cf2:	9006      	str	r0, [sp, #24]
 8006cf4:	9107      	str	r1, [sp, #28]
 8006cf6:	9104      	str	r1, [sp, #16]
 8006cf8:	4808      	ldr	r0, [pc, #32]	; (8006d1c <siprintf+0x38>)
 8006cfa:	4909      	ldr	r1, [pc, #36]	; (8006d20 <siprintf+0x3c>)
 8006cfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d00:	9105      	str	r1, [sp, #20]
 8006d02:	6800      	ldr	r0, [r0, #0]
 8006d04:	a902      	add	r1, sp, #8
 8006d06:	9301      	str	r3, [sp, #4]
 8006d08:	f001 fcb8 	bl	800867c <_svfiprintf_r>
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	9b02      	ldr	r3, [sp, #8]
 8006d10:	701a      	strb	r2, [r3, #0]
 8006d12:	b01c      	add	sp, #112	; 0x70
 8006d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d18:	b003      	add	sp, #12
 8006d1a:	4770      	bx	lr
 8006d1c:	20000064 	.word	0x20000064
 8006d20:	ffff0208 	.word	0xffff0208

08006d24 <__sread>:
 8006d24:	b510      	push	{r4, lr}
 8006d26:	460c      	mov	r4, r1
 8006d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d2c:	f000 f8ea 	bl	8006f04 <_read_r>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	bfab      	itete	ge
 8006d34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d36:	89a3      	ldrhlt	r3, [r4, #12]
 8006d38:	181b      	addge	r3, r3, r0
 8006d3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d3e:	bfac      	ite	ge
 8006d40:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d42:	81a3      	strhlt	r3, [r4, #12]
 8006d44:	bd10      	pop	{r4, pc}

08006d46 <__swrite>:
 8006d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d4a:	461f      	mov	r7, r3
 8006d4c:	898b      	ldrh	r3, [r1, #12]
 8006d4e:	4605      	mov	r5, r0
 8006d50:	05db      	lsls	r3, r3, #23
 8006d52:	460c      	mov	r4, r1
 8006d54:	4616      	mov	r6, r2
 8006d56:	d505      	bpl.n	8006d64 <__swrite+0x1e>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d60:	f000 f8be 	bl	8006ee0 <_lseek_r>
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	4632      	mov	r2, r6
 8006d68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d6c:	81a3      	strh	r3, [r4, #12]
 8006d6e:	4628      	mov	r0, r5
 8006d70:	463b      	mov	r3, r7
 8006d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d7a:	f000 b8d5 	b.w	8006f28 <_write_r>

08006d7e <__sseek>:
 8006d7e:	b510      	push	{r4, lr}
 8006d80:	460c      	mov	r4, r1
 8006d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d86:	f000 f8ab 	bl	8006ee0 <_lseek_r>
 8006d8a:	1c43      	adds	r3, r0, #1
 8006d8c:	89a3      	ldrh	r3, [r4, #12]
 8006d8e:	bf15      	itete	ne
 8006d90:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d9a:	81a3      	strheq	r3, [r4, #12]
 8006d9c:	bf18      	it	ne
 8006d9e:	81a3      	strhne	r3, [r4, #12]
 8006da0:	bd10      	pop	{r4, pc}

08006da2 <__sclose>:
 8006da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da6:	f000 b88b 	b.w	8006ec0 <_close_r>

08006daa <memset>:
 8006daa:	4603      	mov	r3, r0
 8006dac:	4402      	add	r2, r0
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d100      	bne.n	8006db4 <memset+0xa>
 8006db2:	4770      	bx	lr
 8006db4:	f803 1b01 	strb.w	r1, [r3], #1
 8006db8:	e7f9      	b.n	8006dae <memset+0x4>

08006dba <strchr>:
 8006dba:	4603      	mov	r3, r0
 8006dbc:	b2c9      	uxtb	r1, r1
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dc4:	b112      	cbz	r2, 8006dcc <strchr+0x12>
 8006dc6:	428a      	cmp	r2, r1
 8006dc8:	d1f9      	bne.n	8006dbe <strchr+0x4>
 8006dca:	4770      	bx	lr
 8006dcc:	2900      	cmp	r1, #0
 8006dce:	bf18      	it	ne
 8006dd0:	2000      	movne	r0, #0
 8006dd2:	4770      	bx	lr

08006dd4 <strtok>:
 8006dd4:	4b16      	ldr	r3, [pc, #88]	; (8006e30 <strtok+0x5c>)
 8006dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dda:	681f      	ldr	r7, [r3, #0]
 8006ddc:	4605      	mov	r5, r0
 8006dde:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8006de0:	460e      	mov	r6, r1
 8006de2:	b9ec      	cbnz	r4, 8006e20 <strtok+0x4c>
 8006de4:	2050      	movs	r0, #80	; 0x50
 8006de6:	f000 ffc3 	bl	8007d70 <malloc>
 8006dea:	4602      	mov	r2, r0
 8006dec:	6478      	str	r0, [r7, #68]	; 0x44
 8006dee:	b920      	cbnz	r0, 8006dfa <strtok+0x26>
 8006df0:	215b      	movs	r1, #91	; 0x5b
 8006df2:	4b10      	ldr	r3, [pc, #64]	; (8006e34 <strtok+0x60>)
 8006df4:	4810      	ldr	r0, [pc, #64]	; (8006e38 <strtok+0x64>)
 8006df6:	f000 f8e5 	bl	8006fc4 <__assert_func>
 8006dfa:	e9c0 4400 	strd	r4, r4, [r0]
 8006dfe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006e02:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006e06:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006e0a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006e0e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006e12:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006e16:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006e1a:	6184      	str	r4, [r0, #24]
 8006e1c:	7704      	strb	r4, [r0, #28]
 8006e1e:	6244      	str	r4, [r0, #36]	; 0x24
 8006e20:	4631      	mov	r1, r6
 8006e22:	4628      	mov	r0, r5
 8006e24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e26:	2301      	movs	r3, #1
 8006e28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e2c:	f000 b806 	b.w	8006e3c <__strtok_r>
 8006e30:	20000064 	.word	0x20000064
 8006e34:	080096b4 	.word	0x080096b4
 8006e38:	080096cb 	.word	0x080096cb

08006e3c <__strtok_r>:
 8006e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e3e:	b908      	cbnz	r0, 8006e44 <__strtok_r+0x8>
 8006e40:	6810      	ldr	r0, [r2, #0]
 8006e42:	b188      	cbz	r0, 8006e68 <__strtok_r+0x2c>
 8006e44:	4604      	mov	r4, r0
 8006e46:	460f      	mov	r7, r1
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006e4e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006e52:	b91e      	cbnz	r6, 8006e5c <__strtok_r+0x20>
 8006e54:	b965      	cbnz	r5, 8006e70 <__strtok_r+0x34>
 8006e56:	4628      	mov	r0, r5
 8006e58:	6015      	str	r5, [r2, #0]
 8006e5a:	e005      	b.n	8006e68 <__strtok_r+0x2c>
 8006e5c:	42b5      	cmp	r5, r6
 8006e5e:	d1f6      	bne.n	8006e4e <__strtok_r+0x12>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1f0      	bne.n	8006e46 <__strtok_r+0xa>
 8006e64:	6014      	str	r4, [r2, #0]
 8006e66:	7003      	strb	r3, [r0, #0]
 8006e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e6a:	461c      	mov	r4, r3
 8006e6c:	e00c      	b.n	8006e88 <__strtok_r+0x4c>
 8006e6e:	b915      	cbnz	r5, 8006e76 <__strtok_r+0x3a>
 8006e70:	460e      	mov	r6, r1
 8006e72:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e76:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006e7a:	42ab      	cmp	r3, r5
 8006e7c:	d1f7      	bne.n	8006e6e <__strtok_r+0x32>
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d0f3      	beq.n	8006e6a <__strtok_r+0x2e>
 8006e82:	2300      	movs	r3, #0
 8006e84:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006e88:	6014      	str	r4, [r2, #0]
 8006e8a:	e7ed      	b.n	8006e68 <__strtok_r+0x2c>

08006e8c <strstr>:
 8006e8c:	780a      	ldrb	r2, [r1, #0]
 8006e8e:	b570      	push	{r4, r5, r6, lr}
 8006e90:	b96a      	cbnz	r2, 8006eae <strstr+0x22>
 8006e92:	bd70      	pop	{r4, r5, r6, pc}
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d109      	bne.n	8006eac <strstr+0x20>
 8006e98:	460c      	mov	r4, r1
 8006e9a:	4605      	mov	r5, r0
 8006e9c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d0f6      	beq.n	8006e92 <strstr+0x6>
 8006ea4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006ea8:	429e      	cmp	r6, r3
 8006eaa:	d0f7      	beq.n	8006e9c <strstr+0x10>
 8006eac:	3001      	adds	r0, #1
 8006eae:	7803      	ldrb	r3, [r0, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1ef      	bne.n	8006e94 <strstr+0x8>
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	e7ec      	b.n	8006e92 <strstr+0x6>

08006eb8 <_localeconv_r>:
 8006eb8:	4800      	ldr	r0, [pc, #0]	; (8006ebc <_localeconv_r+0x4>)
 8006eba:	4770      	bx	lr
 8006ebc:	20000158 	.word	0x20000158

08006ec0 <_close_r>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	4d05      	ldr	r5, [pc, #20]	; (8006edc <_close_r+0x1c>)
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	4608      	mov	r0, r1
 8006eca:	602b      	str	r3, [r5, #0]
 8006ecc:	f7fb fa6e 	bl	80023ac <_close>
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	d102      	bne.n	8006eda <_close_r+0x1a>
 8006ed4:	682b      	ldr	r3, [r5, #0]
 8006ed6:	b103      	cbz	r3, 8006eda <_close_r+0x1a>
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	20000574 	.word	0x20000574

08006ee0 <_lseek_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	2200      	movs	r2, #0
 8006eea:	4d05      	ldr	r5, [pc, #20]	; (8006f00 <_lseek_r+0x20>)
 8006eec:	602a      	str	r2, [r5, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f7fb fa80 	bl	80023f4 <_lseek>
 8006ef4:	1c43      	adds	r3, r0, #1
 8006ef6:	d102      	bne.n	8006efe <_lseek_r+0x1e>
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	b103      	cbz	r3, 8006efe <_lseek_r+0x1e>
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	bd38      	pop	{r3, r4, r5, pc}
 8006f00:	20000574 	.word	0x20000574

08006f04 <_read_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4604      	mov	r4, r0
 8006f08:	4608      	mov	r0, r1
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	4d05      	ldr	r5, [pc, #20]	; (8006f24 <_read_r+0x20>)
 8006f10:	602a      	str	r2, [r5, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	f7fb fa11 	bl	800233a <_read>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	d102      	bne.n	8006f22 <_read_r+0x1e>
 8006f1c:	682b      	ldr	r3, [r5, #0]
 8006f1e:	b103      	cbz	r3, 8006f22 <_read_r+0x1e>
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	bd38      	pop	{r3, r4, r5, pc}
 8006f24:	20000574 	.word	0x20000574

08006f28 <_write_r>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	4608      	mov	r0, r1
 8006f2e:	4611      	mov	r1, r2
 8006f30:	2200      	movs	r2, #0
 8006f32:	4d05      	ldr	r5, [pc, #20]	; (8006f48 <_write_r+0x20>)
 8006f34:	602a      	str	r2, [r5, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	f7fb fa1c 	bl	8002374 <_write>
 8006f3c:	1c43      	adds	r3, r0, #1
 8006f3e:	d102      	bne.n	8006f46 <_write_r+0x1e>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	b103      	cbz	r3, 8006f46 <_write_r+0x1e>
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	bd38      	pop	{r3, r4, r5, pc}
 8006f48:	20000574 	.word	0x20000574

08006f4c <__errno>:
 8006f4c:	4b01      	ldr	r3, [pc, #4]	; (8006f54 <__errno+0x8>)
 8006f4e:	6818      	ldr	r0, [r3, #0]
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	20000064 	.word	0x20000064

08006f58 <__libc_init_array>:
 8006f58:	b570      	push	{r4, r5, r6, lr}
 8006f5a:	2600      	movs	r6, #0
 8006f5c:	4d0c      	ldr	r5, [pc, #48]	; (8006f90 <__libc_init_array+0x38>)
 8006f5e:	4c0d      	ldr	r4, [pc, #52]	; (8006f94 <__libc_init_array+0x3c>)
 8006f60:	1b64      	subs	r4, r4, r5
 8006f62:	10a4      	asrs	r4, r4, #2
 8006f64:	42a6      	cmp	r6, r4
 8006f66:	d109      	bne.n	8006f7c <__libc_init_array+0x24>
 8006f68:	f002 f88a 	bl	8009080 <_init>
 8006f6c:	2600      	movs	r6, #0
 8006f6e:	4d0a      	ldr	r5, [pc, #40]	; (8006f98 <__libc_init_array+0x40>)
 8006f70:	4c0a      	ldr	r4, [pc, #40]	; (8006f9c <__libc_init_array+0x44>)
 8006f72:	1b64      	subs	r4, r4, r5
 8006f74:	10a4      	asrs	r4, r4, #2
 8006f76:	42a6      	cmp	r6, r4
 8006f78:	d105      	bne.n	8006f86 <__libc_init_array+0x2e>
 8006f7a:	bd70      	pop	{r4, r5, r6, pc}
 8006f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f80:	4798      	blx	r3
 8006f82:	3601      	adds	r6, #1
 8006f84:	e7ee      	b.n	8006f64 <__libc_init_array+0xc>
 8006f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f8a:	4798      	blx	r3
 8006f8c:	3601      	adds	r6, #1
 8006f8e:	e7f2      	b.n	8006f76 <__libc_init_array+0x1e>
 8006f90:	08009a48 	.word	0x08009a48
 8006f94:	08009a48 	.word	0x08009a48
 8006f98:	08009a48 	.word	0x08009a48
 8006f9c:	08009a4c 	.word	0x08009a4c

08006fa0 <__retarget_lock_init_recursive>:
 8006fa0:	4770      	bx	lr

08006fa2 <__retarget_lock_acquire_recursive>:
 8006fa2:	4770      	bx	lr

08006fa4 <__retarget_lock_release_recursive>:
 8006fa4:	4770      	bx	lr

08006fa6 <memchr>:
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	b510      	push	{r4, lr}
 8006faa:	b2c9      	uxtb	r1, r1
 8006fac:	4402      	add	r2, r0
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	d101      	bne.n	8006fb8 <memchr+0x12>
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	e003      	b.n	8006fc0 <memchr+0x1a>
 8006fb8:	7804      	ldrb	r4, [r0, #0]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	428c      	cmp	r4, r1
 8006fbe:	d1f6      	bne.n	8006fae <memchr+0x8>
 8006fc0:	bd10      	pop	{r4, pc}
	...

08006fc4 <__assert_func>:
 8006fc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fc6:	4614      	mov	r4, r2
 8006fc8:	461a      	mov	r2, r3
 8006fca:	4b09      	ldr	r3, [pc, #36]	; (8006ff0 <__assert_func+0x2c>)
 8006fcc:	4605      	mov	r5, r0
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68d8      	ldr	r0, [r3, #12]
 8006fd2:	b14c      	cbz	r4, 8006fe8 <__assert_func+0x24>
 8006fd4:	4b07      	ldr	r3, [pc, #28]	; (8006ff4 <__assert_func+0x30>)
 8006fd6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fda:	9100      	str	r1, [sp, #0]
 8006fdc:	462b      	mov	r3, r5
 8006fde:	4906      	ldr	r1, [pc, #24]	; (8006ff8 <__assert_func+0x34>)
 8006fe0:	f001 fcf4 	bl	80089cc <fiprintf>
 8006fe4:	f001 fd3c 	bl	8008a60 <abort>
 8006fe8:	4b04      	ldr	r3, [pc, #16]	; (8006ffc <__assert_func+0x38>)
 8006fea:	461c      	mov	r4, r3
 8006fec:	e7f3      	b.n	8006fd6 <__assert_func+0x12>
 8006fee:	bf00      	nop
 8006ff0:	20000064 	.word	0x20000064
 8006ff4:	08009725 	.word	0x08009725
 8006ff8:	08009732 	.word	0x08009732
 8006ffc:	08009760 	.word	0x08009760

08007000 <quorem>:
 8007000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007004:	6903      	ldr	r3, [r0, #16]
 8007006:	690c      	ldr	r4, [r1, #16]
 8007008:	4607      	mov	r7, r0
 800700a:	42a3      	cmp	r3, r4
 800700c:	db7f      	blt.n	800710e <quorem+0x10e>
 800700e:	3c01      	subs	r4, #1
 8007010:	f100 0514 	add.w	r5, r0, #20
 8007014:	f101 0814 	add.w	r8, r1, #20
 8007018:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800701c:	9301      	str	r3, [sp, #4]
 800701e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007022:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007026:	3301      	adds	r3, #1
 8007028:	429a      	cmp	r2, r3
 800702a:	fbb2 f6f3 	udiv	r6, r2, r3
 800702e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007032:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007036:	d331      	bcc.n	800709c <quorem+0x9c>
 8007038:	f04f 0e00 	mov.w	lr, #0
 800703c:	4640      	mov	r0, r8
 800703e:	46ac      	mov	ip, r5
 8007040:	46f2      	mov	sl, lr
 8007042:	f850 2b04 	ldr.w	r2, [r0], #4
 8007046:	b293      	uxth	r3, r2
 8007048:	fb06 e303 	mla	r3, r6, r3, lr
 800704c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007050:	0c1a      	lsrs	r2, r3, #16
 8007052:	b29b      	uxth	r3, r3
 8007054:	fb06 220e 	mla	r2, r6, lr, r2
 8007058:	ebaa 0303 	sub.w	r3, sl, r3
 800705c:	f8dc a000 	ldr.w	sl, [ip]
 8007060:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007064:	fa1f fa8a 	uxth.w	sl, sl
 8007068:	4453      	add	r3, sl
 800706a:	f8dc a000 	ldr.w	sl, [ip]
 800706e:	b292      	uxth	r2, r2
 8007070:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007074:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007078:	b29b      	uxth	r3, r3
 800707a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800707e:	4581      	cmp	r9, r0
 8007080:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007084:	f84c 3b04 	str.w	r3, [ip], #4
 8007088:	d2db      	bcs.n	8007042 <quorem+0x42>
 800708a:	f855 300b 	ldr.w	r3, [r5, fp]
 800708e:	b92b      	cbnz	r3, 800709c <quorem+0x9c>
 8007090:	9b01      	ldr	r3, [sp, #4]
 8007092:	3b04      	subs	r3, #4
 8007094:	429d      	cmp	r5, r3
 8007096:	461a      	mov	r2, r3
 8007098:	d32d      	bcc.n	80070f6 <quorem+0xf6>
 800709a:	613c      	str	r4, [r7, #16]
 800709c:	4638      	mov	r0, r7
 800709e:	f001 f995 	bl	80083cc <__mcmp>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	db23      	blt.n	80070ee <quorem+0xee>
 80070a6:	4629      	mov	r1, r5
 80070a8:	2000      	movs	r0, #0
 80070aa:	3601      	adds	r6, #1
 80070ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80070b0:	f8d1 c000 	ldr.w	ip, [r1]
 80070b4:	b293      	uxth	r3, r2
 80070b6:	1ac3      	subs	r3, r0, r3
 80070b8:	0c12      	lsrs	r2, r2, #16
 80070ba:	fa1f f08c 	uxth.w	r0, ip
 80070be:	4403      	add	r3, r0
 80070c0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80070c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070ce:	45c1      	cmp	r9, r8
 80070d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80070d4:	f841 3b04 	str.w	r3, [r1], #4
 80070d8:	d2e8      	bcs.n	80070ac <quorem+0xac>
 80070da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070e2:	b922      	cbnz	r2, 80070ee <quorem+0xee>
 80070e4:	3b04      	subs	r3, #4
 80070e6:	429d      	cmp	r5, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	d30a      	bcc.n	8007102 <quorem+0x102>
 80070ec:	613c      	str	r4, [r7, #16]
 80070ee:	4630      	mov	r0, r6
 80070f0:	b003      	add	sp, #12
 80070f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f6:	6812      	ldr	r2, [r2, #0]
 80070f8:	3b04      	subs	r3, #4
 80070fa:	2a00      	cmp	r2, #0
 80070fc:	d1cd      	bne.n	800709a <quorem+0x9a>
 80070fe:	3c01      	subs	r4, #1
 8007100:	e7c8      	b.n	8007094 <quorem+0x94>
 8007102:	6812      	ldr	r2, [r2, #0]
 8007104:	3b04      	subs	r3, #4
 8007106:	2a00      	cmp	r2, #0
 8007108:	d1f0      	bne.n	80070ec <quorem+0xec>
 800710a:	3c01      	subs	r4, #1
 800710c:	e7eb      	b.n	80070e6 <quorem+0xe6>
 800710e:	2000      	movs	r0, #0
 8007110:	e7ee      	b.n	80070f0 <quorem+0xf0>
 8007112:	0000      	movs	r0, r0
 8007114:	0000      	movs	r0, r0
	...

08007118 <_dtoa_r>:
 8007118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	4616      	mov	r6, r2
 800711e:	461f      	mov	r7, r3
 8007120:	69c4      	ldr	r4, [r0, #28]
 8007122:	b099      	sub	sp, #100	; 0x64
 8007124:	4605      	mov	r5, r0
 8007126:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800712a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800712e:	b974      	cbnz	r4, 800714e <_dtoa_r+0x36>
 8007130:	2010      	movs	r0, #16
 8007132:	f000 fe1d 	bl	8007d70 <malloc>
 8007136:	4602      	mov	r2, r0
 8007138:	61e8      	str	r0, [r5, #28]
 800713a:	b920      	cbnz	r0, 8007146 <_dtoa_r+0x2e>
 800713c:	21ef      	movs	r1, #239	; 0xef
 800713e:	4bac      	ldr	r3, [pc, #688]	; (80073f0 <_dtoa_r+0x2d8>)
 8007140:	48ac      	ldr	r0, [pc, #688]	; (80073f4 <_dtoa_r+0x2dc>)
 8007142:	f7ff ff3f 	bl	8006fc4 <__assert_func>
 8007146:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800714a:	6004      	str	r4, [r0, #0]
 800714c:	60c4      	str	r4, [r0, #12]
 800714e:	69eb      	ldr	r3, [r5, #28]
 8007150:	6819      	ldr	r1, [r3, #0]
 8007152:	b151      	cbz	r1, 800716a <_dtoa_r+0x52>
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	2301      	movs	r3, #1
 8007158:	4093      	lsls	r3, r2
 800715a:	604a      	str	r2, [r1, #4]
 800715c:	608b      	str	r3, [r1, #8]
 800715e:	4628      	mov	r0, r5
 8007160:	f000 fefa 	bl	8007f58 <_Bfree>
 8007164:	2200      	movs	r2, #0
 8007166:	69eb      	ldr	r3, [r5, #28]
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	1e3b      	subs	r3, r7, #0
 800716c:	bfaf      	iteee	ge
 800716e:	2300      	movge	r3, #0
 8007170:	2201      	movlt	r2, #1
 8007172:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007176:	9305      	strlt	r3, [sp, #20]
 8007178:	bfa8      	it	ge
 800717a:	f8c8 3000 	strge.w	r3, [r8]
 800717e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007182:	4b9d      	ldr	r3, [pc, #628]	; (80073f8 <_dtoa_r+0x2e0>)
 8007184:	bfb8      	it	lt
 8007186:	f8c8 2000 	strlt.w	r2, [r8]
 800718a:	ea33 0309 	bics.w	r3, r3, r9
 800718e:	d119      	bne.n	80071c4 <_dtoa_r+0xac>
 8007190:	f242 730f 	movw	r3, #9999	; 0x270f
 8007194:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800719c:	4333      	orrs	r3, r6
 800719e:	f000 8589 	beq.w	8007cb4 <_dtoa_r+0xb9c>
 80071a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80071a4:	b953      	cbnz	r3, 80071bc <_dtoa_r+0xa4>
 80071a6:	4b95      	ldr	r3, [pc, #596]	; (80073fc <_dtoa_r+0x2e4>)
 80071a8:	e023      	b.n	80071f2 <_dtoa_r+0xda>
 80071aa:	4b95      	ldr	r3, [pc, #596]	; (8007400 <_dtoa_r+0x2e8>)
 80071ac:	9303      	str	r3, [sp, #12]
 80071ae:	3308      	adds	r3, #8
 80071b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80071b2:	6013      	str	r3, [r2, #0]
 80071b4:	9803      	ldr	r0, [sp, #12]
 80071b6:	b019      	add	sp, #100	; 0x64
 80071b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071bc:	4b8f      	ldr	r3, [pc, #572]	; (80073fc <_dtoa_r+0x2e4>)
 80071be:	9303      	str	r3, [sp, #12]
 80071c0:	3303      	adds	r3, #3
 80071c2:	e7f5      	b.n	80071b0 <_dtoa_r+0x98>
 80071c4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80071c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80071cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071d0:	2200      	movs	r2, #0
 80071d2:	2300      	movs	r3, #0
 80071d4:	f7f9 fbe8 	bl	80009a8 <__aeabi_dcmpeq>
 80071d8:	4680      	mov	r8, r0
 80071da:	b160      	cbz	r0, 80071f6 <_dtoa_r+0xde>
 80071dc:	2301      	movs	r3, #1
 80071de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80071e0:	6013      	str	r3, [r2, #0]
 80071e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 8562 	beq.w	8007cae <_dtoa_r+0xb96>
 80071ea:	4b86      	ldr	r3, [pc, #536]	; (8007404 <_dtoa_r+0x2ec>)
 80071ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80071ee:	6013      	str	r3, [r2, #0]
 80071f0:	3b01      	subs	r3, #1
 80071f2:	9303      	str	r3, [sp, #12]
 80071f4:	e7de      	b.n	80071b4 <_dtoa_r+0x9c>
 80071f6:	ab16      	add	r3, sp, #88	; 0x58
 80071f8:	9301      	str	r3, [sp, #4]
 80071fa:	ab17      	add	r3, sp, #92	; 0x5c
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	4628      	mov	r0, r5
 8007200:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007204:	f001 f98a 	bl	800851c <__d2b>
 8007208:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800720c:	4682      	mov	sl, r0
 800720e:	2c00      	cmp	r4, #0
 8007210:	d07e      	beq.n	8007310 <_dtoa_r+0x1f8>
 8007212:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007218:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800721c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007220:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007224:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007228:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800722c:	4619      	mov	r1, r3
 800722e:	2200      	movs	r2, #0
 8007230:	4b75      	ldr	r3, [pc, #468]	; (8007408 <_dtoa_r+0x2f0>)
 8007232:	f7f8 ff99 	bl	8000168 <__aeabi_dsub>
 8007236:	a368      	add	r3, pc, #416	; (adr r3, 80073d8 <_dtoa_r+0x2c0>)
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	f7f9 f94c 	bl	80004d8 <__aeabi_dmul>
 8007240:	a367      	add	r3, pc, #412	; (adr r3, 80073e0 <_dtoa_r+0x2c8>)
 8007242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007246:	f7f8 ff91 	bl	800016c <__adddf3>
 800724a:	4606      	mov	r6, r0
 800724c:	4620      	mov	r0, r4
 800724e:	460f      	mov	r7, r1
 8007250:	f7f9 f8d8 	bl	8000404 <__aeabi_i2d>
 8007254:	a364      	add	r3, pc, #400	; (adr r3, 80073e8 <_dtoa_r+0x2d0>)
 8007256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725a:	f7f9 f93d 	bl	80004d8 <__aeabi_dmul>
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	4630      	mov	r0, r6
 8007264:	4639      	mov	r1, r7
 8007266:	f7f8 ff81 	bl	800016c <__adddf3>
 800726a:	4606      	mov	r6, r0
 800726c:	460f      	mov	r7, r1
 800726e:	f7f9 fbe3 	bl	8000a38 <__aeabi_d2iz>
 8007272:	2200      	movs	r2, #0
 8007274:	4683      	mov	fp, r0
 8007276:	2300      	movs	r3, #0
 8007278:	4630      	mov	r0, r6
 800727a:	4639      	mov	r1, r7
 800727c:	f7f9 fb9e 	bl	80009bc <__aeabi_dcmplt>
 8007280:	b148      	cbz	r0, 8007296 <_dtoa_r+0x17e>
 8007282:	4658      	mov	r0, fp
 8007284:	f7f9 f8be 	bl	8000404 <__aeabi_i2d>
 8007288:	4632      	mov	r2, r6
 800728a:	463b      	mov	r3, r7
 800728c:	f7f9 fb8c 	bl	80009a8 <__aeabi_dcmpeq>
 8007290:	b908      	cbnz	r0, 8007296 <_dtoa_r+0x17e>
 8007292:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007296:	f1bb 0f16 	cmp.w	fp, #22
 800729a:	d857      	bhi.n	800734c <_dtoa_r+0x234>
 800729c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072a0:	4b5a      	ldr	r3, [pc, #360]	; (800740c <_dtoa_r+0x2f4>)
 80072a2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80072a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072aa:	f7f9 fb87 	bl	80009bc <__aeabi_dcmplt>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d04e      	beq.n	8007350 <_dtoa_r+0x238>
 80072b2:	2300      	movs	r3, #0
 80072b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80072ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80072bc:	1b1b      	subs	r3, r3, r4
 80072be:	1e5a      	subs	r2, r3, #1
 80072c0:	bf46      	itte	mi
 80072c2:	f1c3 0901 	rsbmi	r9, r3, #1
 80072c6:	2300      	movmi	r3, #0
 80072c8:	f04f 0900 	movpl.w	r9, #0
 80072cc:	9209      	str	r2, [sp, #36]	; 0x24
 80072ce:	bf48      	it	mi
 80072d0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80072d2:	f1bb 0f00 	cmp.w	fp, #0
 80072d6:	db3d      	blt.n	8007354 <_dtoa_r+0x23c>
 80072d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072da:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80072de:	445b      	add	r3, fp
 80072e0:	9309      	str	r3, [sp, #36]	; 0x24
 80072e2:	2300      	movs	r3, #0
 80072e4:	930a      	str	r3, [sp, #40]	; 0x28
 80072e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072e8:	2b09      	cmp	r3, #9
 80072ea:	d867      	bhi.n	80073bc <_dtoa_r+0x2a4>
 80072ec:	2b05      	cmp	r3, #5
 80072ee:	bfc4      	itt	gt
 80072f0:	3b04      	subgt	r3, #4
 80072f2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80072f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072f6:	bfc8      	it	gt
 80072f8:	2400      	movgt	r4, #0
 80072fa:	f1a3 0302 	sub.w	r3, r3, #2
 80072fe:	bfd8      	it	le
 8007300:	2401      	movle	r4, #1
 8007302:	2b03      	cmp	r3, #3
 8007304:	f200 8086 	bhi.w	8007414 <_dtoa_r+0x2fc>
 8007308:	e8df f003 	tbb	[pc, r3]
 800730c:	5637392c 	.word	0x5637392c
 8007310:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007314:	441c      	add	r4, r3
 8007316:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800731a:	2b20      	cmp	r3, #32
 800731c:	bfc1      	itttt	gt
 800731e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007322:	fa09 f903 	lslgt.w	r9, r9, r3
 8007326:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800732a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800732e:	bfd6      	itet	le
 8007330:	f1c3 0320 	rsble	r3, r3, #32
 8007334:	ea49 0003 	orrgt.w	r0, r9, r3
 8007338:	fa06 f003 	lslle.w	r0, r6, r3
 800733c:	f7f9 f852 	bl	80003e4 <__aeabi_ui2d>
 8007340:	2201      	movs	r2, #1
 8007342:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007346:	3c01      	subs	r4, #1
 8007348:	9213      	str	r2, [sp, #76]	; 0x4c
 800734a:	e76f      	b.n	800722c <_dtoa_r+0x114>
 800734c:	2301      	movs	r3, #1
 800734e:	e7b3      	b.n	80072b8 <_dtoa_r+0x1a0>
 8007350:	900f      	str	r0, [sp, #60]	; 0x3c
 8007352:	e7b2      	b.n	80072ba <_dtoa_r+0x1a2>
 8007354:	f1cb 0300 	rsb	r3, fp, #0
 8007358:	930a      	str	r3, [sp, #40]	; 0x28
 800735a:	2300      	movs	r3, #0
 800735c:	eba9 090b 	sub.w	r9, r9, fp
 8007360:	930e      	str	r3, [sp, #56]	; 0x38
 8007362:	e7c0      	b.n	80072e6 <_dtoa_r+0x1ce>
 8007364:	2300      	movs	r3, #0
 8007366:	930b      	str	r3, [sp, #44]	; 0x2c
 8007368:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800736a:	2b00      	cmp	r3, #0
 800736c:	dc55      	bgt.n	800741a <_dtoa_r+0x302>
 800736e:	2301      	movs	r3, #1
 8007370:	461a      	mov	r2, r3
 8007372:	9306      	str	r3, [sp, #24]
 8007374:	9308      	str	r3, [sp, #32]
 8007376:	9223      	str	r2, [sp, #140]	; 0x8c
 8007378:	e00b      	b.n	8007392 <_dtoa_r+0x27a>
 800737a:	2301      	movs	r3, #1
 800737c:	e7f3      	b.n	8007366 <_dtoa_r+0x24e>
 800737e:	2300      	movs	r3, #0
 8007380:	930b      	str	r3, [sp, #44]	; 0x2c
 8007382:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007384:	445b      	add	r3, fp
 8007386:	9306      	str	r3, [sp, #24]
 8007388:	3301      	adds	r3, #1
 800738a:	2b01      	cmp	r3, #1
 800738c:	9308      	str	r3, [sp, #32]
 800738e:	bfb8      	it	lt
 8007390:	2301      	movlt	r3, #1
 8007392:	2100      	movs	r1, #0
 8007394:	2204      	movs	r2, #4
 8007396:	69e8      	ldr	r0, [r5, #28]
 8007398:	f102 0614 	add.w	r6, r2, #20
 800739c:	429e      	cmp	r6, r3
 800739e:	d940      	bls.n	8007422 <_dtoa_r+0x30a>
 80073a0:	6041      	str	r1, [r0, #4]
 80073a2:	4628      	mov	r0, r5
 80073a4:	f000 fd98 	bl	8007ed8 <_Balloc>
 80073a8:	9003      	str	r0, [sp, #12]
 80073aa:	2800      	cmp	r0, #0
 80073ac:	d13c      	bne.n	8007428 <_dtoa_r+0x310>
 80073ae:	4602      	mov	r2, r0
 80073b0:	f240 11af 	movw	r1, #431	; 0x1af
 80073b4:	4b16      	ldr	r3, [pc, #88]	; (8007410 <_dtoa_r+0x2f8>)
 80073b6:	e6c3      	b.n	8007140 <_dtoa_r+0x28>
 80073b8:	2301      	movs	r3, #1
 80073ba:	e7e1      	b.n	8007380 <_dtoa_r+0x268>
 80073bc:	2401      	movs	r4, #1
 80073be:	2300      	movs	r3, #0
 80073c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80073c2:	9322      	str	r3, [sp, #136]	; 0x88
 80073c4:	f04f 33ff 	mov.w	r3, #4294967295
 80073c8:	2200      	movs	r2, #0
 80073ca:	9306      	str	r3, [sp, #24]
 80073cc:	9308      	str	r3, [sp, #32]
 80073ce:	2312      	movs	r3, #18
 80073d0:	e7d1      	b.n	8007376 <_dtoa_r+0x25e>
 80073d2:	bf00      	nop
 80073d4:	f3af 8000 	nop.w
 80073d8:	636f4361 	.word	0x636f4361
 80073dc:	3fd287a7 	.word	0x3fd287a7
 80073e0:	8b60c8b3 	.word	0x8b60c8b3
 80073e4:	3fc68a28 	.word	0x3fc68a28
 80073e8:	509f79fb 	.word	0x509f79fb
 80073ec:	3fd34413 	.word	0x3fd34413
 80073f0:	080096b4 	.word	0x080096b4
 80073f4:	0800976e 	.word	0x0800976e
 80073f8:	7ff00000 	.word	0x7ff00000
 80073fc:	0800976a 	.word	0x0800976a
 8007400:	08009761 	.word	0x08009761
 8007404:	08009691 	.word	0x08009691
 8007408:	3ff80000 	.word	0x3ff80000
 800740c:	08009858 	.word	0x08009858
 8007410:	080097c6 	.word	0x080097c6
 8007414:	2301      	movs	r3, #1
 8007416:	930b      	str	r3, [sp, #44]	; 0x2c
 8007418:	e7d4      	b.n	80073c4 <_dtoa_r+0x2ac>
 800741a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800741c:	9306      	str	r3, [sp, #24]
 800741e:	9308      	str	r3, [sp, #32]
 8007420:	e7b7      	b.n	8007392 <_dtoa_r+0x27a>
 8007422:	3101      	adds	r1, #1
 8007424:	0052      	lsls	r2, r2, #1
 8007426:	e7b7      	b.n	8007398 <_dtoa_r+0x280>
 8007428:	69eb      	ldr	r3, [r5, #28]
 800742a:	9a03      	ldr	r2, [sp, #12]
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	9b08      	ldr	r3, [sp, #32]
 8007430:	2b0e      	cmp	r3, #14
 8007432:	f200 80a8 	bhi.w	8007586 <_dtoa_r+0x46e>
 8007436:	2c00      	cmp	r4, #0
 8007438:	f000 80a5 	beq.w	8007586 <_dtoa_r+0x46e>
 800743c:	f1bb 0f00 	cmp.w	fp, #0
 8007440:	dd34      	ble.n	80074ac <_dtoa_r+0x394>
 8007442:	4b9a      	ldr	r3, [pc, #616]	; (80076ac <_dtoa_r+0x594>)
 8007444:	f00b 020f 	and.w	r2, fp, #15
 8007448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800744c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007450:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007454:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007458:	ea4f 142b 	mov.w	r4, fp, asr #4
 800745c:	d016      	beq.n	800748c <_dtoa_r+0x374>
 800745e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007462:	4b93      	ldr	r3, [pc, #588]	; (80076b0 <_dtoa_r+0x598>)
 8007464:	2703      	movs	r7, #3
 8007466:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800746a:	f7f9 f95f 	bl	800072c <__aeabi_ddiv>
 800746e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007472:	f004 040f 	and.w	r4, r4, #15
 8007476:	4e8e      	ldr	r6, [pc, #568]	; (80076b0 <_dtoa_r+0x598>)
 8007478:	b954      	cbnz	r4, 8007490 <_dtoa_r+0x378>
 800747a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800747e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007482:	f7f9 f953 	bl	800072c <__aeabi_ddiv>
 8007486:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800748a:	e029      	b.n	80074e0 <_dtoa_r+0x3c8>
 800748c:	2702      	movs	r7, #2
 800748e:	e7f2      	b.n	8007476 <_dtoa_r+0x35e>
 8007490:	07e1      	lsls	r1, r4, #31
 8007492:	d508      	bpl.n	80074a6 <_dtoa_r+0x38e>
 8007494:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007498:	e9d6 2300 	ldrd	r2, r3, [r6]
 800749c:	f7f9 f81c 	bl	80004d8 <__aeabi_dmul>
 80074a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80074a4:	3701      	adds	r7, #1
 80074a6:	1064      	asrs	r4, r4, #1
 80074a8:	3608      	adds	r6, #8
 80074aa:	e7e5      	b.n	8007478 <_dtoa_r+0x360>
 80074ac:	f000 80a5 	beq.w	80075fa <_dtoa_r+0x4e2>
 80074b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074b4:	f1cb 0400 	rsb	r4, fp, #0
 80074b8:	4b7c      	ldr	r3, [pc, #496]	; (80076ac <_dtoa_r+0x594>)
 80074ba:	f004 020f 	and.w	r2, r4, #15
 80074be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	f7f9 f807 	bl	80004d8 <__aeabi_dmul>
 80074ca:	2702      	movs	r7, #2
 80074cc:	2300      	movs	r3, #0
 80074ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074d2:	4e77      	ldr	r6, [pc, #476]	; (80076b0 <_dtoa_r+0x598>)
 80074d4:	1124      	asrs	r4, r4, #4
 80074d6:	2c00      	cmp	r4, #0
 80074d8:	f040 8084 	bne.w	80075e4 <_dtoa_r+0x4cc>
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1d2      	bne.n	8007486 <_dtoa_r+0x36e>
 80074e0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80074e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80074e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 8087 	beq.w	80075fe <_dtoa_r+0x4e6>
 80074f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074f4:	2200      	movs	r2, #0
 80074f6:	4b6f      	ldr	r3, [pc, #444]	; (80076b4 <_dtoa_r+0x59c>)
 80074f8:	f7f9 fa60 	bl	80009bc <__aeabi_dcmplt>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d07e      	beq.n	80075fe <_dtoa_r+0x4e6>
 8007500:	9b08      	ldr	r3, [sp, #32]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d07b      	beq.n	80075fe <_dtoa_r+0x4e6>
 8007506:	9b06      	ldr	r3, [sp, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	dd38      	ble.n	800757e <_dtoa_r+0x466>
 800750c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007510:	2200      	movs	r2, #0
 8007512:	4b69      	ldr	r3, [pc, #420]	; (80076b8 <_dtoa_r+0x5a0>)
 8007514:	f7f8 ffe0 	bl	80004d8 <__aeabi_dmul>
 8007518:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800751c:	9c06      	ldr	r4, [sp, #24]
 800751e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007522:	3701      	adds	r7, #1
 8007524:	4638      	mov	r0, r7
 8007526:	f7f8 ff6d 	bl	8000404 <__aeabi_i2d>
 800752a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800752e:	f7f8 ffd3 	bl	80004d8 <__aeabi_dmul>
 8007532:	2200      	movs	r2, #0
 8007534:	4b61      	ldr	r3, [pc, #388]	; (80076bc <_dtoa_r+0x5a4>)
 8007536:	f7f8 fe19 	bl	800016c <__adddf3>
 800753a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800753e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007542:	9611      	str	r6, [sp, #68]	; 0x44
 8007544:	2c00      	cmp	r4, #0
 8007546:	d15d      	bne.n	8007604 <_dtoa_r+0x4ec>
 8007548:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800754c:	2200      	movs	r2, #0
 800754e:	4b5c      	ldr	r3, [pc, #368]	; (80076c0 <_dtoa_r+0x5a8>)
 8007550:	f7f8 fe0a 	bl	8000168 <__aeabi_dsub>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800755c:	4633      	mov	r3, r6
 800755e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007560:	f7f9 fa4a 	bl	80009f8 <__aeabi_dcmpgt>
 8007564:	2800      	cmp	r0, #0
 8007566:	f040 8295 	bne.w	8007a94 <_dtoa_r+0x97c>
 800756a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800756e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007570:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007574:	f7f9 fa22 	bl	80009bc <__aeabi_dcmplt>
 8007578:	2800      	cmp	r0, #0
 800757a:	f040 8289 	bne.w	8007a90 <_dtoa_r+0x978>
 800757e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007582:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007586:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007588:	2b00      	cmp	r3, #0
 800758a:	f2c0 8151 	blt.w	8007830 <_dtoa_r+0x718>
 800758e:	f1bb 0f0e 	cmp.w	fp, #14
 8007592:	f300 814d 	bgt.w	8007830 <_dtoa_r+0x718>
 8007596:	4b45      	ldr	r3, [pc, #276]	; (80076ac <_dtoa_r+0x594>)
 8007598:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800759c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075a0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80075a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f280 80da 	bge.w	8007760 <_dtoa_r+0x648>
 80075ac:	9b08      	ldr	r3, [sp, #32]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f300 80d6 	bgt.w	8007760 <_dtoa_r+0x648>
 80075b4:	f040 826b 	bne.w	8007a8e <_dtoa_r+0x976>
 80075b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075bc:	2200      	movs	r2, #0
 80075be:	4b40      	ldr	r3, [pc, #256]	; (80076c0 <_dtoa_r+0x5a8>)
 80075c0:	f7f8 ff8a 	bl	80004d8 <__aeabi_dmul>
 80075c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075c8:	f7f9 fa0c 	bl	80009e4 <__aeabi_dcmpge>
 80075cc:	9c08      	ldr	r4, [sp, #32]
 80075ce:	4626      	mov	r6, r4
 80075d0:	2800      	cmp	r0, #0
 80075d2:	f040 8241 	bne.w	8007a58 <_dtoa_r+0x940>
 80075d6:	2331      	movs	r3, #49	; 0x31
 80075d8:	9f03      	ldr	r7, [sp, #12]
 80075da:	f10b 0b01 	add.w	fp, fp, #1
 80075de:	f807 3b01 	strb.w	r3, [r7], #1
 80075e2:	e23d      	b.n	8007a60 <_dtoa_r+0x948>
 80075e4:	07e2      	lsls	r2, r4, #31
 80075e6:	d505      	bpl.n	80075f4 <_dtoa_r+0x4dc>
 80075e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075ec:	f7f8 ff74 	bl	80004d8 <__aeabi_dmul>
 80075f0:	2301      	movs	r3, #1
 80075f2:	3701      	adds	r7, #1
 80075f4:	1064      	asrs	r4, r4, #1
 80075f6:	3608      	adds	r6, #8
 80075f8:	e76d      	b.n	80074d6 <_dtoa_r+0x3be>
 80075fa:	2702      	movs	r7, #2
 80075fc:	e770      	b.n	80074e0 <_dtoa_r+0x3c8>
 80075fe:	46d8      	mov	r8, fp
 8007600:	9c08      	ldr	r4, [sp, #32]
 8007602:	e78f      	b.n	8007524 <_dtoa_r+0x40c>
 8007604:	9903      	ldr	r1, [sp, #12]
 8007606:	4b29      	ldr	r3, [pc, #164]	; (80076ac <_dtoa_r+0x594>)
 8007608:	4421      	add	r1, r4
 800760a:	9112      	str	r1, [sp, #72]	; 0x48
 800760c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800760e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007612:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007616:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800761a:	2900      	cmp	r1, #0
 800761c:	d054      	beq.n	80076c8 <_dtoa_r+0x5b0>
 800761e:	2000      	movs	r0, #0
 8007620:	4928      	ldr	r1, [pc, #160]	; (80076c4 <_dtoa_r+0x5ac>)
 8007622:	f7f9 f883 	bl	800072c <__aeabi_ddiv>
 8007626:	463b      	mov	r3, r7
 8007628:	4632      	mov	r2, r6
 800762a:	f7f8 fd9d 	bl	8000168 <__aeabi_dsub>
 800762e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007632:	9f03      	ldr	r7, [sp, #12]
 8007634:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007638:	f7f9 f9fe 	bl	8000a38 <__aeabi_d2iz>
 800763c:	4604      	mov	r4, r0
 800763e:	f7f8 fee1 	bl	8000404 <__aeabi_i2d>
 8007642:	4602      	mov	r2, r0
 8007644:	460b      	mov	r3, r1
 8007646:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800764a:	f7f8 fd8d 	bl	8000168 <__aeabi_dsub>
 800764e:	4602      	mov	r2, r0
 8007650:	460b      	mov	r3, r1
 8007652:	3430      	adds	r4, #48	; 0x30
 8007654:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007658:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800765c:	f807 4b01 	strb.w	r4, [r7], #1
 8007660:	f7f9 f9ac 	bl	80009bc <__aeabi_dcmplt>
 8007664:	2800      	cmp	r0, #0
 8007666:	d173      	bne.n	8007750 <_dtoa_r+0x638>
 8007668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800766c:	2000      	movs	r0, #0
 800766e:	4911      	ldr	r1, [pc, #68]	; (80076b4 <_dtoa_r+0x59c>)
 8007670:	f7f8 fd7a 	bl	8000168 <__aeabi_dsub>
 8007674:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007678:	f7f9 f9a0 	bl	80009bc <__aeabi_dcmplt>
 800767c:	2800      	cmp	r0, #0
 800767e:	f040 80b6 	bne.w	80077ee <_dtoa_r+0x6d6>
 8007682:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007684:	429f      	cmp	r7, r3
 8007686:	f43f af7a 	beq.w	800757e <_dtoa_r+0x466>
 800768a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800768e:	2200      	movs	r2, #0
 8007690:	4b09      	ldr	r3, [pc, #36]	; (80076b8 <_dtoa_r+0x5a0>)
 8007692:	f7f8 ff21 	bl	80004d8 <__aeabi_dmul>
 8007696:	2200      	movs	r2, #0
 8007698:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800769c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076a0:	4b05      	ldr	r3, [pc, #20]	; (80076b8 <_dtoa_r+0x5a0>)
 80076a2:	f7f8 ff19 	bl	80004d8 <__aeabi_dmul>
 80076a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076aa:	e7c3      	b.n	8007634 <_dtoa_r+0x51c>
 80076ac:	08009858 	.word	0x08009858
 80076b0:	08009830 	.word	0x08009830
 80076b4:	3ff00000 	.word	0x3ff00000
 80076b8:	40240000 	.word	0x40240000
 80076bc:	401c0000 	.word	0x401c0000
 80076c0:	40140000 	.word	0x40140000
 80076c4:	3fe00000 	.word	0x3fe00000
 80076c8:	4630      	mov	r0, r6
 80076ca:	4639      	mov	r1, r7
 80076cc:	f7f8 ff04 	bl	80004d8 <__aeabi_dmul>
 80076d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076d6:	9c03      	ldr	r4, [sp, #12]
 80076d8:	9314      	str	r3, [sp, #80]	; 0x50
 80076da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076de:	f7f9 f9ab 	bl	8000a38 <__aeabi_d2iz>
 80076e2:	9015      	str	r0, [sp, #84]	; 0x54
 80076e4:	f7f8 fe8e 	bl	8000404 <__aeabi_i2d>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076f0:	f7f8 fd3a 	bl	8000168 <__aeabi_dsub>
 80076f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076f6:	4606      	mov	r6, r0
 80076f8:	3330      	adds	r3, #48	; 0x30
 80076fa:	f804 3b01 	strb.w	r3, [r4], #1
 80076fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007700:	460f      	mov	r7, r1
 8007702:	429c      	cmp	r4, r3
 8007704:	f04f 0200 	mov.w	r2, #0
 8007708:	d124      	bne.n	8007754 <_dtoa_r+0x63c>
 800770a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800770e:	4baf      	ldr	r3, [pc, #700]	; (80079cc <_dtoa_r+0x8b4>)
 8007710:	f7f8 fd2c 	bl	800016c <__adddf3>
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	4630      	mov	r0, r6
 800771a:	4639      	mov	r1, r7
 800771c:	f7f9 f96c 	bl	80009f8 <__aeabi_dcmpgt>
 8007720:	2800      	cmp	r0, #0
 8007722:	d163      	bne.n	80077ec <_dtoa_r+0x6d4>
 8007724:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007728:	2000      	movs	r0, #0
 800772a:	49a8      	ldr	r1, [pc, #672]	; (80079cc <_dtoa_r+0x8b4>)
 800772c:	f7f8 fd1c 	bl	8000168 <__aeabi_dsub>
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	4630      	mov	r0, r6
 8007736:	4639      	mov	r1, r7
 8007738:	f7f9 f940 	bl	80009bc <__aeabi_dcmplt>
 800773c:	2800      	cmp	r0, #0
 800773e:	f43f af1e 	beq.w	800757e <_dtoa_r+0x466>
 8007742:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007744:	1e7b      	subs	r3, r7, #1
 8007746:	9314      	str	r3, [sp, #80]	; 0x50
 8007748:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800774c:	2b30      	cmp	r3, #48	; 0x30
 800774e:	d0f8      	beq.n	8007742 <_dtoa_r+0x62a>
 8007750:	46c3      	mov	fp, r8
 8007752:	e03b      	b.n	80077cc <_dtoa_r+0x6b4>
 8007754:	4b9e      	ldr	r3, [pc, #632]	; (80079d0 <_dtoa_r+0x8b8>)
 8007756:	f7f8 febf 	bl	80004d8 <__aeabi_dmul>
 800775a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800775e:	e7bc      	b.n	80076da <_dtoa_r+0x5c2>
 8007760:	9f03      	ldr	r7, [sp, #12]
 8007762:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007766:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800776a:	4640      	mov	r0, r8
 800776c:	4649      	mov	r1, r9
 800776e:	f7f8 ffdd 	bl	800072c <__aeabi_ddiv>
 8007772:	f7f9 f961 	bl	8000a38 <__aeabi_d2iz>
 8007776:	4604      	mov	r4, r0
 8007778:	f7f8 fe44 	bl	8000404 <__aeabi_i2d>
 800777c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007780:	f7f8 feaa 	bl	80004d8 <__aeabi_dmul>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4640      	mov	r0, r8
 800778a:	4649      	mov	r1, r9
 800778c:	f7f8 fcec 	bl	8000168 <__aeabi_dsub>
 8007790:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007794:	f807 6b01 	strb.w	r6, [r7], #1
 8007798:	9e03      	ldr	r6, [sp, #12]
 800779a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800779e:	1bbe      	subs	r6, r7, r6
 80077a0:	45b4      	cmp	ip, r6
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	d136      	bne.n	8007816 <_dtoa_r+0x6fe>
 80077a8:	f7f8 fce0 	bl	800016c <__adddf3>
 80077ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077b0:	4680      	mov	r8, r0
 80077b2:	4689      	mov	r9, r1
 80077b4:	f7f9 f920 	bl	80009f8 <__aeabi_dcmpgt>
 80077b8:	bb58      	cbnz	r0, 8007812 <_dtoa_r+0x6fa>
 80077ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077be:	4640      	mov	r0, r8
 80077c0:	4649      	mov	r1, r9
 80077c2:	f7f9 f8f1 	bl	80009a8 <__aeabi_dcmpeq>
 80077c6:	b108      	cbz	r0, 80077cc <_dtoa_r+0x6b4>
 80077c8:	07e3      	lsls	r3, r4, #31
 80077ca:	d422      	bmi.n	8007812 <_dtoa_r+0x6fa>
 80077cc:	4651      	mov	r1, sl
 80077ce:	4628      	mov	r0, r5
 80077d0:	f000 fbc2 	bl	8007f58 <_Bfree>
 80077d4:	2300      	movs	r3, #0
 80077d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80077d8:	703b      	strb	r3, [r7, #0]
 80077da:	f10b 0301 	add.w	r3, fp, #1
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f43f ace6 	beq.w	80071b4 <_dtoa_r+0x9c>
 80077e8:	601f      	str	r7, [r3, #0]
 80077ea:	e4e3      	b.n	80071b4 <_dtoa_r+0x9c>
 80077ec:	4627      	mov	r7, r4
 80077ee:	463b      	mov	r3, r7
 80077f0:	461f      	mov	r7, r3
 80077f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077f6:	2a39      	cmp	r2, #57	; 0x39
 80077f8:	d107      	bne.n	800780a <_dtoa_r+0x6f2>
 80077fa:	9a03      	ldr	r2, [sp, #12]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d1f7      	bne.n	80077f0 <_dtoa_r+0x6d8>
 8007800:	2230      	movs	r2, #48	; 0x30
 8007802:	9903      	ldr	r1, [sp, #12]
 8007804:	f108 0801 	add.w	r8, r8, #1
 8007808:	700a      	strb	r2, [r1, #0]
 800780a:	781a      	ldrb	r2, [r3, #0]
 800780c:	3201      	adds	r2, #1
 800780e:	701a      	strb	r2, [r3, #0]
 8007810:	e79e      	b.n	8007750 <_dtoa_r+0x638>
 8007812:	46d8      	mov	r8, fp
 8007814:	e7eb      	b.n	80077ee <_dtoa_r+0x6d6>
 8007816:	2200      	movs	r2, #0
 8007818:	4b6d      	ldr	r3, [pc, #436]	; (80079d0 <_dtoa_r+0x8b8>)
 800781a:	f7f8 fe5d 	bl	80004d8 <__aeabi_dmul>
 800781e:	2200      	movs	r2, #0
 8007820:	2300      	movs	r3, #0
 8007822:	4680      	mov	r8, r0
 8007824:	4689      	mov	r9, r1
 8007826:	f7f9 f8bf 	bl	80009a8 <__aeabi_dcmpeq>
 800782a:	2800      	cmp	r0, #0
 800782c:	d09b      	beq.n	8007766 <_dtoa_r+0x64e>
 800782e:	e7cd      	b.n	80077cc <_dtoa_r+0x6b4>
 8007830:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007832:	2a00      	cmp	r2, #0
 8007834:	f000 80c4 	beq.w	80079c0 <_dtoa_r+0x8a8>
 8007838:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800783a:	2a01      	cmp	r2, #1
 800783c:	f300 80a8 	bgt.w	8007990 <_dtoa_r+0x878>
 8007840:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007842:	2a00      	cmp	r2, #0
 8007844:	f000 80a0 	beq.w	8007988 <_dtoa_r+0x870>
 8007848:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800784c:	464f      	mov	r7, r9
 800784e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007852:	2101      	movs	r1, #1
 8007854:	441a      	add	r2, r3
 8007856:	4628      	mov	r0, r5
 8007858:	4499      	add	r9, r3
 800785a:	9209      	str	r2, [sp, #36]	; 0x24
 800785c:	f000 fc32 	bl	80080c4 <__i2b>
 8007860:	4606      	mov	r6, r0
 8007862:	b15f      	cbz	r7, 800787c <_dtoa_r+0x764>
 8007864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007866:	2b00      	cmp	r3, #0
 8007868:	dd08      	ble.n	800787c <_dtoa_r+0x764>
 800786a:	42bb      	cmp	r3, r7
 800786c:	bfa8      	it	ge
 800786e:	463b      	movge	r3, r7
 8007870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007872:	eba9 0903 	sub.w	r9, r9, r3
 8007876:	1aff      	subs	r7, r7, r3
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	9309      	str	r3, [sp, #36]	; 0x24
 800787c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800787e:	b1f3      	cbz	r3, 80078be <_dtoa_r+0x7a6>
 8007880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 80a0 	beq.w	80079c8 <_dtoa_r+0x8b0>
 8007888:	2c00      	cmp	r4, #0
 800788a:	dd10      	ble.n	80078ae <_dtoa_r+0x796>
 800788c:	4631      	mov	r1, r6
 800788e:	4622      	mov	r2, r4
 8007890:	4628      	mov	r0, r5
 8007892:	f000 fcd5 	bl	8008240 <__pow5mult>
 8007896:	4652      	mov	r2, sl
 8007898:	4601      	mov	r1, r0
 800789a:	4606      	mov	r6, r0
 800789c:	4628      	mov	r0, r5
 800789e:	f000 fc27 	bl	80080f0 <__multiply>
 80078a2:	4680      	mov	r8, r0
 80078a4:	4651      	mov	r1, sl
 80078a6:	4628      	mov	r0, r5
 80078a8:	f000 fb56 	bl	8007f58 <_Bfree>
 80078ac:	46c2      	mov	sl, r8
 80078ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b0:	1b1a      	subs	r2, r3, r4
 80078b2:	d004      	beq.n	80078be <_dtoa_r+0x7a6>
 80078b4:	4651      	mov	r1, sl
 80078b6:	4628      	mov	r0, r5
 80078b8:	f000 fcc2 	bl	8008240 <__pow5mult>
 80078bc:	4682      	mov	sl, r0
 80078be:	2101      	movs	r1, #1
 80078c0:	4628      	mov	r0, r5
 80078c2:	f000 fbff 	bl	80080c4 <__i2b>
 80078c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078c8:	4604      	mov	r4, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f340 8082 	ble.w	80079d4 <_dtoa_r+0x8bc>
 80078d0:	461a      	mov	r2, r3
 80078d2:	4601      	mov	r1, r0
 80078d4:	4628      	mov	r0, r5
 80078d6:	f000 fcb3 	bl	8008240 <__pow5mult>
 80078da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078dc:	4604      	mov	r4, r0
 80078de:	2b01      	cmp	r3, #1
 80078e0:	dd7b      	ble.n	80079da <_dtoa_r+0x8c2>
 80078e2:	f04f 0800 	mov.w	r8, #0
 80078e6:	6923      	ldr	r3, [r4, #16]
 80078e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80078ec:	6918      	ldr	r0, [r3, #16]
 80078ee:	f000 fb9b 	bl	8008028 <__hi0bits>
 80078f2:	f1c0 0020 	rsb	r0, r0, #32
 80078f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f8:	4418      	add	r0, r3
 80078fa:	f010 001f 	ands.w	r0, r0, #31
 80078fe:	f000 8092 	beq.w	8007a26 <_dtoa_r+0x90e>
 8007902:	f1c0 0320 	rsb	r3, r0, #32
 8007906:	2b04      	cmp	r3, #4
 8007908:	f340 8085 	ble.w	8007a16 <_dtoa_r+0x8fe>
 800790c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790e:	f1c0 001c 	rsb	r0, r0, #28
 8007912:	4403      	add	r3, r0
 8007914:	4481      	add	r9, r0
 8007916:	4407      	add	r7, r0
 8007918:	9309      	str	r3, [sp, #36]	; 0x24
 800791a:	f1b9 0f00 	cmp.w	r9, #0
 800791e:	dd05      	ble.n	800792c <_dtoa_r+0x814>
 8007920:	4651      	mov	r1, sl
 8007922:	464a      	mov	r2, r9
 8007924:	4628      	mov	r0, r5
 8007926:	f000 fce5 	bl	80082f4 <__lshift>
 800792a:	4682      	mov	sl, r0
 800792c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800792e:	2b00      	cmp	r3, #0
 8007930:	dd05      	ble.n	800793e <_dtoa_r+0x826>
 8007932:	4621      	mov	r1, r4
 8007934:	461a      	mov	r2, r3
 8007936:	4628      	mov	r0, r5
 8007938:	f000 fcdc 	bl	80082f4 <__lshift>
 800793c:	4604      	mov	r4, r0
 800793e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007940:	2b00      	cmp	r3, #0
 8007942:	d072      	beq.n	8007a2a <_dtoa_r+0x912>
 8007944:	4621      	mov	r1, r4
 8007946:	4650      	mov	r0, sl
 8007948:	f000 fd40 	bl	80083cc <__mcmp>
 800794c:	2800      	cmp	r0, #0
 800794e:	da6c      	bge.n	8007a2a <_dtoa_r+0x912>
 8007950:	2300      	movs	r3, #0
 8007952:	4651      	mov	r1, sl
 8007954:	220a      	movs	r2, #10
 8007956:	4628      	mov	r0, r5
 8007958:	f000 fb20 	bl	8007f9c <__multadd>
 800795c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800795e:	4682      	mov	sl, r0
 8007960:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 81ac 	beq.w	8007cc2 <_dtoa_r+0xbaa>
 800796a:	2300      	movs	r3, #0
 800796c:	4631      	mov	r1, r6
 800796e:	220a      	movs	r2, #10
 8007970:	4628      	mov	r0, r5
 8007972:	f000 fb13 	bl	8007f9c <__multadd>
 8007976:	9b06      	ldr	r3, [sp, #24]
 8007978:	4606      	mov	r6, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	f300 8093 	bgt.w	8007aa6 <_dtoa_r+0x98e>
 8007980:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007982:	2b02      	cmp	r3, #2
 8007984:	dc59      	bgt.n	8007a3a <_dtoa_r+0x922>
 8007986:	e08e      	b.n	8007aa6 <_dtoa_r+0x98e>
 8007988:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800798a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800798e:	e75d      	b.n	800784c <_dtoa_r+0x734>
 8007990:	9b08      	ldr	r3, [sp, #32]
 8007992:	1e5c      	subs	r4, r3, #1
 8007994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007996:	42a3      	cmp	r3, r4
 8007998:	bfbf      	itttt	lt
 800799a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800799c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800799e:	1ae3      	sublt	r3, r4, r3
 80079a0:	18d2      	addlt	r2, r2, r3
 80079a2:	bfa8      	it	ge
 80079a4:	1b1c      	subge	r4, r3, r4
 80079a6:	9b08      	ldr	r3, [sp, #32]
 80079a8:	bfbe      	ittt	lt
 80079aa:	940a      	strlt	r4, [sp, #40]	; 0x28
 80079ac:	920e      	strlt	r2, [sp, #56]	; 0x38
 80079ae:	2400      	movlt	r4, #0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	bfb5      	itete	lt
 80079b4:	eba9 0703 	sublt.w	r7, r9, r3
 80079b8:	464f      	movge	r7, r9
 80079ba:	2300      	movlt	r3, #0
 80079bc:	9b08      	ldrge	r3, [sp, #32]
 80079be:	e747      	b.n	8007850 <_dtoa_r+0x738>
 80079c0:	464f      	mov	r7, r9
 80079c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80079c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80079c6:	e74c      	b.n	8007862 <_dtoa_r+0x74a>
 80079c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079ca:	e773      	b.n	80078b4 <_dtoa_r+0x79c>
 80079cc:	3fe00000 	.word	0x3fe00000
 80079d0:	40240000 	.word	0x40240000
 80079d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	dc18      	bgt.n	8007a0c <_dtoa_r+0x8f4>
 80079da:	9b04      	ldr	r3, [sp, #16]
 80079dc:	b9b3      	cbnz	r3, 8007a0c <_dtoa_r+0x8f4>
 80079de:	9b05      	ldr	r3, [sp, #20]
 80079e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079e4:	b993      	cbnz	r3, 8007a0c <_dtoa_r+0x8f4>
 80079e6:	9b05      	ldr	r3, [sp, #20]
 80079e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079ec:	0d1b      	lsrs	r3, r3, #20
 80079ee:	051b      	lsls	r3, r3, #20
 80079f0:	b17b      	cbz	r3, 8007a12 <_dtoa_r+0x8fa>
 80079f2:	f04f 0801 	mov.w	r8, #1
 80079f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f8:	f109 0901 	add.w	r9, r9, #1
 80079fc:	3301      	adds	r3, #1
 80079fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f47f af6f 	bne.w	80078e6 <_dtoa_r+0x7ce>
 8007a08:	2001      	movs	r0, #1
 8007a0a:	e774      	b.n	80078f6 <_dtoa_r+0x7de>
 8007a0c:	f04f 0800 	mov.w	r8, #0
 8007a10:	e7f6      	b.n	8007a00 <_dtoa_r+0x8e8>
 8007a12:	4698      	mov	r8, r3
 8007a14:	e7f4      	b.n	8007a00 <_dtoa_r+0x8e8>
 8007a16:	d080      	beq.n	800791a <_dtoa_r+0x802>
 8007a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a1a:	331c      	adds	r3, #28
 8007a1c:	441a      	add	r2, r3
 8007a1e:	4499      	add	r9, r3
 8007a20:	441f      	add	r7, r3
 8007a22:	9209      	str	r2, [sp, #36]	; 0x24
 8007a24:	e779      	b.n	800791a <_dtoa_r+0x802>
 8007a26:	4603      	mov	r3, r0
 8007a28:	e7f6      	b.n	8007a18 <_dtoa_r+0x900>
 8007a2a:	9b08      	ldr	r3, [sp, #32]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	dc34      	bgt.n	8007a9a <_dtoa_r+0x982>
 8007a30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	dd31      	ble.n	8007a9a <_dtoa_r+0x982>
 8007a36:	9b08      	ldr	r3, [sp, #32]
 8007a38:	9306      	str	r3, [sp, #24]
 8007a3a:	9b06      	ldr	r3, [sp, #24]
 8007a3c:	b963      	cbnz	r3, 8007a58 <_dtoa_r+0x940>
 8007a3e:	4621      	mov	r1, r4
 8007a40:	2205      	movs	r2, #5
 8007a42:	4628      	mov	r0, r5
 8007a44:	f000 faaa 	bl	8007f9c <__multadd>
 8007a48:	4601      	mov	r1, r0
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	4650      	mov	r0, sl
 8007a4e:	f000 fcbd 	bl	80083cc <__mcmp>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	f73f adbf 	bgt.w	80075d6 <_dtoa_r+0x4be>
 8007a58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a5a:	9f03      	ldr	r7, [sp, #12]
 8007a5c:	ea6f 0b03 	mvn.w	fp, r3
 8007a60:	f04f 0800 	mov.w	r8, #0
 8007a64:	4621      	mov	r1, r4
 8007a66:	4628      	mov	r0, r5
 8007a68:	f000 fa76 	bl	8007f58 <_Bfree>
 8007a6c:	2e00      	cmp	r6, #0
 8007a6e:	f43f aead 	beq.w	80077cc <_dtoa_r+0x6b4>
 8007a72:	f1b8 0f00 	cmp.w	r8, #0
 8007a76:	d005      	beq.n	8007a84 <_dtoa_r+0x96c>
 8007a78:	45b0      	cmp	r8, r6
 8007a7a:	d003      	beq.n	8007a84 <_dtoa_r+0x96c>
 8007a7c:	4641      	mov	r1, r8
 8007a7e:	4628      	mov	r0, r5
 8007a80:	f000 fa6a 	bl	8007f58 <_Bfree>
 8007a84:	4631      	mov	r1, r6
 8007a86:	4628      	mov	r0, r5
 8007a88:	f000 fa66 	bl	8007f58 <_Bfree>
 8007a8c:	e69e      	b.n	80077cc <_dtoa_r+0x6b4>
 8007a8e:	2400      	movs	r4, #0
 8007a90:	4626      	mov	r6, r4
 8007a92:	e7e1      	b.n	8007a58 <_dtoa_r+0x940>
 8007a94:	46c3      	mov	fp, r8
 8007a96:	4626      	mov	r6, r4
 8007a98:	e59d      	b.n	80075d6 <_dtoa_r+0x4be>
 8007a9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 80c8 	beq.w	8007c32 <_dtoa_r+0xb1a>
 8007aa2:	9b08      	ldr	r3, [sp, #32]
 8007aa4:	9306      	str	r3, [sp, #24]
 8007aa6:	2f00      	cmp	r7, #0
 8007aa8:	dd05      	ble.n	8007ab6 <_dtoa_r+0x99e>
 8007aaa:	4631      	mov	r1, r6
 8007aac:	463a      	mov	r2, r7
 8007aae:	4628      	mov	r0, r5
 8007ab0:	f000 fc20 	bl	80082f4 <__lshift>
 8007ab4:	4606      	mov	r6, r0
 8007ab6:	f1b8 0f00 	cmp.w	r8, #0
 8007aba:	d05b      	beq.n	8007b74 <_dtoa_r+0xa5c>
 8007abc:	4628      	mov	r0, r5
 8007abe:	6871      	ldr	r1, [r6, #4]
 8007ac0:	f000 fa0a 	bl	8007ed8 <_Balloc>
 8007ac4:	4607      	mov	r7, r0
 8007ac6:	b928      	cbnz	r0, 8007ad4 <_dtoa_r+0x9bc>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007ace:	4b81      	ldr	r3, [pc, #516]	; (8007cd4 <_dtoa_r+0xbbc>)
 8007ad0:	f7ff bb36 	b.w	8007140 <_dtoa_r+0x28>
 8007ad4:	6932      	ldr	r2, [r6, #16]
 8007ad6:	f106 010c 	add.w	r1, r6, #12
 8007ada:	3202      	adds	r2, #2
 8007adc:	0092      	lsls	r2, r2, #2
 8007ade:	300c      	adds	r0, #12
 8007ae0:	f000 ffb0 	bl	8008a44 <memcpy>
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	4639      	mov	r1, r7
 8007ae8:	4628      	mov	r0, r5
 8007aea:	f000 fc03 	bl	80082f4 <__lshift>
 8007aee:	46b0      	mov	r8, r6
 8007af0:	4606      	mov	r6, r0
 8007af2:	9b03      	ldr	r3, [sp, #12]
 8007af4:	9a03      	ldr	r2, [sp, #12]
 8007af6:	3301      	adds	r3, #1
 8007af8:	9308      	str	r3, [sp, #32]
 8007afa:	9b06      	ldr	r3, [sp, #24]
 8007afc:	4413      	add	r3, r2
 8007afe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b00:	9b04      	ldr	r3, [sp, #16]
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	930a      	str	r3, [sp, #40]	; 0x28
 8007b08:	9b08      	ldr	r3, [sp, #32]
 8007b0a:	4621      	mov	r1, r4
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	4650      	mov	r0, sl
 8007b10:	9304      	str	r3, [sp, #16]
 8007b12:	f7ff fa75 	bl	8007000 <quorem>
 8007b16:	4641      	mov	r1, r8
 8007b18:	9006      	str	r0, [sp, #24]
 8007b1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007b1e:	4650      	mov	r0, sl
 8007b20:	f000 fc54 	bl	80083cc <__mcmp>
 8007b24:	4632      	mov	r2, r6
 8007b26:	9009      	str	r0, [sp, #36]	; 0x24
 8007b28:	4621      	mov	r1, r4
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f000 fc6a 	bl	8008404 <__mdiff>
 8007b30:	68c2      	ldr	r2, [r0, #12]
 8007b32:	4607      	mov	r7, r0
 8007b34:	bb02      	cbnz	r2, 8007b78 <_dtoa_r+0xa60>
 8007b36:	4601      	mov	r1, r0
 8007b38:	4650      	mov	r0, sl
 8007b3a:	f000 fc47 	bl	80083cc <__mcmp>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	4639      	mov	r1, r7
 8007b42:	4628      	mov	r0, r5
 8007b44:	920c      	str	r2, [sp, #48]	; 0x30
 8007b46:	f000 fa07 	bl	8007f58 <_Bfree>
 8007b4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b4e:	9f08      	ldr	r7, [sp, #32]
 8007b50:	ea43 0102 	orr.w	r1, r3, r2
 8007b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b56:	4319      	orrs	r1, r3
 8007b58:	d110      	bne.n	8007b7c <_dtoa_r+0xa64>
 8007b5a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b5e:	d029      	beq.n	8007bb4 <_dtoa_r+0xa9c>
 8007b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	dd02      	ble.n	8007b6c <_dtoa_r+0xa54>
 8007b66:	9b06      	ldr	r3, [sp, #24]
 8007b68:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007b6c:	9b04      	ldr	r3, [sp, #16]
 8007b6e:	f883 9000 	strb.w	r9, [r3]
 8007b72:	e777      	b.n	8007a64 <_dtoa_r+0x94c>
 8007b74:	4630      	mov	r0, r6
 8007b76:	e7ba      	b.n	8007aee <_dtoa_r+0x9d6>
 8007b78:	2201      	movs	r2, #1
 8007b7a:	e7e1      	b.n	8007b40 <_dtoa_r+0xa28>
 8007b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	db04      	blt.n	8007b8c <_dtoa_r+0xa74>
 8007b82:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007b84:	430b      	orrs	r3, r1
 8007b86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b88:	430b      	orrs	r3, r1
 8007b8a:	d120      	bne.n	8007bce <_dtoa_r+0xab6>
 8007b8c:	2a00      	cmp	r2, #0
 8007b8e:	dded      	ble.n	8007b6c <_dtoa_r+0xa54>
 8007b90:	4651      	mov	r1, sl
 8007b92:	2201      	movs	r2, #1
 8007b94:	4628      	mov	r0, r5
 8007b96:	f000 fbad 	bl	80082f4 <__lshift>
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	4682      	mov	sl, r0
 8007b9e:	f000 fc15 	bl	80083cc <__mcmp>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	dc03      	bgt.n	8007bae <_dtoa_r+0xa96>
 8007ba6:	d1e1      	bne.n	8007b6c <_dtoa_r+0xa54>
 8007ba8:	f019 0f01 	tst.w	r9, #1
 8007bac:	d0de      	beq.n	8007b6c <_dtoa_r+0xa54>
 8007bae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007bb2:	d1d8      	bne.n	8007b66 <_dtoa_r+0xa4e>
 8007bb4:	2339      	movs	r3, #57	; 0x39
 8007bb6:	9a04      	ldr	r2, [sp, #16]
 8007bb8:	7013      	strb	r3, [r2, #0]
 8007bba:	463b      	mov	r3, r7
 8007bbc:	461f      	mov	r7, r3
 8007bbe:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	2a39      	cmp	r2, #57	; 0x39
 8007bc6:	d06b      	beq.n	8007ca0 <_dtoa_r+0xb88>
 8007bc8:	3201      	adds	r2, #1
 8007bca:	701a      	strb	r2, [r3, #0]
 8007bcc:	e74a      	b.n	8007a64 <_dtoa_r+0x94c>
 8007bce:	2a00      	cmp	r2, #0
 8007bd0:	dd07      	ble.n	8007be2 <_dtoa_r+0xaca>
 8007bd2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007bd6:	d0ed      	beq.n	8007bb4 <_dtoa_r+0xa9c>
 8007bd8:	9a04      	ldr	r2, [sp, #16]
 8007bda:	f109 0301 	add.w	r3, r9, #1
 8007bde:	7013      	strb	r3, [r2, #0]
 8007be0:	e740      	b.n	8007a64 <_dtoa_r+0x94c>
 8007be2:	9b08      	ldr	r3, [sp, #32]
 8007be4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007be6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d042      	beq.n	8007c74 <_dtoa_r+0xb5c>
 8007bee:	4651      	mov	r1, sl
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	220a      	movs	r2, #10
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	f000 f9d1 	bl	8007f9c <__multadd>
 8007bfa:	45b0      	cmp	r8, r6
 8007bfc:	4682      	mov	sl, r0
 8007bfe:	f04f 0300 	mov.w	r3, #0
 8007c02:	f04f 020a 	mov.w	r2, #10
 8007c06:	4641      	mov	r1, r8
 8007c08:	4628      	mov	r0, r5
 8007c0a:	d107      	bne.n	8007c1c <_dtoa_r+0xb04>
 8007c0c:	f000 f9c6 	bl	8007f9c <__multadd>
 8007c10:	4680      	mov	r8, r0
 8007c12:	4606      	mov	r6, r0
 8007c14:	9b08      	ldr	r3, [sp, #32]
 8007c16:	3301      	adds	r3, #1
 8007c18:	9308      	str	r3, [sp, #32]
 8007c1a:	e775      	b.n	8007b08 <_dtoa_r+0x9f0>
 8007c1c:	f000 f9be 	bl	8007f9c <__multadd>
 8007c20:	4631      	mov	r1, r6
 8007c22:	4680      	mov	r8, r0
 8007c24:	2300      	movs	r3, #0
 8007c26:	220a      	movs	r2, #10
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f000 f9b7 	bl	8007f9c <__multadd>
 8007c2e:	4606      	mov	r6, r0
 8007c30:	e7f0      	b.n	8007c14 <_dtoa_r+0xafc>
 8007c32:	9b08      	ldr	r3, [sp, #32]
 8007c34:	9306      	str	r3, [sp, #24]
 8007c36:	9f03      	ldr	r7, [sp, #12]
 8007c38:	4621      	mov	r1, r4
 8007c3a:	4650      	mov	r0, sl
 8007c3c:	f7ff f9e0 	bl	8007000 <quorem>
 8007c40:	9b03      	ldr	r3, [sp, #12]
 8007c42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007c46:	f807 9b01 	strb.w	r9, [r7], #1
 8007c4a:	1afa      	subs	r2, r7, r3
 8007c4c:	9b06      	ldr	r3, [sp, #24]
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	dd07      	ble.n	8007c62 <_dtoa_r+0xb4a>
 8007c52:	4651      	mov	r1, sl
 8007c54:	2300      	movs	r3, #0
 8007c56:	220a      	movs	r2, #10
 8007c58:	4628      	mov	r0, r5
 8007c5a:	f000 f99f 	bl	8007f9c <__multadd>
 8007c5e:	4682      	mov	sl, r0
 8007c60:	e7ea      	b.n	8007c38 <_dtoa_r+0xb20>
 8007c62:	9b06      	ldr	r3, [sp, #24]
 8007c64:	f04f 0800 	mov.w	r8, #0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	bfcc      	ite	gt
 8007c6c:	461f      	movgt	r7, r3
 8007c6e:	2701      	movle	r7, #1
 8007c70:	9b03      	ldr	r3, [sp, #12]
 8007c72:	441f      	add	r7, r3
 8007c74:	4651      	mov	r1, sl
 8007c76:	2201      	movs	r2, #1
 8007c78:	4628      	mov	r0, r5
 8007c7a:	f000 fb3b 	bl	80082f4 <__lshift>
 8007c7e:	4621      	mov	r1, r4
 8007c80:	4682      	mov	sl, r0
 8007c82:	f000 fba3 	bl	80083cc <__mcmp>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	dc97      	bgt.n	8007bba <_dtoa_r+0xaa2>
 8007c8a:	d102      	bne.n	8007c92 <_dtoa_r+0xb7a>
 8007c8c:	f019 0f01 	tst.w	r9, #1
 8007c90:	d193      	bne.n	8007bba <_dtoa_r+0xaa2>
 8007c92:	463b      	mov	r3, r7
 8007c94:	461f      	mov	r7, r3
 8007c96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c9a:	2a30      	cmp	r2, #48	; 0x30
 8007c9c:	d0fa      	beq.n	8007c94 <_dtoa_r+0xb7c>
 8007c9e:	e6e1      	b.n	8007a64 <_dtoa_r+0x94c>
 8007ca0:	9a03      	ldr	r2, [sp, #12]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d18a      	bne.n	8007bbc <_dtoa_r+0xaa4>
 8007ca6:	2331      	movs	r3, #49	; 0x31
 8007ca8:	f10b 0b01 	add.w	fp, fp, #1
 8007cac:	e797      	b.n	8007bde <_dtoa_r+0xac6>
 8007cae:	4b0a      	ldr	r3, [pc, #40]	; (8007cd8 <_dtoa_r+0xbc0>)
 8007cb0:	f7ff ba9f 	b.w	80071f2 <_dtoa_r+0xda>
 8007cb4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f47f aa77 	bne.w	80071aa <_dtoa_r+0x92>
 8007cbc:	4b07      	ldr	r3, [pc, #28]	; (8007cdc <_dtoa_r+0xbc4>)
 8007cbe:	f7ff ba98 	b.w	80071f2 <_dtoa_r+0xda>
 8007cc2:	9b06      	ldr	r3, [sp, #24]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	dcb6      	bgt.n	8007c36 <_dtoa_r+0xb1e>
 8007cc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	f73f aeb5 	bgt.w	8007a3a <_dtoa_r+0x922>
 8007cd0:	e7b1      	b.n	8007c36 <_dtoa_r+0xb1e>
 8007cd2:	bf00      	nop
 8007cd4:	080097c6 	.word	0x080097c6
 8007cd8:	08009690 	.word	0x08009690
 8007cdc:	08009761 	.word	0x08009761

08007ce0 <_free_r>:
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	2900      	cmp	r1, #0
 8007ce6:	d040      	beq.n	8007d6a <_free_r+0x8a>
 8007ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cec:	1f0c      	subs	r4, r1, #4
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	bfb8      	it	lt
 8007cf2:	18e4      	addlt	r4, r4, r3
 8007cf4:	f000 f8e4 	bl	8007ec0 <__malloc_lock>
 8007cf8:	4a1c      	ldr	r2, [pc, #112]	; (8007d6c <_free_r+0x8c>)
 8007cfa:	6813      	ldr	r3, [r2, #0]
 8007cfc:	b933      	cbnz	r3, 8007d0c <_free_r+0x2c>
 8007cfe:	6063      	str	r3, [r4, #4]
 8007d00:	6014      	str	r4, [r2, #0]
 8007d02:	4628      	mov	r0, r5
 8007d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d08:	f000 b8e0 	b.w	8007ecc <__malloc_unlock>
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	d908      	bls.n	8007d22 <_free_r+0x42>
 8007d10:	6820      	ldr	r0, [r4, #0]
 8007d12:	1821      	adds	r1, r4, r0
 8007d14:	428b      	cmp	r3, r1
 8007d16:	bf01      	itttt	eq
 8007d18:	6819      	ldreq	r1, [r3, #0]
 8007d1a:	685b      	ldreq	r3, [r3, #4]
 8007d1c:	1809      	addeq	r1, r1, r0
 8007d1e:	6021      	streq	r1, [r4, #0]
 8007d20:	e7ed      	b.n	8007cfe <_free_r+0x1e>
 8007d22:	461a      	mov	r2, r3
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	b10b      	cbz	r3, 8007d2c <_free_r+0x4c>
 8007d28:	42a3      	cmp	r3, r4
 8007d2a:	d9fa      	bls.n	8007d22 <_free_r+0x42>
 8007d2c:	6811      	ldr	r1, [r2, #0]
 8007d2e:	1850      	adds	r0, r2, r1
 8007d30:	42a0      	cmp	r0, r4
 8007d32:	d10b      	bne.n	8007d4c <_free_r+0x6c>
 8007d34:	6820      	ldr	r0, [r4, #0]
 8007d36:	4401      	add	r1, r0
 8007d38:	1850      	adds	r0, r2, r1
 8007d3a:	4283      	cmp	r3, r0
 8007d3c:	6011      	str	r1, [r2, #0]
 8007d3e:	d1e0      	bne.n	8007d02 <_free_r+0x22>
 8007d40:	6818      	ldr	r0, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	4408      	add	r0, r1
 8007d46:	6010      	str	r0, [r2, #0]
 8007d48:	6053      	str	r3, [r2, #4]
 8007d4a:	e7da      	b.n	8007d02 <_free_r+0x22>
 8007d4c:	d902      	bls.n	8007d54 <_free_r+0x74>
 8007d4e:	230c      	movs	r3, #12
 8007d50:	602b      	str	r3, [r5, #0]
 8007d52:	e7d6      	b.n	8007d02 <_free_r+0x22>
 8007d54:	6820      	ldr	r0, [r4, #0]
 8007d56:	1821      	adds	r1, r4, r0
 8007d58:	428b      	cmp	r3, r1
 8007d5a:	bf01      	itttt	eq
 8007d5c:	6819      	ldreq	r1, [r3, #0]
 8007d5e:	685b      	ldreq	r3, [r3, #4]
 8007d60:	1809      	addeq	r1, r1, r0
 8007d62:	6021      	streq	r1, [r4, #0]
 8007d64:	6063      	str	r3, [r4, #4]
 8007d66:	6054      	str	r4, [r2, #4]
 8007d68:	e7cb      	b.n	8007d02 <_free_r+0x22>
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	2000057c 	.word	0x2000057c

08007d70 <malloc>:
 8007d70:	4b02      	ldr	r3, [pc, #8]	; (8007d7c <malloc+0xc>)
 8007d72:	4601      	mov	r1, r0
 8007d74:	6818      	ldr	r0, [r3, #0]
 8007d76:	f000 b823 	b.w	8007dc0 <_malloc_r>
 8007d7a:	bf00      	nop
 8007d7c:	20000064 	.word	0x20000064

08007d80 <sbrk_aligned>:
 8007d80:	b570      	push	{r4, r5, r6, lr}
 8007d82:	4e0e      	ldr	r6, [pc, #56]	; (8007dbc <sbrk_aligned+0x3c>)
 8007d84:	460c      	mov	r4, r1
 8007d86:	6831      	ldr	r1, [r6, #0]
 8007d88:	4605      	mov	r5, r0
 8007d8a:	b911      	cbnz	r1, 8007d92 <sbrk_aligned+0x12>
 8007d8c:	f000 fe4a 	bl	8008a24 <_sbrk_r>
 8007d90:	6030      	str	r0, [r6, #0]
 8007d92:	4621      	mov	r1, r4
 8007d94:	4628      	mov	r0, r5
 8007d96:	f000 fe45 	bl	8008a24 <_sbrk_r>
 8007d9a:	1c43      	adds	r3, r0, #1
 8007d9c:	d00a      	beq.n	8007db4 <sbrk_aligned+0x34>
 8007d9e:	1cc4      	adds	r4, r0, #3
 8007da0:	f024 0403 	bic.w	r4, r4, #3
 8007da4:	42a0      	cmp	r0, r4
 8007da6:	d007      	beq.n	8007db8 <sbrk_aligned+0x38>
 8007da8:	1a21      	subs	r1, r4, r0
 8007daa:	4628      	mov	r0, r5
 8007dac:	f000 fe3a 	bl	8008a24 <_sbrk_r>
 8007db0:	3001      	adds	r0, #1
 8007db2:	d101      	bne.n	8007db8 <sbrk_aligned+0x38>
 8007db4:	f04f 34ff 	mov.w	r4, #4294967295
 8007db8:	4620      	mov	r0, r4
 8007dba:	bd70      	pop	{r4, r5, r6, pc}
 8007dbc:	20000580 	.word	0x20000580

08007dc0 <_malloc_r>:
 8007dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dc4:	1ccd      	adds	r5, r1, #3
 8007dc6:	f025 0503 	bic.w	r5, r5, #3
 8007dca:	3508      	adds	r5, #8
 8007dcc:	2d0c      	cmp	r5, #12
 8007dce:	bf38      	it	cc
 8007dd0:	250c      	movcc	r5, #12
 8007dd2:	2d00      	cmp	r5, #0
 8007dd4:	4607      	mov	r7, r0
 8007dd6:	db01      	blt.n	8007ddc <_malloc_r+0x1c>
 8007dd8:	42a9      	cmp	r1, r5
 8007dda:	d905      	bls.n	8007de8 <_malloc_r+0x28>
 8007ddc:	230c      	movs	r3, #12
 8007dde:	2600      	movs	r6, #0
 8007de0:	603b      	str	r3, [r7, #0]
 8007de2:	4630      	mov	r0, r6
 8007de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007de8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ebc <_malloc_r+0xfc>
 8007dec:	f000 f868 	bl	8007ec0 <__malloc_lock>
 8007df0:	f8d8 3000 	ldr.w	r3, [r8]
 8007df4:	461c      	mov	r4, r3
 8007df6:	bb5c      	cbnz	r4, 8007e50 <_malloc_r+0x90>
 8007df8:	4629      	mov	r1, r5
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	f7ff ffc0 	bl	8007d80 <sbrk_aligned>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	4604      	mov	r4, r0
 8007e04:	d155      	bne.n	8007eb2 <_malloc_r+0xf2>
 8007e06:	f8d8 4000 	ldr.w	r4, [r8]
 8007e0a:	4626      	mov	r6, r4
 8007e0c:	2e00      	cmp	r6, #0
 8007e0e:	d145      	bne.n	8007e9c <_malloc_r+0xdc>
 8007e10:	2c00      	cmp	r4, #0
 8007e12:	d048      	beq.n	8007ea6 <_malloc_r+0xe6>
 8007e14:	6823      	ldr	r3, [r4, #0]
 8007e16:	4631      	mov	r1, r6
 8007e18:	4638      	mov	r0, r7
 8007e1a:	eb04 0903 	add.w	r9, r4, r3
 8007e1e:	f000 fe01 	bl	8008a24 <_sbrk_r>
 8007e22:	4581      	cmp	r9, r0
 8007e24:	d13f      	bne.n	8007ea6 <_malloc_r+0xe6>
 8007e26:	6821      	ldr	r1, [r4, #0]
 8007e28:	4638      	mov	r0, r7
 8007e2a:	1a6d      	subs	r5, r5, r1
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	f7ff ffa7 	bl	8007d80 <sbrk_aligned>
 8007e32:	3001      	adds	r0, #1
 8007e34:	d037      	beq.n	8007ea6 <_malloc_r+0xe6>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	442b      	add	r3, r5
 8007e3a:	6023      	str	r3, [r4, #0]
 8007e3c:	f8d8 3000 	ldr.w	r3, [r8]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d038      	beq.n	8007eb6 <_malloc_r+0xf6>
 8007e44:	685a      	ldr	r2, [r3, #4]
 8007e46:	42a2      	cmp	r2, r4
 8007e48:	d12b      	bne.n	8007ea2 <_malloc_r+0xe2>
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	605a      	str	r2, [r3, #4]
 8007e4e:	e00f      	b.n	8007e70 <_malloc_r+0xb0>
 8007e50:	6822      	ldr	r2, [r4, #0]
 8007e52:	1b52      	subs	r2, r2, r5
 8007e54:	d41f      	bmi.n	8007e96 <_malloc_r+0xd6>
 8007e56:	2a0b      	cmp	r2, #11
 8007e58:	d917      	bls.n	8007e8a <_malloc_r+0xca>
 8007e5a:	1961      	adds	r1, r4, r5
 8007e5c:	42a3      	cmp	r3, r4
 8007e5e:	6025      	str	r5, [r4, #0]
 8007e60:	bf18      	it	ne
 8007e62:	6059      	strne	r1, [r3, #4]
 8007e64:	6863      	ldr	r3, [r4, #4]
 8007e66:	bf08      	it	eq
 8007e68:	f8c8 1000 	streq.w	r1, [r8]
 8007e6c:	5162      	str	r2, [r4, r5]
 8007e6e:	604b      	str	r3, [r1, #4]
 8007e70:	4638      	mov	r0, r7
 8007e72:	f104 060b 	add.w	r6, r4, #11
 8007e76:	f000 f829 	bl	8007ecc <__malloc_unlock>
 8007e7a:	f026 0607 	bic.w	r6, r6, #7
 8007e7e:	1d23      	adds	r3, r4, #4
 8007e80:	1af2      	subs	r2, r6, r3
 8007e82:	d0ae      	beq.n	8007de2 <_malloc_r+0x22>
 8007e84:	1b9b      	subs	r3, r3, r6
 8007e86:	50a3      	str	r3, [r4, r2]
 8007e88:	e7ab      	b.n	8007de2 <_malloc_r+0x22>
 8007e8a:	42a3      	cmp	r3, r4
 8007e8c:	6862      	ldr	r2, [r4, #4]
 8007e8e:	d1dd      	bne.n	8007e4c <_malloc_r+0x8c>
 8007e90:	f8c8 2000 	str.w	r2, [r8]
 8007e94:	e7ec      	b.n	8007e70 <_malloc_r+0xb0>
 8007e96:	4623      	mov	r3, r4
 8007e98:	6864      	ldr	r4, [r4, #4]
 8007e9a:	e7ac      	b.n	8007df6 <_malloc_r+0x36>
 8007e9c:	4634      	mov	r4, r6
 8007e9e:	6876      	ldr	r6, [r6, #4]
 8007ea0:	e7b4      	b.n	8007e0c <_malloc_r+0x4c>
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	e7cc      	b.n	8007e40 <_malloc_r+0x80>
 8007ea6:	230c      	movs	r3, #12
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	603b      	str	r3, [r7, #0]
 8007eac:	f000 f80e 	bl	8007ecc <__malloc_unlock>
 8007eb0:	e797      	b.n	8007de2 <_malloc_r+0x22>
 8007eb2:	6025      	str	r5, [r4, #0]
 8007eb4:	e7dc      	b.n	8007e70 <_malloc_r+0xb0>
 8007eb6:	605b      	str	r3, [r3, #4]
 8007eb8:	deff      	udf	#255	; 0xff
 8007eba:	bf00      	nop
 8007ebc:	2000057c 	.word	0x2000057c

08007ec0 <__malloc_lock>:
 8007ec0:	4801      	ldr	r0, [pc, #4]	; (8007ec8 <__malloc_lock+0x8>)
 8007ec2:	f7ff b86e 	b.w	8006fa2 <__retarget_lock_acquire_recursive>
 8007ec6:	bf00      	nop
 8007ec8:	20000578 	.word	0x20000578

08007ecc <__malloc_unlock>:
 8007ecc:	4801      	ldr	r0, [pc, #4]	; (8007ed4 <__malloc_unlock+0x8>)
 8007ece:	f7ff b869 	b.w	8006fa4 <__retarget_lock_release_recursive>
 8007ed2:	bf00      	nop
 8007ed4:	20000578 	.word	0x20000578

08007ed8 <_Balloc>:
 8007ed8:	b570      	push	{r4, r5, r6, lr}
 8007eda:	69c6      	ldr	r6, [r0, #28]
 8007edc:	4604      	mov	r4, r0
 8007ede:	460d      	mov	r5, r1
 8007ee0:	b976      	cbnz	r6, 8007f00 <_Balloc+0x28>
 8007ee2:	2010      	movs	r0, #16
 8007ee4:	f7ff ff44 	bl	8007d70 <malloc>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	61e0      	str	r0, [r4, #28]
 8007eec:	b920      	cbnz	r0, 8007ef8 <_Balloc+0x20>
 8007eee:	216b      	movs	r1, #107	; 0x6b
 8007ef0:	4b17      	ldr	r3, [pc, #92]	; (8007f50 <_Balloc+0x78>)
 8007ef2:	4818      	ldr	r0, [pc, #96]	; (8007f54 <_Balloc+0x7c>)
 8007ef4:	f7ff f866 	bl	8006fc4 <__assert_func>
 8007ef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007efc:	6006      	str	r6, [r0, #0]
 8007efe:	60c6      	str	r6, [r0, #12]
 8007f00:	69e6      	ldr	r6, [r4, #28]
 8007f02:	68f3      	ldr	r3, [r6, #12]
 8007f04:	b183      	cbz	r3, 8007f28 <_Balloc+0x50>
 8007f06:	69e3      	ldr	r3, [r4, #28]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f0e:	b9b8      	cbnz	r0, 8007f40 <_Balloc+0x68>
 8007f10:	2101      	movs	r1, #1
 8007f12:	fa01 f605 	lsl.w	r6, r1, r5
 8007f16:	1d72      	adds	r2, r6, #5
 8007f18:	4620      	mov	r0, r4
 8007f1a:	0092      	lsls	r2, r2, #2
 8007f1c:	f000 fda7 	bl	8008a6e <_calloc_r>
 8007f20:	b160      	cbz	r0, 8007f3c <_Balloc+0x64>
 8007f22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f26:	e00e      	b.n	8007f46 <_Balloc+0x6e>
 8007f28:	2221      	movs	r2, #33	; 0x21
 8007f2a:	2104      	movs	r1, #4
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	f000 fd9e 	bl	8008a6e <_calloc_r>
 8007f32:	69e3      	ldr	r3, [r4, #28]
 8007f34:	60f0      	str	r0, [r6, #12]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1e4      	bne.n	8007f06 <_Balloc+0x2e>
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	bd70      	pop	{r4, r5, r6, pc}
 8007f40:	6802      	ldr	r2, [r0, #0]
 8007f42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f46:	2300      	movs	r3, #0
 8007f48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f4c:	e7f7      	b.n	8007f3e <_Balloc+0x66>
 8007f4e:	bf00      	nop
 8007f50:	080096b4 	.word	0x080096b4
 8007f54:	080097d7 	.word	0x080097d7

08007f58 <_Bfree>:
 8007f58:	b570      	push	{r4, r5, r6, lr}
 8007f5a:	69c6      	ldr	r6, [r0, #28]
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	460c      	mov	r4, r1
 8007f60:	b976      	cbnz	r6, 8007f80 <_Bfree+0x28>
 8007f62:	2010      	movs	r0, #16
 8007f64:	f7ff ff04 	bl	8007d70 <malloc>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	61e8      	str	r0, [r5, #28]
 8007f6c:	b920      	cbnz	r0, 8007f78 <_Bfree+0x20>
 8007f6e:	218f      	movs	r1, #143	; 0x8f
 8007f70:	4b08      	ldr	r3, [pc, #32]	; (8007f94 <_Bfree+0x3c>)
 8007f72:	4809      	ldr	r0, [pc, #36]	; (8007f98 <_Bfree+0x40>)
 8007f74:	f7ff f826 	bl	8006fc4 <__assert_func>
 8007f78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f7c:	6006      	str	r6, [r0, #0]
 8007f7e:	60c6      	str	r6, [r0, #12]
 8007f80:	b13c      	cbz	r4, 8007f92 <_Bfree+0x3a>
 8007f82:	69eb      	ldr	r3, [r5, #28]
 8007f84:	6862      	ldr	r2, [r4, #4]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f8c:	6021      	str	r1, [r4, #0]
 8007f8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f92:	bd70      	pop	{r4, r5, r6, pc}
 8007f94:	080096b4 	.word	0x080096b4
 8007f98:	080097d7 	.word	0x080097d7

08007f9c <__multadd>:
 8007f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa0:	4607      	mov	r7, r0
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	461e      	mov	r6, r3
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	690d      	ldr	r5, [r1, #16]
 8007faa:	f101 0c14 	add.w	ip, r1, #20
 8007fae:	f8dc 3000 	ldr.w	r3, [ip]
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	b299      	uxth	r1, r3
 8007fb6:	fb02 6101 	mla	r1, r2, r1, r6
 8007fba:	0c1e      	lsrs	r6, r3, #16
 8007fbc:	0c0b      	lsrs	r3, r1, #16
 8007fbe:	fb02 3306 	mla	r3, r2, r6, r3
 8007fc2:	b289      	uxth	r1, r1
 8007fc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007fc8:	4285      	cmp	r5, r0
 8007fca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007fce:	f84c 1b04 	str.w	r1, [ip], #4
 8007fd2:	dcec      	bgt.n	8007fae <__multadd+0x12>
 8007fd4:	b30e      	cbz	r6, 800801a <__multadd+0x7e>
 8007fd6:	68a3      	ldr	r3, [r4, #8]
 8007fd8:	42ab      	cmp	r3, r5
 8007fda:	dc19      	bgt.n	8008010 <__multadd+0x74>
 8007fdc:	6861      	ldr	r1, [r4, #4]
 8007fde:	4638      	mov	r0, r7
 8007fe0:	3101      	adds	r1, #1
 8007fe2:	f7ff ff79 	bl	8007ed8 <_Balloc>
 8007fe6:	4680      	mov	r8, r0
 8007fe8:	b928      	cbnz	r0, 8007ff6 <__multadd+0x5a>
 8007fea:	4602      	mov	r2, r0
 8007fec:	21ba      	movs	r1, #186	; 0xba
 8007fee:	4b0c      	ldr	r3, [pc, #48]	; (8008020 <__multadd+0x84>)
 8007ff0:	480c      	ldr	r0, [pc, #48]	; (8008024 <__multadd+0x88>)
 8007ff2:	f7fe ffe7 	bl	8006fc4 <__assert_func>
 8007ff6:	6922      	ldr	r2, [r4, #16]
 8007ff8:	f104 010c 	add.w	r1, r4, #12
 8007ffc:	3202      	adds	r2, #2
 8007ffe:	0092      	lsls	r2, r2, #2
 8008000:	300c      	adds	r0, #12
 8008002:	f000 fd1f 	bl	8008a44 <memcpy>
 8008006:	4621      	mov	r1, r4
 8008008:	4638      	mov	r0, r7
 800800a:	f7ff ffa5 	bl	8007f58 <_Bfree>
 800800e:	4644      	mov	r4, r8
 8008010:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008014:	3501      	adds	r5, #1
 8008016:	615e      	str	r6, [r3, #20]
 8008018:	6125      	str	r5, [r4, #16]
 800801a:	4620      	mov	r0, r4
 800801c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008020:	080097c6 	.word	0x080097c6
 8008024:	080097d7 	.word	0x080097d7

08008028 <__hi0bits>:
 8008028:	0c02      	lsrs	r2, r0, #16
 800802a:	0412      	lsls	r2, r2, #16
 800802c:	4603      	mov	r3, r0
 800802e:	b9ca      	cbnz	r2, 8008064 <__hi0bits+0x3c>
 8008030:	0403      	lsls	r3, r0, #16
 8008032:	2010      	movs	r0, #16
 8008034:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008038:	bf04      	itt	eq
 800803a:	021b      	lsleq	r3, r3, #8
 800803c:	3008      	addeq	r0, #8
 800803e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008042:	bf04      	itt	eq
 8008044:	011b      	lsleq	r3, r3, #4
 8008046:	3004      	addeq	r0, #4
 8008048:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800804c:	bf04      	itt	eq
 800804e:	009b      	lsleq	r3, r3, #2
 8008050:	3002      	addeq	r0, #2
 8008052:	2b00      	cmp	r3, #0
 8008054:	db05      	blt.n	8008062 <__hi0bits+0x3a>
 8008056:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800805a:	f100 0001 	add.w	r0, r0, #1
 800805e:	bf08      	it	eq
 8008060:	2020      	moveq	r0, #32
 8008062:	4770      	bx	lr
 8008064:	2000      	movs	r0, #0
 8008066:	e7e5      	b.n	8008034 <__hi0bits+0xc>

08008068 <__lo0bits>:
 8008068:	6803      	ldr	r3, [r0, #0]
 800806a:	4602      	mov	r2, r0
 800806c:	f013 0007 	ands.w	r0, r3, #7
 8008070:	d00b      	beq.n	800808a <__lo0bits+0x22>
 8008072:	07d9      	lsls	r1, r3, #31
 8008074:	d421      	bmi.n	80080ba <__lo0bits+0x52>
 8008076:	0798      	lsls	r0, r3, #30
 8008078:	bf49      	itett	mi
 800807a:	085b      	lsrmi	r3, r3, #1
 800807c:	089b      	lsrpl	r3, r3, #2
 800807e:	2001      	movmi	r0, #1
 8008080:	6013      	strmi	r3, [r2, #0]
 8008082:	bf5c      	itt	pl
 8008084:	2002      	movpl	r0, #2
 8008086:	6013      	strpl	r3, [r2, #0]
 8008088:	4770      	bx	lr
 800808a:	b299      	uxth	r1, r3
 800808c:	b909      	cbnz	r1, 8008092 <__lo0bits+0x2a>
 800808e:	2010      	movs	r0, #16
 8008090:	0c1b      	lsrs	r3, r3, #16
 8008092:	b2d9      	uxtb	r1, r3
 8008094:	b909      	cbnz	r1, 800809a <__lo0bits+0x32>
 8008096:	3008      	adds	r0, #8
 8008098:	0a1b      	lsrs	r3, r3, #8
 800809a:	0719      	lsls	r1, r3, #28
 800809c:	bf04      	itt	eq
 800809e:	091b      	lsreq	r3, r3, #4
 80080a0:	3004      	addeq	r0, #4
 80080a2:	0799      	lsls	r1, r3, #30
 80080a4:	bf04      	itt	eq
 80080a6:	089b      	lsreq	r3, r3, #2
 80080a8:	3002      	addeq	r0, #2
 80080aa:	07d9      	lsls	r1, r3, #31
 80080ac:	d403      	bmi.n	80080b6 <__lo0bits+0x4e>
 80080ae:	085b      	lsrs	r3, r3, #1
 80080b0:	f100 0001 	add.w	r0, r0, #1
 80080b4:	d003      	beq.n	80080be <__lo0bits+0x56>
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	4770      	bx	lr
 80080ba:	2000      	movs	r0, #0
 80080bc:	4770      	bx	lr
 80080be:	2020      	movs	r0, #32
 80080c0:	4770      	bx	lr
	...

080080c4 <__i2b>:
 80080c4:	b510      	push	{r4, lr}
 80080c6:	460c      	mov	r4, r1
 80080c8:	2101      	movs	r1, #1
 80080ca:	f7ff ff05 	bl	8007ed8 <_Balloc>
 80080ce:	4602      	mov	r2, r0
 80080d0:	b928      	cbnz	r0, 80080de <__i2b+0x1a>
 80080d2:	f240 1145 	movw	r1, #325	; 0x145
 80080d6:	4b04      	ldr	r3, [pc, #16]	; (80080e8 <__i2b+0x24>)
 80080d8:	4804      	ldr	r0, [pc, #16]	; (80080ec <__i2b+0x28>)
 80080da:	f7fe ff73 	bl	8006fc4 <__assert_func>
 80080de:	2301      	movs	r3, #1
 80080e0:	6144      	str	r4, [r0, #20]
 80080e2:	6103      	str	r3, [r0, #16]
 80080e4:	bd10      	pop	{r4, pc}
 80080e6:	bf00      	nop
 80080e8:	080097c6 	.word	0x080097c6
 80080ec:	080097d7 	.word	0x080097d7

080080f0 <__multiply>:
 80080f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f4:	4691      	mov	r9, r2
 80080f6:	690a      	ldr	r2, [r1, #16]
 80080f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80080fc:	460c      	mov	r4, r1
 80080fe:	429a      	cmp	r2, r3
 8008100:	bfbe      	ittt	lt
 8008102:	460b      	movlt	r3, r1
 8008104:	464c      	movlt	r4, r9
 8008106:	4699      	movlt	r9, r3
 8008108:	6927      	ldr	r7, [r4, #16]
 800810a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800810e:	68a3      	ldr	r3, [r4, #8]
 8008110:	6861      	ldr	r1, [r4, #4]
 8008112:	eb07 060a 	add.w	r6, r7, sl
 8008116:	42b3      	cmp	r3, r6
 8008118:	b085      	sub	sp, #20
 800811a:	bfb8      	it	lt
 800811c:	3101      	addlt	r1, #1
 800811e:	f7ff fedb 	bl	8007ed8 <_Balloc>
 8008122:	b930      	cbnz	r0, 8008132 <__multiply+0x42>
 8008124:	4602      	mov	r2, r0
 8008126:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800812a:	4b43      	ldr	r3, [pc, #268]	; (8008238 <__multiply+0x148>)
 800812c:	4843      	ldr	r0, [pc, #268]	; (800823c <__multiply+0x14c>)
 800812e:	f7fe ff49 	bl	8006fc4 <__assert_func>
 8008132:	f100 0514 	add.w	r5, r0, #20
 8008136:	462b      	mov	r3, r5
 8008138:	2200      	movs	r2, #0
 800813a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800813e:	4543      	cmp	r3, r8
 8008140:	d321      	bcc.n	8008186 <__multiply+0x96>
 8008142:	f104 0314 	add.w	r3, r4, #20
 8008146:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800814a:	f109 0314 	add.w	r3, r9, #20
 800814e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008152:	9202      	str	r2, [sp, #8]
 8008154:	1b3a      	subs	r2, r7, r4
 8008156:	3a15      	subs	r2, #21
 8008158:	f022 0203 	bic.w	r2, r2, #3
 800815c:	3204      	adds	r2, #4
 800815e:	f104 0115 	add.w	r1, r4, #21
 8008162:	428f      	cmp	r7, r1
 8008164:	bf38      	it	cc
 8008166:	2204      	movcc	r2, #4
 8008168:	9201      	str	r2, [sp, #4]
 800816a:	9a02      	ldr	r2, [sp, #8]
 800816c:	9303      	str	r3, [sp, #12]
 800816e:	429a      	cmp	r2, r3
 8008170:	d80c      	bhi.n	800818c <__multiply+0x9c>
 8008172:	2e00      	cmp	r6, #0
 8008174:	dd03      	ble.n	800817e <__multiply+0x8e>
 8008176:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800817a:	2b00      	cmp	r3, #0
 800817c:	d05a      	beq.n	8008234 <__multiply+0x144>
 800817e:	6106      	str	r6, [r0, #16]
 8008180:	b005      	add	sp, #20
 8008182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008186:	f843 2b04 	str.w	r2, [r3], #4
 800818a:	e7d8      	b.n	800813e <__multiply+0x4e>
 800818c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008190:	f1ba 0f00 	cmp.w	sl, #0
 8008194:	d023      	beq.n	80081de <__multiply+0xee>
 8008196:	46a9      	mov	r9, r5
 8008198:	f04f 0c00 	mov.w	ip, #0
 800819c:	f104 0e14 	add.w	lr, r4, #20
 80081a0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80081a4:	f8d9 1000 	ldr.w	r1, [r9]
 80081a8:	fa1f fb82 	uxth.w	fp, r2
 80081ac:	b289      	uxth	r1, r1
 80081ae:	fb0a 110b 	mla	r1, sl, fp, r1
 80081b2:	4461      	add	r1, ip
 80081b4:	f8d9 c000 	ldr.w	ip, [r9]
 80081b8:	0c12      	lsrs	r2, r2, #16
 80081ba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80081be:	fb0a c202 	mla	r2, sl, r2, ip
 80081c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80081c6:	b289      	uxth	r1, r1
 80081c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081cc:	4577      	cmp	r7, lr
 80081ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081d2:	f849 1b04 	str.w	r1, [r9], #4
 80081d6:	d8e3      	bhi.n	80081a0 <__multiply+0xb0>
 80081d8:	9a01      	ldr	r2, [sp, #4]
 80081da:	f845 c002 	str.w	ip, [r5, r2]
 80081de:	9a03      	ldr	r2, [sp, #12]
 80081e0:	3304      	adds	r3, #4
 80081e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80081e6:	f1b9 0f00 	cmp.w	r9, #0
 80081ea:	d021      	beq.n	8008230 <__multiply+0x140>
 80081ec:	46ae      	mov	lr, r5
 80081ee:	f04f 0a00 	mov.w	sl, #0
 80081f2:	6829      	ldr	r1, [r5, #0]
 80081f4:	f104 0c14 	add.w	ip, r4, #20
 80081f8:	f8bc b000 	ldrh.w	fp, [ip]
 80081fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008200:	b289      	uxth	r1, r1
 8008202:	fb09 220b 	mla	r2, r9, fp, r2
 8008206:	4452      	add	r2, sl
 8008208:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800820c:	f84e 1b04 	str.w	r1, [lr], #4
 8008210:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008214:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008218:	f8be 1000 	ldrh.w	r1, [lr]
 800821c:	4567      	cmp	r7, ip
 800821e:	fb09 110a 	mla	r1, r9, sl, r1
 8008222:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008226:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800822a:	d8e5      	bhi.n	80081f8 <__multiply+0x108>
 800822c:	9a01      	ldr	r2, [sp, #4]
 800822e:	50a9      	str	r1, [r5, r2]
 8008230:	3504      	adds	r5, #4
 8008232:	e79a      	b.n	800816a <__multiply+0x7a>
 8008234:	3e01      	subs	r6, #1
 8008236:	e79c      	b.n	8008172 <__multiply+0x82>
 8008238:	080097c6 	.word	0x080097c6
 800823c:	080097d7 	.word	0x080097d7

08008240 <__pow5mult>:
 8008240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008244:	4615      	mov	r5, r2
 8008246:	f012 0203 	ands.w	r2, r2, #3
 800824a:	4606      	mov	r6, r0
 800824c:	460f      	mov	r7, r1
 800824e:	d007      	beq.n	8008260 <__pow5mult+0x20>
 8008250:	4c25      	ldr	r4, [pc, #148]	; (80082e8 <__pow5mult+0xa8>)
 8008252:	3a01      	subs	r2, #1
 8008254:	2300      	movs	r3, #0
 8008256:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800825a:	f7ff fe9f 	bl	8007f9c <__multadd>
 800825e:	4607      	mov	r7, r0
 8008260:	10ad      	asrs	r5, r5, #2
 8008262:	d03d      	beq.n	80082e0 <__pow5mult+0xa0>
 8008264:	69f4      	ldr	r4, [r6, #28]
 8008266:	b97c      	cbnz	r4, 8008288 <__pow5mult+0x48>
 8008268:	2010      	movs	r0, #16
 800826a:	f7ff fd81 	bl	8007d70 <malloc>
 800826e:	4602      	mov	r2, r0
 8008270:	61f0      	str	r0, [r6, #28]
 8008272:	b928      	cbnz	r0, 8008280 <__pow5mult+0x40>
 8008274:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008278:	4b1c      	ldr	r3, [pc, #112]	; (80082ec <__pow5mult+0xac>)
 800827a:	481d      	ldr	r0, [pc, #116]	; (80082f0 <__pow5mult+0xb0>)
 800827c:	f7fe fea2 	bl	8006fc4 <__assert_func>
 8008280:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008284:	6004      	str	r4, [r0, #0]
 8008286:	60c4      	str	r4, [r0, #12]
 8008288:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800828c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008290:	b94c      	cbnz	r4, 80082a6 <__pow5mult+0x66>
 8008292:	f240 2171 	movw	r1, #625	; 0x271
 8008296:	4630      	mov	r0, r6
 8008298:	f7ff ff14 	bl	80080c4 <__i2b>
 800829c:	2300      	movs	r3, #0
 800829e:	4604      	mov	r4, r0
 80082a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80082a4:	6003      	str	r3, [r0, #0]
 80082a6:	f04f 0900 	mov.w	r9, #0
 80082aa:	07eb      	lsls	r3, r5, #31
 80082ac:	d50a      	bpl.n	80082c4 <__pow5mult+0x84>
 80082ae:	4639      	mov	r1, r7
 80082b0:	4622      	mov	r2, r4
 80082b2:	4630      	mov	r0, r6
 80082b4:	f7ff ff1c 	bl	80080f0 <__multiply>
 80082b8:	4680      	mov	r8, r0
 80082ba:	4639      	mov	r1, r7
 80082bc:	4630      	mov	r0, r6
 80082be:	f7ff fe4b 	bl	8007f58 <_Bfree>
 80082c2:	4647      	mov	r7, r8
 80082c4:	106d      	asrs	r5, r5, #1
 80082c6:	d00b      	beq.n	80082e0 <__pow5mult+0xa0>
 80082c8:	6820      	ldr	r0, [r4, #0]
 80082ca:	b938      	cbnz	r0, 80082dc <__pow5mult+0x9c>
 80082cc:	4622      	mov	r2, r4
 80082ce:	4621      	mov	r1, r4
 80082d0:	4630      	mov	r0, r6
 80082d2:	f7ff ff0d 	bl	80080f0 <__multiply>
 80082d6:	6020      	str	r0, [r4, #0]
 80082d8:	f8c0 9000 	str.w	r9, [r0]
 80082dc:	4604      	mov	r4, r0
 80082de:	e7e4      	b.n	80082aa <__pow5mult+0x6a>
 80082e0:	4638      	mov	r0, r7
 80082e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082e6:	bf00      	nop
 80082e8:	08009920 	.word	0x08009920
 80082ec:	080096b4 	.word	0x080096b4
 80082f0:	080097d7 	.word	0x080097d7

080082f4 <__lshift>:
 80082f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f8:	460c      	mov	r4, r1
 80082fa:	4607      	mov	r7, r0
 80082fc:	4691      	mov	r9, r2
 80082fe:	6923      	ldr	r3, [r4, #16]
 8008300:	6849      	ldr	r1, [r1, #4]
 8008302:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008306:	68a3      	ldr	r3, [r4, #8]
 8008308:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800830c:	f108 0601 	add.w	r6, r8, #1
 8008310:	42b3      	cmp	r3, r6
 8008312:	db0b      	blt.n	800832c <__lshift+0x38>
 8008314:	4638      	mov	r0, r7
 8008316:	f7ff fddf 	bl	8007ed8 <_Balloc>
 800831a:	4605      	mov	r5, r0
 800831c:	b948      	cbnz	r0, 8008332 <__lshift+0x3e>
 800831e:	4602      	mov	r2, r0
 8008320:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008324:	4b27      	ldr	r3, [pc, #156]	; (80083c4 <__lshift+0xd0>)
 8008326:	4828      	ldr	r0, [pc, #160]	; (80083c8 <__lshift+0xd4>)
 8008328:	f7fe fe4c 	bl	8006fc4 <__assert_func>
 800832c:	3101      	adds	r1, #1
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	e7ee      	b.n	8008310 <__lshift+0x1c>
 8008332:	2300      	movs	r3, #0
 8008334:	f100 0114 	add.w	r1, r0, #20
 8008338:	f100 0210 	add.w	r2, r0, #16
 800833c:	4618      	mov	r0, r3
 800833e:	4553      	cmp	r3, sl
 8008340:	db33      	blt.n	80083aa <__lshift+0xb6>
 8008342:	6920      	ldr	r0, [r4, #16]
 8008344:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008348:	f104 0314 	add.w	r3, r4, #20
 800834c:	f019 091f 	ands.w	r9, r9, #31
 8008350:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008354:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008358:	d02b      	beq.n	80083b2 <__lshift+0xbe>
 800835a:	468a      	mov	sl, r1
 800835c:	2200      	movs	r2, #0
 800835e:	f1c9 0e20 	rsb	lr, r9, #32
 8008362:	6818      	ldr	r0, [r3, #0]
 8008364:	fa00 f009 	lsl.w	r0, r0, r9
 8008368:	4310      	orrs	r0, r2
 800836a:	f84a 0b04 	str.w	r0, [sl], #4
 800836e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008372:	459c      	cmp	ip, r3
 8008374:	fa22 f20e 	lsr.w	r2, r2, lr
 8008378:	d8f3      	bhi.n	8008362 <__lshift+0x6e>
 800837a:	ebac 0304 	sub.w	r3, ip, r4
 800837e:	3b15      	subs	r3, #21
 8008380:	f023 0303 	bic.w	r3, r3, #3
 8008384:	3304      	adds	r3, #4
 8008386:	f104 0015 	add.w	r0, r4, #21
 800838a:	4584      	cmp	ip, r0
 800838c:	bf38      	it	cc
 800838e:	2304      	movcc	r3, #4
 8008390:	50ca      	str	r2, [r1, r3]
 8008392:	b10a      	cbz	r2, 8008398 <__lshift+0xa4>
 8008394:	f108 0602 	add.w	r6, r8, #2
 8008398:	3e01      	subs	r6, #1
 800839a:	4638      	mov	r0, r7
 800839c:	4621      	mov	r1, r4
 800839e:	612e      	str	r6, [r5, #16]
 80083a0:	f7ff fdda 	bl	8007f58 <_Bfree>
 80083a4:	4628      	mov	r0, r5
 80083a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80083ae:	3301      	adds	r3, #1
 80083b0:	e7c5      	b.n	800833e <__lshift+0x4a>
 80083b2:	3904      	subs	r1, #4
 80083b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80083b8:	459c      	cmp	ip, r3
 80083ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80083be:	d8f9      	bhi.n	80083b4 <__lshift+0xc0>
 80083c0:	e7ea      	b.n	8008398 <__lshift+0xa4>
 80083c2:	bf00      	nop
 80083c4:	080097c6 	.word	0x080097c6
 80083c8:	080097d7 	.word	0x080097d7

080083cc <__mcmp>:
 80083cc:	4603      	mov	r3, r0
 80083ce:	690a      	ldr	r2, [r1, #16]
 80083d0:	6900      	ldr	r0, [r0, #16]
 80083d2:	b530      	push	{r4, r5, lr}
 80083d4:	1a80      	subs	r0, r0, r2
 80083d6:	d10d      	bne.n	80083f4 <__mcmp+0x28>
 80083d8:	3314      	adds	r3, #20
 80083da:	3114      	adds	r1, #20
 80083dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80083e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80083e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80083e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80083ec:	4295      	cmp	r5, r2
 80083ee:	d002      	beq.n	80083f6 <__mcmp+0x2a>
 80083f0:	d304      	bcc.n	80083fc <__mcmp+0x30>
 80083f2:	2001      	movs	r0, #1
 80083f4:	bd30      	pop	{r4, r5, pc}
 80083f6:	42a3      	cmp	r3, r4
 80083f8:	d3f4      	bcc.n	80083e4 <__mcmp+0x18>
 80083fa:	e7fb      	b.n	80083f4 <__mcmp+0x28>
 80083fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008400:	e7f8      	b.n	80083f4 <__mcmp+0x28>
	...

08008404 <__mdiff>:
 8008404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008408:	460d      	mov	r5, r1
 800840a:	4607      	mov	r7, r0
 800840c:	4611      	mov	r1, r2
 800840e:	4628      	mov	r0, r5
 8008410:	4614      	mov	r4, r2
 8008412:	f7ff ffdb 	bl	80083cc <__mcmp>
 8008416:	1e06      	subs	r6, r0, #0
 8008418:	d111      	bne.n	800843e <__mdiff+0x3a>
 800841a:	4631      	mov	r1, r6
 800841c:	4638      	mov	r0, r7
 800841e:	f7ff fd5b 	bl	8007ed8 <_Balloc>
 8008422:	4602      	mov	r2, r0
 8008424:	b928      	cbnz	r0, 8008432 <__mdiff+0x2e>
 8008426:	f240 2137 	movw	r1, #567	; 0x237
 800842a:	4b3a      	ldr	r3, [pc, #232]	; (8008514 <__mdiff+0x110>)
 800842c:	483a      	ldr	r0, [pc, #232]	; (8008518 <__mdiff+0x114>)
 800842e:	f7fe fdc9 	bl	8006fc4 <__assert_func>
 8008432:	2301      	movs	r3, #1
 8008434:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008438:	4610      	mov	r0, r2
 800843a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800843e:	bfa4      	itt	ge
 8008440:	4623      	movge	r3, r4
 8008442:	462c      	movge	r4, r5
 8008444:	4638      	mov	r0, r7
 8008446:	6861      	ldr	r1, [r4, #4]
 8008448:	bfa6      	itte	ge
 800844a:	461d      	movge	r5, r3
 800844c:	2600      	movge	r6, #0
 800844e:	2601      	movlt	r6, #1
 8008450:	f7ff fd42 	bl	8007ed8 <_Balloc>
 8008454:	4602      	mov	r2, r0
 8008456:	b918      	cbnz	r0, 8008460 <__mdiff+0x5c>
 8008458:	f240 2145 	movw	r1, #581	; 0x245
 800845c:	4b2d      	ldr	r3, [pc, #180]	; (8008514 <__mdiff+0x110>)
 800845e:	e7e5      	b.n	800842c <__mdiff+0x28>
 8008460:	f102 0814 	add.w	r8, r2, #20
 8008464:	46c2      	mov	sl, r8
 8008466:	f04f 0c00 	mov.w	ip, #0
 800846a:	6927      	ldr	r7, [r4, #16]
 800846c:	60c6      	str	r6, [r0, #12]
 800846e:	692e      	ldr	r6, [r5, #16]
 8008470:	f104 0014 	add.w	r0, r4, #20
 8008474:	f105 0914 	add.w	r9, r5, #20
 8008478:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800847c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008480:	3410      	adds	r4, #16
 8008482:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008486:	f859 3b04 	ldr.w	r3, [r9], #4
 800848a:	fa1f f18b 	uxth.w	r1, fp
 800848e:	4461      	add	r1, ip
 8008490:	fa1f fc83 	uxth.w	ip, r3
 8008494:	0c1b      	lsrs	r3, r3, #16
 8008496:	eba1 010c 	sub.w	r1, r1, ip
 800849a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800849e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80084a2:	b289      	uxth	r1, r1
 80084a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80084a8:	454e      	cmp	r6, r9
 80084aa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80084ae:	f84a 1b04 	str.w	r1, [sl], #4
 80084b2:	d8e6      	bhi.n	8008482 <__mdiff+0x7e>
 80084b4:	1b73      	subs	r3, r6, r5
 80084b6:	3b15      	subs	r3, #21
 80084b8:	f023 0303 	bic.w	r3, r3, #3
 80084bc:	3515      	adds	r5, #21
 80084be:	3304      	adds	r3, #4
 80084c0:	42ae      	cmp	r6, r5
 80084c2:	bf38      	it	cc
 80084c4:	2304      	movcc	r3, #4
 80084c6:	4418      	add	r0, r3
 80084c8:	4443      	add	r3, r8
 80084ca:	461e      	mov	r6, r3
 80084cc:	4605      	mov	r5, r0
 80084ce:	4575      	cmp	r5, lr
 80084d0:	d30e      	bcc.n	80084f0 <__mdiff+0xec>
 80084d2:	f10e 0103 	add.w	r1, lr, #3
 80084d6:	1a09      	subs	r1, r1, r0
 80084d8:	f021 0103 	bic.w	r1, r1, #3
 80084dc:	3803      	subs	r0, #3
 80084de:	4586      	cmp	lr, r0
 80084e0:	bf38      	it	cc
 80084e2:	2100      	movcc	r1, #0
 80084e4:	440b      	add	r3, r1
 80084e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084ea:	b189      	cbz	r1, 8008510 <__mdiff+0x10c>
 80084ec:	6117      	str	r7, [r2, #16]
 80084ee:	e7a3      	b.n	8008438 <__mdiff+0x34>
 80084f0:	f855 8b04 	ldr.w	r8, [r5], #4
 80084f4:	fa1f f188 	uxth.w	r1, r8
 80084f8:	4461      	add	r1, ip
 80084fa:	140c      	asrs	r4, r1, #16
 80084fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008500:	b289      	uxth	r1, r1
 8008502:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008506:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800850a:	f846 1b04 	str.w	r1, [r6], #4
 800850e:	e7de      	b.n	80084ce <__mdiff+0xca>
 8008510:	3f01      	subs	r7, #1
 8008512:	e7e8      	b.n	80084e6 <__mdiff+0xe2>
 8008514:	080097c6 	.word	0x080097c6
 8008518:	080097d7 	.word	0x080097d7

0800851c <__d2b>:
 800851c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800851e:	2101      	movs	r1, #1
 8008520:	4617      	mov	r7, r2
 8008522:	461c      	mov	r4, r3
 8008524:	9e08      	ldr	r6, [sp, #32]
 8008526:	f7ff fcd7 	bl	8007ed8 <_Balloc>
 800852a:	4605      	mov	r5, r0
 800852c:	b930      	cbnz	r0, 800853c <__d2b+0x20>
 800852e:	4602      	mov	r2, r0
 8008530:	f240 310f 	movw	r1, #783	; 0x30f
 8008534:	4b22      	ldr	r3, [pc, #136]	; (80085c0 <__d2b+0xa4>)
 8008536:	4823      	ldr	r0, [pc, #140]	; (80085c4 <__d2b+0xa8>)
 8008538:	f7fe fd44 	bl	8006fc4 <__assert_func>
 800853c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008540:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008544:	bb24      	cbnz	r4, 8008590 <__d2b+0x74>
 8008546:	2f00      	cmp	r7, #0
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	d026      	beq.n	800859a <__d2b+0x7e>
 800854c:	4668      	mov	r0, sp
 800854e:	9700      	str	r7, [sp, #0]
 8008550:	f7ff fd8a 	bl	8008068 <__lo0bits>
 8008554:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008558:	b1e8      	cbz	r0, 8008596 <__d2b+0x7a>
 800855a:	f1c0 0320 	rsb	r3, r0, #32
 800855e:	fa02 f303 	lsl.w	r3, r2, r3
 8008562:	430b      	orrs	r3, r1
 8008564:	40c2      	lsrs	r2, r0
 8008566:	616b      	str	r3, [r5, #20]
 8008568:	9201      	str	r2, [sp, #4]
 800856a:	9b01      	ldr	r3, [sp, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	bf14      	ite	ne
 8008570:	2102      	movne	r1, #2
 8008572:	2101      	moveq	r1, #1
 8008574:	61ab      	str	r3, [r5, #24]
 8008576:	6129      	str	r1, [r5, #16]
 8008578:	b1bc      	cbz	r4, 80085aa <__d2b+0x8e>
 800857a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800857e:	4404      	add	r4, r0
 8008580:	6034      	str	r4, [r6, #0]
 8008582:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008588:	6018      	str	r0, [r3, #0]
 800858a:	4628      	mov	r0, r5
 800858c:	b003      	add	sp, #12
 800858e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008594:	e7d7      	b.n	8008546 <__d2b+0x2a>
 8008596:	6169      	str	r1, [r5, #20]
 8008598:	e7e7      	b.n	800856a <__d2b+0x4e>
 800859a:	a801      	add	r0, sp, #4
 800859c:	f7ff fd64 	bl	8008068 <__lo0bits>
 80085a0:	9b01      	ldr	r3, [sp, #4]
 80085a2:	2101      	movs	r1, #1
 80085a4:	616b      	str	r3, [r5, #20]
 80085a6:	3020      	adds	r0, #32
 80085a8:	e7e5      	b.n	8008576 <__d2b+0x5a>
 80085aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085ae:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80085b2:	6030      	str	r0, [r6, #0]
 80085b4:	6918      	ldr	r0, [r3, #16]
 80085b6:	f7ff fd37 	bl	8008028 <__hi0bits>
 80085ba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80085be:	e7e2      	b.n	8008586 <__d2b+0x6a>
 80085c0:	080097c6 	.word	0x080097c6
 80085c4:	080097d7 	.word	0x080097d7

080085c8 <__ssputs_r>:
 80085c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085cc:	461f      	mov	r7, r3
 80085ce:	688e      	ldr	r6, [r1, #8]
 80085d0:	4682      	mov	sl, r0
 80085d2:	42be      	cmp	r6, r7
 80085d4:	460c      	mov	r4, r1
 80085d6:	4690      	mov	r8, r2
 80085d8:	680b      	ldr	r3, [r1, #0]
 80085da:	d82c      	bhi.n	8008636 <__ssputs_r+0x6e>
 80085dc:	898a      	ldrh	r2, [r1, #12]
 80085de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085e2:	d026      	beq.n	8008632 <__ssputs_r+0x6a>
 80085e4:	6965      	ldr	r5, [r4, #20]
 80085e6:	6909      	ldr	r1, [r1, #16]
 80085e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085ec:	eba3 0901 	sub.w	r9, r3, r1
 80085f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085f4:	1c7b      	adds	r3, r7, #1
 80085f6:	444b      	add	r3, r9
 80085f8:	106d      	asrs	r5, r5, #1
 80085fa:	429d      	cmp	r5, r3
 80085fc:	bf38      	it	cc
 80085fe:	461d      	movcc	r5, r3
 8008600:	0553      	lsls	r3, r2, #21
 8008602:	d527      	bpl.n	8008654 <__ssputs_r+0x8c>
 8008604:	4629      	mov	r1, r5
 8008606:	f7ff fbdb 	bl	8007dc0 <_malloc_r>
 800860a:	4606      	mov	r6, r0
 800860c:	b360      	cbz	r0, 8008668 <__ssputs_r+0xa0>
 800860e:	464a      	mov	r2, r9
 8008610:	6921      	ldr	r1, [r4, #16]
 8008612:	f000 fa17 	bl	8008a44 <memcpy>
 8008616:	89a3      	ldrh	r3, [r4, #12]
 8008618:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800861c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008620:	81a3      	strh	r3, [r4, #12]
 8008622:	6126      	str	r6, [r4, #16]
 8008624:	444e      	add	r6, r9
 8008626:	6026      	str	r6, [r4, #0]
 8008628:	463e      	mov	r6, r7
 800862a:	6165      	str	r5, [r4, #20]
 800862c:	eba5 0509 	sub.w	r5, r5, r9
 8008630:	60a5      	str	r5, [r4, #8]
 8008632:	42be      	cmp	r6, r7
 8008634:	d900      	bls.n	8008638 <__ssputs_r+0x70>
 8008636:	463e      	mov	r6, r7
 8008638:	4632      	mov	r2, r6
 800863a:	4641      	mov	r1, r8
 800863c:	6820      	ldr	r0, [r4, #0]
 800863e:	f000 f9d7 	bl	80089f0 <memmove>
 8008642:	2000      	movs	r0, #0
 8008644:	68a3      	ldr	r3, [r4, #8]
 8008646:	1b9b      	subs	r3, r3, r6
 8008648:	60a3      	str	r3, [r4, #8]
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	4433      	add	r3, r6
 800864e:	6023      	str	r3, [r4, #0]
 8008650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008654:	462a      	mov	r2, r5
 8008656:	f000 fa30 	bl	8008aba <_realloc_r>
 800865a:	4606      	mov	r6, r0
 800865c:	2800      	cmp	r0, #0
 800865e:	d1e0      	bne.n	8008622 <__ssputs_r+0x5a>
 8008660:	4650      	mov	r0, sl
 8008662:	6921      	ldr	r1, [r4, #16]
 8008664:	f7ff fb3c 	bl	8007ce0 <_free_r>
 8008668:	230c      	movs	r3, #12
 800866a:	f8ca 3000 	str.w	r3, [sl]
 800866e:	89a3      	ldrh	r3, [r4, #12]
 8008670:	f04f 30ff 	mov.w	r0, #4294967295
 8008674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008678:	81a3      	strh	r3, [r4, #12]
 800867a:	e7e9      	b.n	8008650 <__ssputs_r+0x88>

0800867c <_svfiprintf_r>:
 800867c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008680:	4698      	mov	r8, r3
 8008682:	898b      	ldrh	r3, [r1, #12]
 8008684:	4607      	mov	r7, r0
 8008686:	061b      	lsls	r3, r3, #24
 8008688:	460d      	mov	r5, r1
 800868a:	4614      	mov	r4, r2
 800868c:	b09d      	sub	sp, #116	; 0x74
 800868e:	d50e      	bpl.n	80086ae <_svfiprintf_r+0x32>
 8008690:	690b      	ldr	r3, [r1, #16]
 8008692:	b963      	cbnz	r3, 80086ae <_svfiprintf_r+0x32>
 8008694:	2140      	movs	r1, #64	; 0x40
 8008696:	f7ff fb93 	bl	8007dc0 <_malloc_r>
 800869a:	6028      	str	r0, [r5, #0]
 800869c:	6128      	str	r0, [r5, #16]
 800869e:	b920      	cbnz	r0, 80086aa <_svfiprintf_r+0x2e>
 80086a0:	230c      	movs	r3, #12
 80086a2:	603b      	str	r3, [r7, #0]
 80086a4:	f04f 30ff 	mov.w	r0, #4294967295
 80086a8:	e0d0      	b.n	800884c <_svfiprintf_r+0x1d0>
 80086aa:	2340      	movs	r3, #64	; 0x40
 80086ac:	616b      	str	r3, [r5, #20]
 80086ae:	2300      	movs	r3, #0
 80086b0:	9309      	str	r3, [sp, #36]	; 0x24
 80086b2:	2320      	movs	r3, #32
 80086b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086b8:	2330      	movs	r3, #48	; 0x30
 80086ba:	f04f 0901 	mov.w	r9, #1
 80086be:	f8cd 800c 	str.w	r8, [sp, #12]
 80086c2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008864 <_svfiprintf_r+0x1e8>
 80086c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086ca:	4623      	mov	r3, r4
 80086cc:	469a      	mov	sl, r3
 80086ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086d2:	b10a      	cbz	r2, 80086d8 <_svfiprintf_r+0x5c>
 80086d4:	2a25      	cmp	r2, #37	; 0x25
 80086d6:	d1f9      	bne.n	80086cc <_svfiprintf_r+0x50>
 80086d8:	ebba 0b04 	subs.w	fp, sl, r4
 80086dc:	d00b      	beq.n	80086f6 <_svfiprintf_r+0x7a>
 80086de:	465b      	mov	r3, fp
 80086e0:	4622      	mov	r2, r4
 80086e2:	4629      	mov	r1, r5
 80086e4:	4638      	mov	r0, r7
 80086e6:	f7ff ff6f 	bl	80085c8 <__ssputs_r>
 80086ea:	3001      	adds	r0, #1
 80086ec:	f000 80a9 	beq.w	8008842 <_svfiprintf_r+0x1c6>
 80086f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086f2:	445a      	add	r2, fp
 80086f4:	9209      	str	r2, [sp, #36]	; 0x24
 80086f6:	f89a 3000 	ldrb.w	r3, [sl]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f000 80a1 	beq.w	8008842 <_svfiprintf_r+0x1c6>
 8008700:	2300      	movs	r3, #0
 8008702:	f04f 32ff 	mov.w	r2, #4294967295
 8008706:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800870a:	f10a 0a01 	add.w	sl, sl, #1
 800870e:	9304      	str	r3, [sp, #16]
 8008710:	9307      	str	r3, [sp, #28]
 8008712:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008716:	931a      	str	r3, [sp, #104]	; 0x68
 8008718:	4654      	mov	r4, sl
 800871a:	2205      	movs	r2, #5
 800871c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008720:	4850      	ldr	r0, [pc, #320]	; (8008864 <_svfiprintf_r+0x1e8>)
 8008722:	f7fe fc40 	bl	8006fa6 <memchr>
 8008726:	9a04      	ldr	r2, [sp, #16]
 8008728:	b9d8      	cbnz	r0, 8008762 <_svfiprintf_r+0xe6>
 800872a:	06d0      	lsls	r0, r2, #27
 800872c:	bf44      	itt	mi
 800872e:	2320      	movmi	r3, #32
 8008730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008734:	0711      	lsls	r1, r2, #28
 8008736:	bf44      	itt	mi
 8008738:	232b      	movmi	r3, #43	; 0x2b
 800873a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800873e:	f89a 3000 	ldrb.w	r3, [sl]
 8008742:	2b2a      	cmp	r3, #42	; 0x2a
 8008744:	d015      	beq.n	8008772 <_svfiprintf_r+0xf6>
 8008746:	4654      	mov	r4, sl
 8008748:	2000      	movs	r0, #0
 800874a:	f04f 0c0a 	mov.w	ip, #10
 800874e:	9a07      	ldr	r2, [sp, #28]
 8008750:	4621      	mov	r1, r4
 8008752:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008756:	3b30      	subs	r3, #48	; 0x30
 8008758:	2b09      	cmp	r3, #9
 800875a:	d94d      	bls.n	80087f8 <_svfiprintf_r+0x17c>
 800875c:	b1b0      	cbz	r0, 800878c <_svfiprintf_r+0x110>
 800875e:	9207      	str	r2, [sp, #28]
 8008760:	e014      	b.n	800878c <_svfiprintf_r+0x110>
 8008762:	eba0 0308 	sub.w	r3, r0, r8
 8008766:	fa09 f303 	lsl.w	r3, r9, r3
 800876a:	4313      	orrs	r3, r2
 800876c:	46a2      	mov	sl, r4
 800876e:	9304      	str	r3, [sp, #16]
 8008770:	e7d2      	b.n	8008718 <_svfiprintf_r+0x9c>
 8008772:	9b03      	ldr	r3, [sp, #12]
 8008774:	1d19      	adds	r1, r3, #4
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	9103      	str	r1, [sp, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	bfbb      	ittet	lt
 800877e:	425b      	neglt	r3, r3
 8008780:	f042 0202 	orrlt.w	r2, r2, #2
 8008784:	9307      	strge	r3, [sp, #28]
 8008786:	9307      	strlt	r3, [sp, #28]
 8008788:	bfb8      	it	lt
 800878a:	9204      	strlt	r2, [sp, #16]
 800878c:	7823      	ldrb	r3, [r4, #0]
 800878e:	2b2e      	cmp	r3, #46	; 0x2e
 8008790:	d10c      	bne.n	80087ac <_svfiprintf_r+0x130>
 8008792:	7863      	ldrb	r3, [r4, #1]
 8008794:	2b2a      	cmp	r3, #42	; 0x2a
 8008796:	d134      	bne.n	8008802 <_svfiprintf_r+0x186>
 8008798:	9b03      	ldr	r3, [sp, #12]
 800879a:	3402      	adds	r4, #2
 800879c:	1d1a      	adds	r2, r3, #4
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	9203      	str	r2, [sp, #12]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	bfb8      	it	lt
 80087a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80087aa:	9305      	str	r3, [sp, #20]
 80087ac:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008868 <_svfiprintf_r+0x1ec>
 80087b0:	2203      	movs	r2, #3
 80087b2:	4650      	mov	r0, sl
 80087b4:	7821      	ldrb	r1, [r4, #0]
 80087b6:	f7fe fbf6 	bl	8006fa6 <memchr>
 80087ba:	b138      	cbz	r0, 80087cc <_svfiprintf_r+0x150>
 80087bc:	2240      	movs	r2, #64	; 0x40
 80087be:	9b04      	ldr	r3, [sp, #16]
 80087c0:	eba0 000a 	sub.w	r0, r0, sl
 80087c4:	4082      	lsls	r2, r0
 80087c6:	4313      	orrs	r3, r2
 80087c8:	3401      	adds	r4, #1
 80087ca:	9304      	str	r3, [sp, #16]
 80087cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087d0:	2206      	movs	r2, #6
 80087d2:	4826      	ldr	r0, [pc, #152]	; (800886c <_svfiprintf_r+0x1f0>)
 80087d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087d8:	f7fe fbe5 	bl	8006fa6 <memchr>
 80087dc:	2800      	cmp	r0, #0
 80087de:	d038      	beq.n	8008852 <_svfiprintf_r+0x1d6>
 80087e0:	4b23      	ldr	r3, [pc, #140]	; (8008870 <_svfiprintf_r+0x1f4>)
 80087e2:	bb1b      	cbnz	r3, 800882c <_svfiprintf_r+0x1b0>
 80087e4:	9b03      	ldr	r3, [sp, #12]
 80087e6:	3307      	adds	r3, #7
 80087e8:	f023 0307 	bic.w	r3, r3, #7
 80087ec:	3308      	adds	r3, #8
 80087ee:	9303      	str	r3, [sp, #12]
 80087f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f2:	4433      	add	r3, r6
 80087f4:	9309      	str	r3, [sp, #36]	; 0x24
 80087f6:	e768      	b.n	80086ca <_svfiprintf_r+0x4e>
 80087f8:	460c      	mov	r4, r1
 80087fa:	2001      	movs	r0, #1
 80087fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008800:	e7a6      	b.n	8008750 <_svfiprintf_r+0xd4>
 8008802:	2300      	movs	r3, #0
 8008804:	f04f 0c0a 	mov.w	ip, #10
 8008808:	4619      	mov	r1, r3
 800880a:	3401      	adds	r4, #1
 800880c:	9305      	str	r3, [sp, #20]
 800880e:	4620      	mov	r0, r4
 8008810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008814:	3a30      	subs	r2, #48	; 0x30
 8008816:	2a09      	cmp	r2, #9
 8008818:	d903      	bls.n	8008822 <_svfiprintf_r+0x1a6>
 800881a:	2b00      	cmp	r3, #0
 800881c:	d0c6      	beq.n	80087ac <_svfiprintf_r+0x130>
 800881e:	9105      	str	r1, [sp, #20]
 8008820:	e7c4      	b.n	80087ac <_svfiprintf_r+0x130>
 8008822:	4604      	mov	r4, r0
 8008824:	2301      	movs	r3, #1
 8008826:	fb0c 2101 	mla	r1, ip, r1, r2
 800882a:	e7f0      	b.n	800880e <_svfiprintf_r+0x192>
 800882c:	ab03      	add	r3, sp, #12
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	462a      	mov	r2, r5
 8008832:	4638      	mov	r0, r7
 8008834:	4b0f      	ldr	r3, [pc, #60]	; (8008874 <_svfiprintf_r+0x1f8>)
 8008836:	a904      	add	r1, sp, #16
 8008838:	f7fd fd9c 	bl	8006374 <_printf_float>
 800883c:	1c42      	adds	r2, r0, #1
 800883e:	4606      	mov	r6, r0
 8008840:	d1d6      	bne.n	80087f0 <_svfiprintf_r+0x174>
 8008842:	89ab      	ldrh	r3, [r5, #12]
 8008844:	065b      	lsls	r3, r3, #25
 8008846:	f53f af2d 	bmi.w	80086a4 <_svfiprintf_r+0x28>
 800884a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800884c:	b01d      	add	sp, #116	; 0x74
 800884e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008852:	ab03      	add	r3, sp, #12
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	462a      	mov	r2, r5
 8008858:	4638      	mov	r0, r7
 800885a:	4b06      	ldr	r3, [pc, #24]	; (8008874 <_svfiprintf_r+0x1f8>)
 800885c:	a904      	add	r1, sp, #16
 800885e:	f7fe f829 	bl	80068b4 <_printf_i>
 8008862:	e7eb      	b.n	800883c <_svfiprintf_r+0x1c0>
 8008864:	0800992c 	.word	0x0800992c
 8008868:	08009932 	.word	0x08009932
 800886c:	08009936 	.word	0x08009936
 8008870:	08006375 	.word	0x08006375
 8008874:	080085c9 	.word	0x080085c9

08008878 <__sflush_r>:
 8008878:	898a      	ldrh	r2, [r1, #12]
 800887a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887c:	4605      	mov	r5, r0
 800887e:	0710      	lsls	r0, r2, #28
 8008880:	460c      	mov	r4, r1
 8008882:	d457      	bmi.n	8008934 <__sflush_r+0xbc>
 8008884:	684b      	ldr	r3, [r1, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	dc04      	bgt.n	8008894 <__sflush_r+0x1c>
 800888a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800888c:	2b00      	cmp	r3, #0
 800888e:	dc01      	bgt.n	8008894 <__sflush_r+0x1c>
 8008890:	2000      	movs	r0, #0
 8008892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008896:	2e00      	cmp	r6, #0
 8008898:	d0fa      	beq.n	8008890 <__sflush_r+0x18>
 800889a:	2300      	movs	r3, #0
 800889c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088a0:	682f      	ldr	r7, [r5, #0]
 80088a2:	6a21      	ldr	r1, [r4, #32]
 80088a4:	602b      	str	r3, [r5, #0]
 80088a6:	d032      	beq.n	800890e <__sflush_r+0x96>
 80088a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088aa:	89a3      	ldrh	r3, [r4, #12]
 80088ac:	075a      	lsls	r2, r3, #29
 80088ae:	d505      	bpl.n	80088bc <__sflush_r+0x44>
 80088b0:	6863      	ldr	r3, [r4, #4]
 80088b2:	1ac0      	subs	r0, r0, r3
 80088b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088b6:	b10b      	cbz	r3, 80088bc <__sflush_r+0x44>
 80088b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088ba:	1ac0      	subs	r0, r0, r3
 80088bc:	2300      	movs	r3, #0
 80088be:	4602      	mov	r2, r0
 80088c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088c2:	4628      	mov	r0, r5
 80088c4:	6a21      	ldr	r1, [r4, #32]
 80088c6:	47b0      	blx	r6
 80088c8:	1c43      	adds	r3, r0, #1
 80088ca:	89a3      	ldrh	r3, [r4, #12]
 80088cc:	d106      	bne.n	80088dc <__sflush_r+0x64>
 80088ce:	6829      	ldr	r1, [r5, #0]
 80088d0:	291d      	cmp	r1, #29
 80088d2:	d82b      	bhi.n	800892c <__sflush_r+0xb4>
 80088d4:	4a28      	ldr	r2, [pc, #160]	; (8008978 <__sflush_r+0x100>)
 80088d6:	410a      	asrs	r2, r1
 80088d8:	07d6      	lsls	r6, r2, #31
 80088da:	d427      	bmi.n	800892c <__sflush_r+0xb4>
 80088dc:	2200      	movs	r2, #0
 80088de:	6062      	str	r2, [r4, #4]
 80088e0:	6922      	ldr	r2, [r4, #16]
 80088e2:	04d9      	lsls	r1, r3, #19
 80088e4:	6022      	str	r2, [r4, #0]
 80088e6:	d504      	bpl.n	80088f2 <__sflush_r+0x7a>
 80088e8:	1c42      	adds	r2, r0, #1
 80088ea:	d101      	bne.n	80088f0 <__sflush_r+0x78>
 80088ec:	682b      	ldr	r3, [r5, #0]
 80088ee:	b903      	cbnz	r3, 80088f2 <__sflush_r+0x7a>
 80088f0:	6560      	str	r0, [r4, #84]	; 0x54
 80088f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088f4:	602f      	str	r7, [r5, #0]
 80088f6:	2900      	cmp	r1, #0
 80088f8:	d0ca      	beq.n	8008890 <__sflush_r+0x18>
 80088fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088fe:	4299      	cmp	r1, r3
 8008900:	d002      	beq.n	8008908 <__sflush_r+0x90>
 8008902:	4628      	mov	r0, r5
 8008904:	f7ff f9ec 	bl	8007ce0 <_free_r>
 8008908:	2000      	movs	r0, #0
 800890a:	6360      	str	r0, [r4, #52]	; 0x34
 800890c:	e7c1      	b.n	8008892 <__sflush_r+0x1a>
 800890e:	2301      	movs	r3, #1
 8008910:	4628      	mov	r0, r5
 8008912:	47b0      	blx	r6
 8008914:	1c41      	adds	r1, r0, #1
 8008916:	d1c8      	bne.n	80088aa <__sflush_r+0x32>
 8008918:	682b      	ldr	r3, [r5, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d0c5      	beq.n	80088aa <__sflush_r+0x32>
 800891e:	2b1d      	cmp	r3, #29
 8008920:	d001      	beq.n	8008926 <__sflush_r+0xae>
 8008922:	2b16      	cmp	r3, #22
 8008924:	d101      	bne.n	800892a <__sflush_r+0xb2>
 8008926:	602f      	str	r7, [r5, #0]
 8008928:	e7b2      	b.n	8008890 <__sflush_r+0x18>
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008930:	81a3      	strh	r3, [r4, #12]
 8008932:	e7ae      	b.n	8008892 <__sflush_r+0x1a>
 8008934:	690f      	ldr	r7, [r1, #16]
 8008936:	2f00      	cmp	r7, #0
 8008938:	d0aa      	beq.n	8008890 <__sflush_r+0x18>
 800893a:	0793      	lsls	r3, r2, #30
 800893c:	bf18      	it	ne
 800893e:	2300      	movne	r3, #0
 8008940:	680e      	ldr	r6, [r1, #0]
 8008942:	bf08      	it	eq
 8008944:	694b      	ldreq	r3, [r1, #20]
 8008946:	1bf6      	subs	r6, r6, r7
 8008948:	600f      	str	r7, [r1, #0]
 800894a:	608b      	str	r3, [r1, #8]
 800894c:	2e00      	cmp	r6, #0
 800894e:	dd9f      	ble.n	8008890 <__sflush_r+0x18>
 8008950:	4633      	mov	r3, r6
 8008952:	463a      	mov	r2, r7
 8008954:	4628      	mov	r0, r5
 8008956:	6a21      	ldr	r1, [r4, #32]
 8008958:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800895c:	47e0      	blx	ip
 800895e:	2800      	cmp	r0, #0
 8008960:	dc06      	bgt.n	8008970 <__sflush_r+0xf8>
 8008962:	89a3      	ldrh	r3, [r4, #12]
 8008964:	f04f 30ff 	mov.w	r0, #4294967295
 8008968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800896c:	81a3      	strh	r3, [r4, #12]
 800896e:	e790      	b.n	8008892 <__sflush_r+0x1a>
 8008970:	4407      	add	r7, r0
 8008972:	1a36      	subs	r6, r6, r0
 8008974:	e7ea      	b.n	800894c <__sflush_r+0xd4>
 8008976:	bf00      	nop
 8008978:	dfbffffe 	.word	0xdfbffffe

0800897c <_fflush_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	690b      	ldr	r3, [r1, #16]
 8008980:	4605      	mov	r5, r0
 8008982:	460c      	mov	r4, r1
 8008984:	b913      	cbnz	r3, 800898c <_fflush_r+0x10>
 8008986:	2500      	movs	r5, #0
 8008988:	4628      	mov	r0, r5
 800898a:	bd38      	pop	{r3, r4, r5, pc}
 800898c:	b118      	cbz	r0, 8008996 <_fflush_r+0x1a>
 800898e:	6a03      	ldr	r3, [r0, #32]
 8008990:	b90b      	cbnz	r3, 8008996 <_fflush_r+0x1a>
 8008992:	f7fe f93d 	bl	8006c10 <__sinit>
 8008996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d0f3      	beq.n	8008986 <_fflush_r+0xa>
 800899e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089a0:	07d0      	lsls	r0, r2, #31
 80089a2:	d404      	bmi.n	80089ae <_fflush_r+0x32>
 80089a4:	0599      	lsls	r1, r3, #22
 80089a6:	d402      	bmi.n	80089ae <_fflush_r+0x32>
 80089a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089aa:	f7fe fafa 	bl	8006fa2 <__retarget_lock_acquire_recursive>
 80089ae:	4628      	mov	r0, r5
 80089b0:	4621      	mov	r1, r4
 80089b2:	f7ff ff61 	bl	8008878 <__sflush_r>
 80089b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089b8:	4605      	mov	r5, r0
 80089ba:	07da      	lsls	r2, r3, #31
 80089bc:	d4e4      	bmi.n	8008988 <_fflush_r+0xc>
 80089be:	89a3      	ldrh	r3, [r4, #12]
 80089c0:	059b      	lsls	r3, r3, #22
 80089c2:	d4e1      	bmi.n	8008988 <_fflush_r+0xc>
 80089c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089c6:	f7fe faed 	bl	8006fa4 <__retarget_lock_release_recursive>
 80089ca:	e7dd      	b.n	8008988 <_fflush_r+0xc>

080089cc <fiprintf>:
 80089cc:	b40e      	push	{r1, r2, r3}
 80089ce:	b503      	push	{r0, r1, lr}
 80089d0:	4601      	mov	r1, r0
 80089d2:	ab03      	add	r3, sp, #12
 80089d4:	4805      	ldr	r0, [pc, #20]	; (80089ec <fiprintf+0x20>)
 80089d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80089da:	6800      	ldr	r0, [r0, #0]
 80089dc:	9301      	str	r3, [sp, #4]
 80089de:	f000 f8cf 	bl	8008b80 <_vfiprintf_r>
 80089e2:	b002      	add	sp, #8
 80089e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80089e8:	b003      	add	sp, #12
 80089ea:	4770      	bx	lr
 80089ec:	20000064 	.word	0x20000064

080089f0 <memmove>:
 80089f0:	4288      	cmp	r0, r1
 80089f2:	b510      	push	{r4, lr}
 80089f4:	eb01 0402 	add.w	r4, r1, r2
 80089f8:	d902      	bls.n	8008a00 <memmove+0x10>
 80089fa:	4284      	cmp	r4, r0
 80089fc:	4623      	mov	r3, r4
 80089fe:	d807      	bhi.n	8008a10 <memmove+0x20>
 8008a00:	1e43      	subs	r3, r0, #1
 8008a02:	42a1      	cmp	r1, r4
 8008a04:	d008      	beq.n	8008a18 <memmove+0x28>
 8008a06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a0e:	e7f8      	b.n	8008a02 <memmove+0x12>
 8008a10:	4601      	mov	r1, r0
 8008a12:	4402      	add	r2, r0
 8008a14:	428a      	cmp	r2, r1
 8008a16:	d100      	bne.n	8008a1a <memmove+0x2a>
 8008a18:	bd10      	pop	{r4, pc}
 8008a1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a22:	e7f7      	b.n	8008a14 <memmove+0x24>

08008a24 <_sbrk_r>:
 8008a24:	b538      	push	{r3, r4, r5, lr}
 8008a26:	2300      	movs	r3, #0
 8008a28:	4d05      	ldr	r5, [pc, #20]	; (8008a40 <_sbrk_r+0x1c>)
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	4608      	mov	r0, r1
 8008a2e:	602b      	str	r3, [r5, #0]
 8008a30:	f7f9 fcec 	bl	800240c <_sbrk>
 8008a34:	1c43      	adds	r3, r0, #1
 8008a36:	d102      	bne.n	8008a3e <_sbrk_r+0x1a>
 8008a38:	682b      	ldr	r3, [r5, #0]
 8008a3a:	b103      	cbz	r3, 8008a3e <_sbrk_r+0x1a>
 8008a3c:	6023      	str	r3, [r4, #0]
 8008a3e:	bd38      	pop	{r3, r4, r5, pc}
 8008a40:	20000574 	.word	0x20000574

08008a44 <memcpy>:
 8008a44:	440a      	add	r2, r1
 8008a46:	4291      	cmp	r1, r2
 8008a48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a4c:	d100      	bne.n	8008a50 <memcpy+0xc>
 8008a4e:	4770      	bx	lr
 8008a50:	b510      	push	{r4, lr}
 8008a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a56:	4291      	cmp	r1, r2
 8008a58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a5c:	d1f9      	bne.n	8008a52 <memcpy+0xe>
 8008a5e:	bd10      	pop	{r4, pc}

08008a60 <abort>:
 8008a60:	2006      	movs	r0, #6
 8008a62:	b508      	push	{r3, lr}
 8008a64:	f000 fa64 	bl	8008f30 <raise>
 8008a68:	2001      	movs	r0, #1
 8008a6a:	f7f9 fc5c 	bl	8002326 <_exit>

08008a6e <_calloc_r>:
 8008a6e:	b570      	push	{r4, r5, r6, lr}
 8008a70:	fba1 5402 	umull	r5, r4, r1, r2
 8008a74:	b934      	cbnz	r4, 8008a84 <_calloc_r+0x16>
 8008a76:	4629      	mov	r1, r5
 8008a78:	f7ff f9a2 	bl	8007dc0 <_malloc_r>
 8008a7c:	4606      	mov	r6, r0
 8008a7e:	b928      	cbnz	r0, 8008a8c <_calloc_r+0x1e>
 8008a80:	4630      	mov	r0, r6
 8008a82:	bd70      	pop	{r4, r5, r6, pc}
 8008a84:	220c      	movs	r2, #12
 8008a86:	2600      	movs	r6, #0
 8008a88:	6002      	str	r2, [r0, #0]
 8008a8a:	e7f9      	b.n	8008a80 <_calloc_r+0x12>
 8008a8c:	462a      	mov	r2, r5
 8008a8e:	4621      	mov	r1, r4
 8008a90:	f7fe f98b 	bl	8006daa <memset>
 8008a94:	e7f4      	b.n	8008a80 <_calloc_r+0x12>

08008a96 <__ascii_mbtowc>:
 8008a96:	b082      	sub	sp, #8
 8008a98:	b901      	cbnz	r1, 8008a9c <__ascii_mbtowc+0x6>
 8008a9a:	a901      	add	r1, sp, #4
 8008a9c:	b142      	cbz	r2, 8008ab0 <__ascii_mbtowc+0x1a>
 8008a9e:	b14b      	cbz	r3, 8008ab4 <__ascii_mbtowc+0x1e>
 8008aa0:	7813      	ldrb	r3, [r2, #0]
 8008aa2:	600b      	str	r3, [r1, #0]
 8008aa4:	7812      	ldrb	r2, [r2, #0]
 8008aa6:	1e10      	subs	r0, r2, #0
 8008aa8:	bf18      	it	ne
 8008aaa:	2001      	movne	r0, #1
 8008aac:	b002      	add	sp, #8
 8008aae:	4770      	bx	lr
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	e7fb      	b.n	8008aac <__ascii_mbtowc+0x16>
 8008ab4:	f06f 0001 	mvn.w	r0, #1
 8008ab8:	e7f8      	b.n	8008aac <__ascii_mbtowc+0x16>

08008aba <_realloc_r>:
 8008aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008abe:	4680      	mov	r8, r0
 8008ac0:	4614      	mov	r4, r2
 8008ac2:	460e      	mov	r6, r1
 8008ac4:	b921      	cbnz	r1, 8008ad0 <_realloc_r+0x16>
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008acc:	f7ff b978 	b.w	8007dc0 <_malloc_r>
 8008ad0:	b92a      	cbnz	r2, 8008ade <_realloc_r+0x24>
 8008ad2:	f7ff f905 	bl	8007ce0 <_free_r>
 8008ad6:	4625      	mov	r5, r4
 8008ad8:	4628      	mov	r0, r5
 8008ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ade:	f000 fa43 	bl	8008f68 <_malloc_usable_size_r>
 8008ae2:	4284      	cmp	r4, r0
 8008ae4:	4607      	mov	r7, r0
 8008ae6:	d802      	bhi.n	8008aee <_realloc_r+0x34>
 8008ae8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008aec:	d812      	bhi.n	8008b14 <_realloc_r+0x5a>
 8008aee:	4621      	mov	r1, r4
 8008af0:	4640      	mov	r0, r8
 8008af2:	f7ff f965 	bl	8007dc0 <_malloc_r>
 8008af6:	4605      	mov	r5, r0
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d0ed      	beq.n	8008ad8 <_realloc_r+0x1e>
 8008afc:	42bc      	cmp	r4, r7
 8008afe:	4622      	mov	r2, r4
 8008b00:	4631      	mov	r1, r6
 8008b02:	bf28      	it	cs
 8008b04:	463a      	movcs	r2, r7
 8008b06:	f7ff ff9d 	bl	8008a44 <memcpy>
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	4640      	mov	r0, r8
 8008b0e:	f7ff f8e7 	bl	8007ce0 <_free_r>
 8008b12:	e7e1      	b.n	8008ad8 <_realloc_r+0x1e>
 8008b14:	4635      	mov	r5, r6
 8008b16:	e7df      	b.n	8008ad8 <_realloc_r+0x1e>

08008b18 <__ascii_wctomb>:
 8008b18:	4603      	mov	r3, r0
 8008b1a:	4608      	mov	r0, r1
 8008b1c:	b141      	cbz	r1, 8008b30 <__ascii_wctomb+0x18>
 8008b1e:	2aff      	cmp	r2, #255	; 0xff
 8008b20:	d904      	bls.n	8008b2c <__ascii_wctomb+0x14>
 8008b22:	228a      	movs	r2, #138	; 0x8a
 8008b24:	f04f 30ff 	mov.w	r0, #4294967295
 8008b28:	601a      	str	r2, [r3, #0]
 8008b2a:	4770      	bx	lr
 8008b2c:	2001      	movs	r0, #1
 8008b2e:	700a      	strb	r2, [r1, #0]
 8008b30:	4770      	bx	lr

08008b32 <__sfputc_r>:
 8008b32:	6893      	ldr	r3, [r2, #8]
 8008b34:	b410      	push	{r4}
 8008b36:	3b01      	subs	r3, #1
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	6093      	str	r3, [r2, #8]
 8008b3c:	da07      	bge.n	8008b4e <__sfputc_r+0x1c>
 8008b3e:	6994      	ldr	r4, [r2, #24]
 8008b40:	42a3      	cmp	r3, r4
 8008b42:	db01      	blt.n	8008b48 <__sfputc_r+0x16>
 8008b44:	290a      	cmp	r1, #10
 8008b46:	d102      	bne.n	8008b4e <__sfputc_r+0x1c>
 8008b48:	bc10      	pop	{r4}
 8008b4a:	f000 b933 	b.w	8008db4 <__swbuf_r>
 8008b4e:	6813      	ldr	r3, [r2, #0]
 8008b50:	1c58      	adds	r0, r3, #1
 8008b52:	6010      	str	r0, [r2, #0]
 8008b54:	7019      	strb	r1, [r3, #0]
 8008b56:	4608      	mov	r0, r1
 8008b58:	bc10      	pop	{r4}
 8008b5a:	4770      	bx	lr

08008b5c <__sfputs_r>:
 8008b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5e:	4606      	mov	r6, r0
 8008b60:	460f      	mov	r7, r1
 8008b62:	4614      	mov	r4, r2
 8008b64:	18d5      	adds	r5, r2, r3
 8008b66:	42ac      	cmp	r4, r5
 8008b68:	d101      	bne.n	8008b6e <__sfputs_r+0x12>
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	e007      	b.n	8008b7e <__sfputs_r+0x22>
 8008b6e:	463a      	mov	r2, r7
 8008b70:	4630      	mov	r0, r6
 8008b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b76:	f7ff ffdc 	bl	8008b32 <__sfputc_r>
 8008b7a:	1c43      	adds	r3, r0, #1
 8008b7c:	d1f3      	bne.n	8008b66 <__sfputs_r+0xa>
 8008b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b80 <_vfiprintf_r>:
 8008b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b84:	460d      	mov	r5, r1
 8008b86:	4614      	mov	r4, r2
 8008b88:	4698      	mov	r8, r3
 8008b8a:	4606      	mov	r6, r0
 8008b8c:	b09d      	sub	sp, #116	; 0x74
 8008b8e:	b118      	cbz	r0, 8008b98 <_vfiprintf_r+0x18>
 8008b90:	6a03      	ldr	r3, [r0, #32]
 8008b92:	b90b      	cbnz	r3, 8008b98 <_vfiprintf_r+0x18>
 8008b94:	f7fe f83c 	bl	8006c10 <__sinit>
 8008b98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b9a:	07d9      	lsls	r1, r3, #31
 8008b9c:	d405      	bmi.n	8008baa <_vfiprintf_r+0x2a>
 8008b9e:	89ab      	ldrh	r3, [r5, #12]
 8008ba0:	059a      	lsls	r2, r3, #22
 8008ba2:	d402      	bmi.n	8008baa <_vfiprintf_r+0x2a>
 8008ba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ba6:	f7fe f9fc 	bl	8006fa2 <__retarget_lock_acquire_recursive>
 8008baa:	89ab      	ldrh	r3, [r5, #12]
 8008bac:	071b      	lsls	r3, r3, #28
 8008bae:	d501      	bpl.n	8008bb4 <_vfiprintf_r+0x34>
 8008bb0:	692b      	ldr	r3, [r5, #16]
 8008bb2:	b99b      	cbnz	r3, 8008bdc <_vfiprintf_r+0x5c>
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	f000 f93a 	bl	8008e30 <__swsetup_r>
 8008bbc:	b170      	cbz	r0, 8008bdc <_vfiprintf_r+0x5c>
 8008bbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bc0:	07dc      	lsls	r4, r3, #31
 8008bc2:	d504      	bpl.n	8008bce <_vfiprintf_r+0x4e>
 8008bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc8:	b01d      	add	sp, #116	; 0x74
 8008bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bce:	89ab      	ldrh	r3, [r5, #12]
 8008bd0:	0598      	lsls	r0, r3, #22
 8008bd2:	d4f7      	bmi.n	8008bc4 <_vfiprintf_r+0x44>
 8008bd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bd6:	f7fe f9e5 	bl	8006fa4 <__retarget_lock_release_recursive>
 8008bda:	e7f3      	b.n	8008bc4 <_vfiprintf_r+0x44>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	9309      	str	r3, [sp, #36]	; 0x24
 8008be0:	2320      	movs	r3, #32
 8008be2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008be6:	2330      	movs	r3, #48	; 0x30
 8008be8:	f04f 0901 	mov.w	r9, #1
 8008bec:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bf0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008da0 <_vfiprintf_r+0x220>
 8008bf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bf8:	4623      	mov	r3, r4
 8008bfa:	469a      	mov	sl, r3
 8008bfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c00:	b10a      	cbz	r2, 8008c06 <_vfiprintf_r+0x86>
 8008c02:	2a25      	cmp	r2, #37	; 0x25
 8008c04:	d1f9      	bne.n	8008bfa <_vfiprintf_r+0x7a>
 8008c06:	ebba 0b04 	subs.w	fp, sl, r4
 8008c0a:	d00b      	beq.n	8008c24 <_vfiprintf_r+0xa4>
 8008c0c:	465b      	mov	r3, fp
 8008c0e:	4622      	mov	r2, r4
 8008c10:	4629      	mov	r1, r5
 8008c12:	4630      	mov	r0, r6
 8008c14:	f7ff ffa2 	bl	8008b5c <__sfputs_r>
 8008c18:	3001      	adds	r0, #1
 8008c1a:	f000 80a9 	beq.w	8008d70 <_vfiprintf_r+0x1f0>
 8008c1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c20:	445a      	add	r2, fp
 8008c22:	9209      	str	r2, [sp, #36]	; 0x24
 8008c24:	f89a 3000 	ldrb.w	r3, [sl]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f000 80a1 	beq.w	8008d70 <_vfiprintf_r+0x1f0>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	f04f 32ff 	mov.w	r2, #4294967295
 8008c34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c38:	f10a 0a01 	add.w	sl, sl, #1
 8008c3c:	9304      	str	r3, [sp, #16]
 8008c3e:	9307      	str	r3, [sp, #28]
 8008c40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c44:	931a      	str	r3, [sp, #104]	; 0x68
 8008c46:	4654      	mov	r4, sl
 8008c48:	2205      	movs	r2, #5
 8008c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c4e:	4854      	ldr	r0, [pc, #336]	; (8008da0 <_vfiprintf_r+0x220>)
 8008c50:	f7fe f9a9 	bl	8006fa6 <memchr>
 8008c54:	9a04      	ldr	r2, [sp, #16]
 8008c56:	b9d8      	cbnz	r0, 8008c90 <_vfiprintf_r+0x110>
 8008c58:	06d1      	lsls	r1, r2, #27
 8008c5a:	bf44      	itt	mi
 8008c5c:	2320      	movmi	r3, #32
 8008c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c62:	0713      	lsls	r3, r2, #28
 8008c64:	bf44      	itt	mi
 8008c66:	232b      	movmi	r3, #43	; 0x2b
 8008c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c70:	2b2a      	cmp	r3, #42	; 0x2a
 8008c72:	d015      	beq.n	8008ca0 <_vfiprintf_r+0x120>
 8008c74:	4654      	mov	r4, sl
 8008c76:	2000      	movs	r0, #0
 8008c78:	f04f 0c0a 	mov.w	ip, #10
 8008c7c:	9a07      	ldr	r2, [sp, #28]
 8008c7e:	4621      	mov	r1, r4
 8008c80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c84:	3b30      	subs	r3, #48	; 0x30
 8008c86:	2b09      	cmp	r3, #9
 8008c88:	d94d      	bls.n	8008d26 <_vfiprintf_r+0x1a6>
 8008c8a:	b1b0      	cbz	r0, 8008cba <_vfiprintf_r+0x13a>
 8008c8c:	9207      	str	r2, [sp, #28]
 8008c8e:	e014      	b.n	8008cba <_vfiprintf_r+0x13a>
 8008c90:	eba0 0308 	sub.w	r3, r0, r8
 8008c94:	fa09 f303 	lsl.w	r3, r9, r3
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	46a2      	mov	sl, r4
 8008c9c:	9304      	str	r3, [sp, #16]
 8008c9e:	e7d2      	b.n	8008c46 <_vfiprintf_r+0xc6>
 8008ca0:	9b03      	ldr	r3, [sp, #12]
 8008ca2:	1d19      	adds	r1, r3, #4
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	9103      	str	r1, [sp, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	bfbb      	ittet	lt
 8008cac:	425b      	neglt	r3, r3
 8008cae:	f042 0202 	orrlt.w	r2, r2, #2
 8008cb2:	9307      	strge	r3, [sp, #28]
 8008cb4:	9307      	strlt	r3, [sp, #28]
 8008cb6:	bfb8      	it	lt
 8008cb8:	9204      	strlt	r2, [sp, #16]
 8008cba:	7823      	ldrb	r3, [r4, #0]
 8008cbc:	2b2e      	cmp	r3, #46	; 0x2e
 8008cbe:	d10c      	bne.n	8008cda <_vfiprintf_r+0x15a>
 8008cc0:	7863      	ldrb	r3, [r4, #1]
 8008cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8008cc4:	d134      	bne.n	8008d30 <_vfiprintf_r+0x1b0>
 8008cc6:	9b03      	ldr	r3, [sp, #12]
 8008cc8:	3402      	adds	r4, #2
 8008cca:	1d1a      	adds	r2, r3, #4
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	9203      	str	r2, [sp, #12]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	bfb8      	it	lt
 8008cd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cd8:	9305      	str	r3, [sp, #20]
 8008cda:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008da4 <_vfiprintf_r+0x224>
 8008cde:	2203      	movs	r2, #3
 8008ce0:	4650      	mov	r0, sl
 8008ce2:	7821      	ldrb	r1, [r4, #0]
 8008ce4:	f7fe f95f 	bl	8006fa6 <memchr>
 8008ce8:	b138      	cbz	r0, 8008cfa <_vfiprintf_r+0x17a>
 8008cea:	2240      	movs	r2, #64	; 0x40
 8008cec:	9b04      	ldr	r3, [sp, #16]
 8008cee:	eba0 000a 	sub.w	r0, r0, sl
 8008cf2:	4082      	lsls	r2, r0
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	3401      	adds	r4, #1
 8008cf8:	9304      	str	r3, [sp, #16]
 8008cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cfe:	2206      	movs	r2, #6
 8008d00:	4829      	ldr	r0, [pc, #164]	; (8008da8 <_vfiprintf_r+0x228>)
 8008d02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d06:	f7fe f94e 	bl	8006fa6 <memchr>
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	d03f      	beq.n	8008d8e <_vfiprintf_r+0x20e>
 8008d0e:	4b27      	ldr	r3, [pc, #156]	; (8008dac <_vfiprintf_r+0x22c>)
 8008d10:	bb1b      	cbnz	r3, 8008d5a <_vfiprintf_r+0x1da>
 8008d12:	9b03      	ldr	r3, [sp, #12]
 8008d14:	3307      	adds	r3, #7
 8008d16:	f023 0307 	bic.w	r3, r3, #7
 8008d1a:	3308      	adds	r3, #8
 8008d1c:	9303      	str	r3, [sp, #12]
 8008d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d20:	443b      	add	r3, r7
 8008d22:	9309      	str	r3, [sp, #36]	; 0x24
 8008d24:	e768      	b.n	8008bf8 <_vfiprintf_r+0x78>
 8008d26:	460c      	mov	r4, r1
 8008d28:	2001      	movs	r0, #1
 8008d2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d2e:	e7a6      	b.n	8008c7e <_vfiprintf_r+0xfe>
 8008d30:	2300      	movs	r3, #0
 8008d32:	f04f 0c0a 	mov.w	ip, #10
 8008d36:	4619      	mov	r1, r3
 8008d38:	3401      	adds	r4, #1
 8008d3a:	9305      	str	r3, [sp, #20]
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d42:	3a30      	subs	r2, #48	; 0x30
 8008d44:	2a09      	cmp	r2, #9
 8008d46:	d903      	bls.n	8008d50 <_vfiprintf_r+0x1d0>
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d0c6      	beq.n	8008cda <_vfiprintf_r+0x15a>
 8008d4c:	9105      	str	r1, [sp, #20]
 8008d4e:	e7c4      	b.n	8008cda <_vfiprintf_r+0x15a>
 8008d50:	4604      	mov	r4, r0
 8008d52:	2301      	movs	r3, #1
 8008d54:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d58:	e7f0      	b.n	8008d3c <_vfiprintf_r+0x1bc>
 8008d5a:	ab03      	add	r3, sp, #12
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	462a      	mov	r2, r5
 8008d60:	4630      	mov	r0, r6
 8008d62:	4b13      	ldr	r3, [pc, #76]	; (8008db0 <_vfiprintf_r+0x230>)
 8008d64:	a904      	add	r1, sp, #16
 8008d66:	f7fd fb05 	bl	8006374 <_printf_float>
 8008d6a:	4607      	mov	r7, r0
 8008d6c:	1c78      	adds	r0, r7, #1
 8008d6e:	d1d6      	bne.n	8008d1e <_vfiprintf_r+0x19e>
 8008d70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d72:	07d9      	lsls	r1, r3, #31
 8008d74:	d405      	bmi.n	8008d82 <_vfiprintf_r+0x202>
 8008d76:	89ab      	ldrh	r3, [r5, #12]
 8008d78:	059a      	lsls	r2, r3, #22
 8008d7a:	d402      	bmi.n	8008d82 <_vfiprintf_r+0x202>
 8008d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d7e:	f7fe f911 	bl	8006fa4 <__retarget_lock_release_recursive>
 8008d82:	89ab      	ldrh	r3, [r5, #12]
 8008d84:	065b      	lsls	r3, r3, #25
 8008d86:	f53f af1d 	bmi.w	8008bc4 <_vfiprintf_r+0x44>
 8008d8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d8c:	e71c      	b.n	8008bc8 <_vfiprintf_r+0x48>
 8008d8e:	ab03      	add	r3, sp, #12
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	462a      	mov	r2, r5
 8008d94:	4630      	mov	r0, r6
 8008d96:	4b06      	ldr	r3, [pc, #24]	; (8008db0 <_vfiprintf_r+0x230>)
 8008d98:	a904      	add	r1, sp, #16
 8008d9a:	f7fd fd8b 	bl	80068b4 <_printf_i>
 8008d9e:	e7e4      	b.n	8008d6a <_vfiprintf_r+0x1ea>
 8008da0:	0800992c 	.word	0x0800992c
 8008da4:	08009932 	.word	0x08009932
 8008da8:	08009936 	.word	0x08009936
 8008dac:	08006375 	.word	0x08006375
 8008db0:	08008b5d 	.word	0x08008b5d

08008db4 <__swbuf_r>:
 8008db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db6:	460e      	mov	r6, r1
 8008db8:	4614      	mov	r4, r2
 8008dba:	4605      	mov	r5, r0
 8008dbc:	b118      	cbz	r0, 8008dc6 <__swbuf_r+0x12>
 8008dbe:	6a03      	ldr	r3, [r0, #32]
 8008dc0:	b90b      	cbnz	r3, 8008dc6 <__swbuf_r+0x12>
 8008dc2:	f7fd ff25 	bl	8006c10 <__sinit>
 8008dc6:	69a3      	ldr	r3, [r4, #24]
 8008dc8:	60a3      	str	r3, [r4, #8]
 8008dca:	89a3      	ldrh	r3, [r4, #12]
 8008dcc:	071a      	lsls	r2, r3, #28
 8008dce:	d525      	bpl.n	8008e1c <__swbuf_r+0x68>
 8008dd0:	6923      	ldr	r3, [r4, #16]
 8008dd2:	b31b      	cbz	r3, 8008e1c <__swbuf_r+0x68>
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	6922      	ldr	r2, [r4, #16]
 8008dd8:	b2f6      	uxtb	r6, r6
 8008dda:	1a98      	subs	r0, r3, r2
 8008ddc:	6963      	ldr	r3, [r4, #20]
 8008dde:	4637      	mov	r7, r6
 8008de0:	4283      	cmp	r3, r0
 8008de2:	dc04      	bgt.n	8008dee <__swbuf_r+0x3a>
 8008de4:	4621      	mov	r1, r4
 8008de6:	4628      	mov	r0, r5
 8008de8:	f7ff fdc8 	bl	800897c <_fflush_r>
 8008dec:	b9e0      	cbnz	r0, 8008e28 <__swbuf_r+0x74>
 8008dee:	68a3      	ldr	r3, [r4, #8]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	60a3      	str	r3, [r4, #8]
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	1c5a      	adds	r2, r3, #1
 8008df8:	6022      	str	r2, [r4, #0]
 8008dfa:	701e      	strb	r6, [r3, #0]
 8008dfc:	6962      	ldr	r2, [r4, #20]
 8008dfe:	1c43      	adds	r3, r0, #1
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d004      	beq.n	8008e0e <__swbuf_r+0x5a>
 8008e04:	89a3      	ldrh	r3, [r4, #12]
 8008e06:	07db      	lsls	r3, r3, #31
 8008e08:	d506      	bpl.n	8008e18 <__swbuf_r+0x64>
 8008e0a:	2e0a      	cmp	r6, #10
 8008e0c:	d104      	bne.n	8008e18 <__swbuf_r+0x64>
 8008e0e:	4621      	mov	r1, r4
 8008e10:	4628      	mov	r0, r5
 8008e12:	f7ff fdb3 	bl	800897c <_fflush_r>
 8008e16:	b938      	cbnz	r0, 8008e28 <__swbuf_r+0x74>
 8008e18:	4638      	mov	r0, r7
 8008e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	4628      	mov	r0, r5
 8008e20:	f000 f806 	bl	8008e30 <__swsetup_r>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	d0d5      	beq.n	8008dd4 <__swbuf_r+0x20>
 8008e28:	f04f 37ff 	mov.w	r7, #4294967295
 8008e2c:	e7f4      	b.n	8008e18 <__swbuf_r+0x64>
	...

08008e30 <__swsetup_r>:
 8008e30:	b538      	push	{r3, r4, r5, lr}
 8008e32:	4b2a      	ldr	r3, [pc, #168]	; (8008edc <__swsetup_r+0xac>)
 8008e34:	4605      	mov	r5, r0
 8008e36:	6818      	ldr	r0, [r3, #0]
 8008e38:	460c      	mov	r4, r1
 8008e3a:	b118      	cbz	r0, 8008e44 <__swsetup_r+0x14>
 8008e3c:	6a03      	ldr	r3, [r0, #32]
 8008e3e:	b90b      	cbnz	r3, 8008e44 <__swsetup_r+0x14>
 8008e40:	f7fd fee6 	bl	8006c10 <__sinit>
 8008e44:	89a3      	ldrh	r3, [r4, #12]
 8008e46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e4a:	0718      	lsls	r0, r3, #28
 8008e4c:	d422      	bmi.n	8008e94 <__swsetup_r+0x64>
 8008e4e:	06d9      	lsls	r1, r3, #27
 8008e50:	d407      	bmi.n	8008e62 <__swsetup_r+0x32>
 8008e52:	2309      	movs	r3, #9
 8008e54:	602b      	str	r3, [r5, #0]
 8008e56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5e:	81a3      	strh	r3, [r4, #12]
 8008e60:	e034      	b.n	8008ecc <__swsetup_r+0x9c>
 8008e62:	0758      	lsls	r0, r3, #29
 8008e64:	d512      	bpl.n	8008e8c <__swsetup_r+0x5c>
 8008e66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e68:	b141      	cbz	r1, 8008e7c <__swsetup_r+0x4c>
 8008e6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e6e:	4299      	cmp	r1, r3
 8008e70:	d002      	beq.n	8008e78 <__swsetup_r+0x48>
 8008e72:	4628      	mov	r0, r5
 8008e74:	f7fe ff34 	bl	8007ce0 <_free_r>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	6363      	str	r3, [r4, #52]	; 0x34
 8008e7c:	89a3      	ldrh	r3, [r4, #12]
 8008e7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e82:	81a3      	strh	r3, [r4, #12]
 8008e84:	2300      	movs	r3, #0
 8008e86:	6063      	str	r3, [r4, #4]
 8008e88:	6923      	ldr	r3, [r4, #16]
 8008e8a:	6023      	str	r3, [r4, #0]
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	f043 0308 	orr.w	r3, r3, #8
 8008e92:	81a3      	strh	r3, [r4, #12]
 8008e94:	6923      	ldr	r3, [r4, #16]
 8008e96:	b94b      	cbnz	r3, 8008eac <__swsetup_r+0x7c>
 8008e98:	89a3      	ldrh	r3, [r4, #12]
 8008e9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ea2:	d003      	beq.n	8008eac <__swsetup_r+0x7c>
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f000 f88b 	bl	8008fc2 <__smakebuf_r>
 8008eac:	89a0      	ldrh	r0, [r4, #12]
 8008eae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008eb2:	f010 0301 	ands.w	r3, r0, #1
 8008eb6:	d00a      	beq.n	8008ece <__swsetup_r+0x9e>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	60a3      	str	r3, [r4, #8]
 8008ebc:	6963      	ldr	r3, [r4, #20]
 8008ebe:	425b      	negs	r3, r3
 8008ec0:	61a3      	str	r3, [r4, #24]
 8008ec2:	6923      	ldr	r3, [r4, #16]
 8008ec4:	b943      	cbnz	r3, 8008ed8 <__swsetup_r+0xa8>
 8008ec6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008eca:	d1c4      	bne.n	8008e56 <__swsetup_r+0x26>
 8008ecc:	bd38      	pop	{r3, r4, r5, pc}
 8008ece:	0781      	lsls	r1, r0, #30
 8008ed0:	bf58      	it	pl
 8008ed2:	6963      	ldrpl	r3, [r4, #20]
 8008ed4:	60a3      	str	r3, [r4, #8]
 8008ed6:	e7f4      	b.n	8008ec2 <__swsetup_r+0x92>
 8008ed8:	2000      	movs	r0, #0
 8008eda:	e7f7      	b.n	8008ecc <__swsetup_r+0x9c>
 8008edc:	20000064 	.word	0x20000064

08008ee0 <_raise_r>:
 8008ee0:	291f      	cmp	r1, #31
 8008ee2:	b538      	push	{r3, r4, r5, lr}
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	460d      	mov	r5, r1
 8008ee8:	d904      	bls.n	8008ef4 <_raise_r+0x14>
 8008eea:	2316      	movs	r3, #22
 8008eec:	6003      	str	r3, [r0, #0]
 8008eee:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef2:	bd38      	pop	{r3, r4, r5, pc}
 8008ef4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008ef6:	b112      	cbz	r2, 8008efe <_raise_r+0x1e>
 8008ef8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008efc:	b94b      	cbnz	r3, 8008f12 <_raise_r+0x32>
 8008efe:	4620      	mov	r0, r4
 8008f00:	f000 f830 	bl	8008f64 <_getpid_r>
 8008f04:	462a      	mov	r2, r5
 8008f06:	4601      	mov	r1, r0
 8008f08:	4620      	mov	r0, r4
 8008f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f0e:	f000 b817 	b.w	8008f40 <_kill_r>
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d00a      	beq.n	8008f2c <_raise_r+0x4c>
 8008f16:	1c59      	adds	r1, r3, #1
 8008f18:	d103      	bne.n	8008f22 <_raise_r+0x42>
 8008f1a:	2316      	movs	r3, #22
 8008f1c:	6003      	str	r3, [r0, #0]
 8008f1e:	2001      	movs	r0, #1
 8008f20:	e7e7      	b.n	8008ef2 <_raise_r+0x12>
 8008f22:	2400      	movs	r4, #0
 8008f24:	4628      	mov	r0, r5
 8008f26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f2a:	4798      	blx	r3
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	e7e0      	b.n	8008ef2 <_raise_r+0x12>

08008f30 <raise>:
 8008f30:	4b02      	ldr	r3, [pc, #8]	; (8008f3c <raise+0xc>)
 8008f32:	4601      	mov	r1, r0
 8008f34:	6818      	ldr	r0, [r3, #0]
 8008f36:	f7ff bfd3 	b.w	8008ee0 <_raise_r>
 8008f3a:	bf00      	nop
 8008f3c:	20000064 	.word	0x20000064

08008f40 <_kill_r>:
 8008f40:	b538      	push	{r3, r4, r5, lr}
 8008f42:	2300      	movs	r3, #0
 8008f44:	4d06      	ldr	r5, [pc, #24]	; (8008f60 <_kill_r+0x20>)
 8008f46:	4604      	mov	r4, r0
 8008f48:	4608      	mov	r0, r1
 8008f4a:	4611      	mov	r1, r2
 8008f4c:	602b      	str	r3, [r5, #0]
 8008f4e:	f7f9 f9da 	bl	8002306 <_kill>
 8008f52:	1c43      	adds	r3, r0, #1
 8008f54:	d102      	bne.n	8008f5c <_kill_r+0x1c>
 8008f56:	682b      	ldr	r3, [r5, #0]
 8008f58:	b103      	cbz	r3, 8008f5c <_kill_r+0x1c>
 8008f5a:	6023      	str	r3, [r4, #0]
 8008f5c:	bd38      	pop	{r3, r4, r5, pc}
 8008f5e:	bf00      	nop
 8008f60:	20000574 	.word	0x20000574

08008f64 <_getpid_r>:
 8008f64:	f7f9 b9c8 	b.w	80022f8 <_getpid>

08008f68 <_malloc_usable_size_r>:
 8008f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f6c:	1f18      	subs	r0, r3, #4
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	bfbc      	itt	lt
 8008f72:	580b      	ldrlt	r3, [r1, r0]
 8008f74:	18c0      	addlt	r0, r0, r3
 8008f76:	4770      	bx	lr

08008f78 <__swhatbuf_r>:
 8008f78:	b570      	push	{r4, r5, r6, lr}
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f80:	4615      	mov	r5, r2
 8008f82:	2900      	cmp	r1, #0
 8008f84:	461e      	mov	r6, r3
 8008f86:	b096      	sub	sp, #88	; 0x58
 8008f88:	da0c      	bge.n	8008fa4 <__swhatbuf_r+0x2c>
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008f92:	bf0c      	ite	eq
 8008f94:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008f98:	2340      	movne	r3, #64	; 0x40
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	6031      	str	r1, [r6, #0]
 8008f9e:	602b      	str	r3, [r5, #0]
 8008fa0:	b016      	add	sp, #88	; 0x58
 8008fa2:	bd70      	pop	{r4, r5, r6, pc}
 8008fa4:	466a      	mov	r2, sp
 8008fa6:	f000 f849 	bl	800903c <_fstat_r>
 8008faa:	2800      	cmp	r0, #0
 8008fac:	dbed      	blt.n	8008f8a <__swhatbuf_r+0x12>
 8008fae:	9901      	ldr	r1, [sp, #4]
 8008fb0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008fb4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008fb8:	4259      	negs	r1, r3
 8008fba:	4159      	adcs	r1, r3
 8008fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fc0:	e7eb      	b.n	8008f9a <__swhatbuf_r+0x22>

08008fc2 <__smakebuf_r>:
 8008fc2:	898b      	ldrh	r3, [r1, #12]
 8008fc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008fc6:	079d      	lsls	r5, r3, #30
 8008fc8:	4606      	mov	r6, r0
 8008fca:	460c      	mov	r4, r1
 8008fcc:	d507      	bpl.n	8008fde <__smakebuf_r+0x1c>
 8008fce:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008fd2:	6023      	str	r3, [r4, #0]
 8008fd4:	6123      	str	r3, [r4, #16]
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	6163      	str	r3, [r4, #20]
 8008fda:	b002      	add	sp, #8
 8008fdc:	bd70      	pop	{r4, r5, r6, pc}
 8008fde:	466a      	mov	r2, sp
 8008fe0:	ab01      	add	r3, sp, #4
 8008fe2:	f7ff ffc9 	bl	8008f78 <__swhatbuf_r>
 8008fe6:	9900      	ldr	r1, [sp, #0]
 8008fe8:	4605      	mov	r5, r0
 8008fea:	4630      	mov	r0, r6
 8008fec:	f7fe fee8 	bl	8007dc0 <_malloc_r>
 8008ff0:	b948      	cbnz	r0, 8009006 <__smakebuf_r+0x44>
 8008ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ff6:	059a      	lsls	r2, r3, #22
 8008ff8:	d4ef      	bmi.n	8008fda <__smakebuf_r+0x18>
 8008ffa:	f023 0303 	bic.w	r3, r3, #3
 8008ffe:	f043 0302 	orr.w	r3, r3, #2
 8009002:	81a3      	strh	r3, [r4, #12]
 8009004:	e7e3      	b.n	8008fce <__smakebuf_r+0xc>
 8009006:	89a3      	ldrh	r3, [r4, #12]
 8009008:	6020      	str	r0, [r4, #0]
 800900a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800900e:	81a3      	strh	r3, [r4, #12]
 8009010:	9b00      	ldr	r3, [sp, #0]
 8009012:	6120      	str	r0, [r4, #16]
 8009014:	6163      	str	r3, [r4, #20]
 8009016:	9b01      	ldr	r3, [sp, #4]
 8009018:	b15b      	cbz	r3, 8009032 <__smakebuf_r+0x70>
 800901a:	4630      	mov	r0, r6
 800901c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009020:	f000 f81e 	bl	8009060 <_isatty_r>
 8009024:	b128      	cbz	r0, 8009032 <__smakebuf_r+0x70>
 8009026:	89a3      	ldrh	r3, [r4, #12]
 8009028:	f023 0303 	bic.w	r3, r3, #3
 800902c:	f043 0301 	orr.w	r3, r3, #1
 8009030:	81a3      	strh	r3, [r4, #12]
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	431d      	orrs	r5, r3
 8009036:	81a5      	strh	r5, [r4, #12]
 8009038:	e7cf      	b.n	8008fda <__smakebuf_r+0x18>
	...

0800903c <_fstat_r>:
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	2300      	movs	r3, #0
 8009040:	4d06      	ldr	r5, [pc, #24]	; (800905c <_fstat_r+0x20>)
 8009042:	4604      	mov	r4, r0
 8009044:	4608      	mov	r0, r1
 8009046:	4611      	mov	r1, r2
 8009048:	602b      	str	r3, [r5, #0]
 800904a:	f7f9 f9ba 	bl	80023c2 <_fstat>
 800904e:	1c43      	adds	r3, r0, #1
 8009050:	d102      	bne.n	8009058 <_fstat_r+0x1c>
 8009052:	682b      	ldr	r3, [r5, #0]
 8009054:	b103      	cbz	r3, 8009058 <_fstat_r+0x1c>
 8009056:	6023      	str	r3, [r4, #0]
 8009058:	bd38      	pop	{r3, r4, r5, pc}
 800905a:	bf00      	nop
 800905c:	20000574 	.word	0x20000574

08009060 <_isatty_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	2300      	movs	r3, #0
 8009064:	4d05      	ldr	r5, [pc, #20]	; (800907c <_isatty_r+0x1c>)
 8009066:	4604      	mov	r4, r0
 8009068:	4608      	mov	r0, r1
 800906a:	602b      	str	r3, [r5, #0]
 800906c:	f7f9 f9b8 	bl	80023e0 <_isatty>
 8009070:	1c43      	adds	r3, r0, #1
 8009072:	d102      	bne.n	800907a <_isatty_r+0x1a>
 8009074:	682b      	ldr	r3, [r5, #0]
 8009076:	b103      	cbz	r3, 800907a <_isatty_r+0x1a>
 8009078:	6023      	str	r3, [r4, #0]
 800907a:	bd38      	pop	{r3, r4, r5, pc}
 800907c:	20000574 	.word	0x20000574

08009080 <_init>:
 8009080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009082:	bf00      	nop
 8009084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009086:	bc08      	pop	{r3}
 8009088:	469e      	mov	lr, r3
 800908a:	4770      	bx	lr

0800908c <_fini>:
 800908c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908e:	bf00      	nop
 8009090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009092:	bc08      	pop	{r3}
 8009094:	469e      	mov	lr, r3
 8009096:	4770      	bx	lr
